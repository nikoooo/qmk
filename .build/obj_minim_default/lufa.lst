   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB126:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #    include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** 
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c **** #    include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c **** extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:tmk_core/protocol/lufa/lufa.c **** #    include <audio.h>
  67:tmk_core/protocol/lufa/lufa.c **** #endif
  68:tmk_core/protocol/lufa/lufa.c **** 
  69:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:tmk_core/protocol/lufa/lufa.c **** #    ifdef MODULE_ADAFRUIT_BLE
  71:tmk_core/protocol/lufa/lufa.c **** #        include "adafruit_ble.h"
  72:tmk_core/protocol/lufa/lufa.c **** #    else
  73:tmk_core/protocol/lufa/lufa.c **** #        include "bluetooth.h"
  74:tmk_core/protocol/lufa/lufa.c **** #    endif
  75:tmk_core/protocol/lufa/lufa.c **** #endif
  76:tmk_core/protocol/lufa/lufa.c **** 
  77:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:tmk_core/protocol/lufa/lufa.c **** #    include "virtser.h"
  79:tmk_core/protocol/lufa/lufa.c **** #endif
  80:tmk_core/protocol/lufa/lufa.c **** 
  81:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) || defined(RGBLIGHT_ANIMATIONS)) && defined(RGBLIGHT_ENABLE)
  82:tmk_core/protocol/lufa/lufa.c **** #    include "rgblight.h"
  83:tmk_core/protocol/lufa/lufa.c **** #endif
  84:tmk_core/protocol/lufa/lufa.c **** 
  85:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:tmk_core/protocol/lufa/lufa.c **** #    include "qmk_midi.h"
  87:tmk_core/protocol/lufa/lufa.c **** #endif
  88:tmk_core/protocol/lufa/lufa.c **** 
  89:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:tmk_core/protocol/lufa/lufa.c **** #    include "raw_hid.h"
  91:tmk_core/protocol/lufa/lufa.c **** #endif
  92:tmk_core/protocol/lufa/lufa.c **** 
  93:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:tmk_core/protocol/lufa/lufa.c **** uint8_t        keyboard_protocol  = 1;
  96:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:tmk_core/protocol/lufa/lufa.c **** 
  98:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:tmk_core/protocol/lufa/lufa.c **** 
 100:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:tmk_core/protocol/lufa/lufa.c **** static void    send_keyboard(report_keyboard_t *report);
 103:tmk_core/protocol/lufa/lufa.c **** static void    send_mouse(report_mouse_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void    send_system(uint16_t data);
 105:tmk_core/protocol/lufa/lufa.c **** static void    send_consumer(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** host_driver_t  lufa_driver = {
 107:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds, send_keyboard, send_mouse, send_system, send_consumer,
 108:tmk_core/protocol/lufa/lufa.c **** };
 109:tmk_core/protocol/lufa/lufa.c **** 
 110:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 111:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device = {
 112:tmk_core/protocol/lufa/lufa.c ****     .Config =
 113:tmk_core/protocol/lufa/lufa.c ****         {
 114:tmk_core/protocol/lufa/lufa.c ****             .ControlInterfaceNumber = CCI_INTERFACE,
 115:tmk_core/protocol/lufa/lufa.c ****             .DataINEndpoint =
 116:tmk_core/protocol/lufa/lufa.c ****                 {
 117:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_IN_EPADDR,
 118:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_EPSIZE,
 119:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 120:tmk_core/protocol/lufa/lufa.c ****                 },
 121:tmk_core/protocol/lufa/lufa.c ****             .DataOUTEndpoint =
 122:tmk_core/protocol/lufa/lufa.c ****                 {
 123:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_OUT_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 126:tmk_core/protocol/lufa/lufa.c ****                 },
 127:tmk_core/protocol/lufa/lufa.c ****             .NotificationEndpoint =
 128:tmk_core/protocol/lufa/lufa.c ****                 {
 129:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_NOTIFICATION_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_NOTIFICATION_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 132:tmk_core/protocol/lufa/lufa.c ****                 },
 133:tmk_core/protocol/lufa/lufa.c ****         },
 134:tmk_core/protocol/lufa/lufa.c **** };
 135:tmk_core/protocol/lufa/lufa.c **** #endif
 136:tmk_core/protocol/lufa/lufa.c **** 
 137:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 138:tmk_core/protocol/lufa/lufa.c **** 
 139:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 140:tmk_core/protocol/lufa/lufa.c ****  *
 141:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 142:tmk_core/protocol/lufa/lufa.c ****  */
 143:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send(uint8_t *data, uint8_t length) {
 144:tmk_core/protocol/lufa/lufa.c ****     // TODO: implement variable size packet
 145:tmk_core/protocol/lufa/lufa.c ****     if (length != RAW_EPSIZE) {
 146:tmk_core/protocol/lufa/lufa.c ****         return;
 147:tmk_core/protocol/lufa/lufa.c ****     }
 148:tmk_core/protocol/lufa/lufa.c **** 
 149:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) {
 150:tmk_core/protocol/lufa/lufa.c ****         return;
 151:tmk_core/protocol/lufa/lufa.c ****     }
 152:tmk_core/protocol/lufa/lufa.c **** 
 153:tmk_core/protocol/lufa/lufa.c ****     // TODO: decide if we allow calls to raw_hid_send() in the middle
 154:tmk_core/protocol/lufa/lufa.c ****     // of other endpoint usage.
 155:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 158:tmk_core/protocol/lufa/lufa.c **** 
 159:tmk_core/protocol/lufa/lufa.c ****     // Check to see if the host is ready to accept another packet
 160:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 161:tmk_core/protocol/lufa/lufa.c ****         // Write data
 162:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 163:tmk_core/protocol/lufa/lufa.c ****         // Finalize the stream transfer to send the last packet
 164:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 165:tmk_core/protocol/lufa/lufa.c ****     }
 166:tmk_core/protocol/lufa/lufa.c **** 
 167:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 168:tmk_core/protocol/lufa/lufa.c **** }
 169:tmk_core/protocol/lufa/lufa.c **** 
 170:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 171:tmk_core/protocol/lufa/lufa.c ****  *
 172:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 173:tmk_core/protocol/lufa/lufa.c ****  */
 174:tmk_core/protocol/lufa/lufa.c **** __attribute__((weak)) void raw_hid_receive(uint8_t *data, uint8_t length) {
 175:tmk_core/protocol/lufa/lufa.c ****     // Users should #include "raw_hid.h" in their own code
 176:tmk_core/protocol/lufa/lufa.c ****     // and implement this function there. Leave this as weak linkage
 177:tmk_core/protocol/lufa/lufa.c ****     // so users can opt to not handle data coming in.
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void) {
 185:tmk_core/protocol/lufa/lufa.c ****     // Create a temporary buffer to hold the read in data from the host
 186:tmk_core/protocol/lufa/lufa.c ****     uint8_t data[RAW_EPSIZE];
 187:tmk_core/protocol/lufa/lufa.c ****     bool    data_read = false;
 188:tmk_core/protocol/lufa/lufa.c **** 
 189:tmk_core/protocol/lufa/lufa.c ****     // Device must be connected and configured for the task to run
 190:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 193:tmk_core/protocol/lufa/lufa.c **** 
 194:tmk_core/protocol/lufa/lufa.c ****     // Check to see if a packet has been sent from the host
 195:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived()) {
 196:tmk_core/protocol/lufa/lufa.c ****         // Check to see if the packet contains data
 197:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed()) {
 198:tmk_core/protocol/lufa/lufa.c ****             /* Read data */
 199:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 200:tmk_core/protocol/lufa/lufa.c ****             data_read = true;
 201:tmk_core/protocol/lufa/lufa.c ****         }
 202:tmk_core/protocol/lufa/lufa.c **** 
 203:tmk_core/protocol/lufa/lufa.c ****         // Finalize the stream transfer to receive the last packet
 204:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c ****         if (data_read) {
 207:tmk_core/protocol/lufa/lufa.c ****             raw_hid_receive(data, sizeof(data));
 208:tmk_core/protocol/lufa/lufa.c ****         }
 209:tmk_core/protocol/lufa/lufa.c ****     }
 210:tmk_core/protocol/lufa/lufa.c **** }
 211:tmk_core/protocol/lufa/lufa.c **** #endif
 212:tmk_core/protocol/lufa/lufa.c **** 
 213:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 214:tmk_core/protocol/lufa/lufa.c ****  * Console
 215:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 216:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 217:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 218:tmk_core/protocol/lufa/lufa.c ****  *
 219:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 220:tmk_core/protocol/lufa/lufa.c ****  */
 221:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void) {
 222:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 223:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 224:tmk_core/protocol/lufa/lufa.c **** 
 225:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 226:tmk_core/protocol/lufa/lufa.c **** 
 227:tmk_core/protocol/lufa/lufa.c **** #    if 0
 228:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 229:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 230:tmk_core/protocol/lufa/lufa.c **** 
 231:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 232:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 233:tmk_core/protocol/lufa/lufa.c ****     {
 234:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 235:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 236:tmk_core/protocol/lufa/lufa.c ****         {
 237:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 238:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 239:tmk_core/protocol/lufa/lufa.c **** 
 240:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 241:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 242:tmk_core/protocol/lufa/lufa.c **** 
 243:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 244:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 245:tmk_core/protocol/lufa/lufa.c ****         }
 246:tmk_core/protocol/lufa/lufa.c **** 
 247:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 248:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 249:tmk_core/protocol/lufa/lufa.c ****     }
 250:tmk_core/protocol/lufa/lufa.c **** #    endif
 251:tmk_core/protocol/lufa/lufa.c **** 
 252:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 253:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 254:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 255:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 256:tmk_core/protocol/lufa/lufa.c ****         return;
 257:tmk_core/protocol/lufa/lufa.c ****     }
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 260:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed()) Endpoint_Write_8(0);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 263:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 264:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 265:tmk_core/protocol/lufa/lufa.c ****     }
 266:tmk_core/protocol/lufa/lufa.c **** 
 267:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 268:tmk_core/protocol/lufa/lufa.c **** }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 272:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 273:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 274:tmk_core/protocol/lufa/lufa.c **** /*
 275:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 276:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 277:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 278:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 279:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 280:tmk_core/protocol/lufa/lufa.c ****  */
 281:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 282:tmk_core/protocol/lufa/lufa.c ****  *
 283:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 284:tmk_core/protocol/lufa/lufa.c ****  */
 285:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void) {
 286:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 287:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 288:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 289:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 290:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 291:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 292:tmk_core/protocol/lufa/lufa.c ****     }
 293:tmk_core/protocol/lufa/lufa.c **** }
 294:tmk_core/protocol/lufa/lufa.c **** 
 295:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 296:tmk_core/protocol/lufa/lufa.c ****  *
 297:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 298:tmk_core/protocol/lufa/lufa.c ****  */
 299:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void) {
 300:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 301:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 302:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 303:tmk_core/protocol/lufa/lufa.c ****     /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 304:tmk_core/protocol/lufa/lufa.c ****         if (USB_IsInitialized) {
 305:tmk_core/protocol/lufa/lufa.c ****             USB_Disable();  // Disable all interrupts
 306:tmk_core/protocol/lufa/lufa.c ****         USB_Controller_Enable();
 307:tmk_core/protocol/lufa/lufa.c ****             USB_INT_Enable(USB_INT_VBUSTI);
 308:tmk_core/protocol/lufa/lufa.c ****         }
 309:tmk_core/protocol/lufa/lufa.c ****     */
 310:tmk_core/protocol/lufa/lufa.c **** }
 311:tmk_core/protocol/lufa/lufa.c **** 
 312:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 313:tmk_core/protocol/lufa/lufa.c ****  *
 314:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 315:tmk_core/protocol/lufa/lufa.c ****  */
 316:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void) { print("[R]"); }
 317:tmk_core/protocol/lufa/lufa.c **** 
 318:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 319:tmk_core/protocol/lufa/lufa.c ****  *
 320:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 321:tmk_core/protocol/lufa/lufa.c ****  */
 322:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend() {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 324:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 325:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 326:tmk_core/protocol/lufa/lufa.c **** #endif
 327:tmk_core/protocol/lufa/lufa.c **** }
 328:tmk_core/protocol/lufa/lufa.c **** 
 329:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 330:tmk_core/protocol/lufa/lufa.c ****  *
 331:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 332:tmk_core/protocol/lufa/lufa.c ****  */
 333:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp() {
 334:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 335:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 336:tmk_core/protocol/lufa/lufa.c **** 
 337:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 338:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 339:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 340:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 341:tmk_core/protocol/lufa/lufa.c **** #endif
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 345:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 346:tmk_core/protocol/lufa/lufa.c **** #    define CONSOLE_FLUSH_SET(b)                                     \
 347:tmk_core/protocol/lufa/lufa.c ****         do {                                                         \
 348:tmk_core/protocol/lufa/lufa.c ****             ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { console_flush = b; } \
 349:tmk_core/protocol/lufa/lufa.c ****         } while (0)
 350:tmk_core/protocol/lufa/lufa.c **** 
 351:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 352:tmk_core/protocol/lufa/lufa.c ****  *
 353:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 354:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 355:tmk_core/protocol/lufa/lufa.c ****  */
 356:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void) {
 357:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 358:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 359:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 360:tmk_core/protocol/lufa/lufa.c **** 
 361:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 362:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 363:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 364:tmk_core/protocol/lufa/lufa.c **** }
 365:tmk_core/protocol/lufa/lufa.c **** 
 366:tmk_core/protocol/lufa/lufa.c **** #endif
 367:tmk_core/protocol/lufa/lufa.c **** 
 368:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 369:tmk_core/protocol/lufa/lufa.c ****  *
 370:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 371:tmk_core/protocol/lufa/lufa.c ****  *
 372:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 373:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 374:tmk_core/protocol/lufa/lufa.c ****  */
 375:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void) {
 376:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 377:tmk_core/protocol/lufa/lufa.c **** 
 378:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 379:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 380:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, KEYBOAR
 381:tmk_core/protocol/lufa/lufa.c **** #endif
 382:tmk_core/protocol/lufa/lufa.c **** 
 383:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 384:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 385:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, MOUSE_EPSI
 386:tmk_core/protocol/lufa/lufa.c **** #endif
 387:tmk_core/protocol/lufa/lufa.c **** 
 388:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 389:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 390:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, SHARED_EP
 391:tmk_core/protocol/lufa/lufa.c **** #endif
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 394:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 395:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, RAW_EPSIZE, 
 396:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT, RAW_EPSIZE
 397:tmk_core/protocol/lufa/lufa.c **** #endif
 398:tmk_core/protocol/lufa/lufa.c **** 
 399:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 400:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 401:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, CONSOLE_
 402:tmk_core/protocol/lufa/lufa.c **** #    if 0
 403:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 404:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 405:tmk_core/protocol/lufa/lufa.c **** #    endif
 406:tmk_core/protocol/lufa/lufa.c **** #endif
 407:tmk_core/protocol/lufa/lufa.c **** 
 408:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 409:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 410:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 411:tmk_core/protocol/lufa/lufa.c **** #endif
 412:tmk_core/protocol/lufa/lufa.c **** 
 413:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 414:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 415:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 416:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 417:tmk_core/protocol/lufa/lufa.c **** #endif
 418:tmk_core/protocol/lufa/lufa.c **** }
 419:tmk_core/protocol/lufa/lufa.c **** 
 420:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 421:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 424:tmk_core/protocol/lufa/lufa.c **** 
 425:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 426:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 427:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 428:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 429:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 430:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 431:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 432:tmk_core/protocol/lufa/lufa.c **** */
 433:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 434:tmk_core/protocol/lufa/lufa.c ****  *
 435:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 436:tmk_core/protocol/lufa/lufa.c ****  */
 437:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void) {
 438:tmk_core/protocol/lufa/lufa.c ****     uint8_t *ReportData = NULL;
 439:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 440:tmk_core/protocol/lufa/lufa.c **** 
 441:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 442:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest) {
 443:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 444:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 445:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 448:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 449:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 450:tmk_core/protocol/lufa/lufa.c ****                         // TODO: test/check
 451:tmk_core/protocol/lufa/lufa.c ****                         ReportData = (uint8_t *)&keyboard_report_sent;
 452:tmk_core/protocol/lufa/lufa.c ****                         ReportSize = sizeof(keyboard_report_sent);
 453:tmk_core/protocol/lufa/lufa.c ****                         break;
 454:tmk_core/protocol/lufa/lufa.c ****                 }
 455:tmk_core/protocol/lufa/lufa.c **** 
 456:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 457:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 458:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 459:tmk_core/protocol/lufa/lufa.c ****             }
 460:tmk_core/protocol/lufa/lufa.c **** 
 461:tmk_core/protocol/lufa/lufa.c ****             break;
 462:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 463:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 464:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 465:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 466:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 467:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 468:tmk_core/protocol/lufa/lufa.c ****                     case SHARED_INTERFACE:
 469:tmk_core/protocol/lufa/lufa.c **** #endif
 470:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearSETUP();
 471:tmk_core/protocol/lufa/lufa.c **** 
 472:tmk_core/protocol/lufa/lufa.c ****                         while (!(Endpoint_IsOUTReceived())) {
 473:tmk_core/protocol/lufa/lufa.c ****                             if (USB_DeviceState == DEVICE_STATE_Unattached) return;
 474:tmk_core/protocol/lufa/lufa.c ****                         }
 475:tmk_core/protocol/lufa/lufa.c **** 
 476:tmk_core/protocol/lufa/lufa.c ****                         if (Endpoint_BytesInEndpoint() == 2) {
 477:tmk_core/protocol/lufa/lufa.c ****                             uint8_t report_id = Endpoint_Read_8();
 478:tmk_core/protocol/lufa/lufa.c **** 
 479:tmk_core/protocol/lufa/lufa.c ****                             if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 480:tmk_core/protocol/lufa/lufa.c ****                                 keyboard_led_stats = Endpoint_Read_8();
 481:tmk_core/protocol/lufa/lufa.c ****                             }
 482:tmk_core/protocol/lufa/lufa.c ****                         } else {
 483:tmk_core/protocol/lufa/lufa.c ****                             keyboard_led_stats = Endpoint_Read_8();
 484:tmk_core/protocol/lufa/lufa.c ****                         }
 485:tmk_core/protocol/lufa/lufa.c **** 
 486:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearOUT();
 487:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearStatusStage();
 488:tmk_core/protocol/lufa/lufa.c ****                         break;
 489:tmk_core/protocol/lufa/lufa.c ****                 }
 490:tmk_core/protocol/lufa/lufa.c ****             }
 491:tmk_core/protocol/lufa/lufa.c **** 
 492:tmk_core/protocol/lufa/lufa.c ****             break;
 493:tmk_core/protocol/lufa/lufa.c **** 
 494:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 495:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 496:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 497:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 498:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()))
 499:tmk_core/protocol/lufa/lufa.c ****                         ;
 500:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 501:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 502:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 503:tmk_core/protocol/lufa/lufa.c ****                 }
 504:tmk_core/protocol/lufa/lufa.c ****             }
 505:tmk_core/protocol/lufa/lufa.c **** 
 506:tmk_core/protocol/lufa/lufa.c ****             break;
 507:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 508:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 510:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 511:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 512:tmk_core/protocol/lufa/lufa.c **** 
 513:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 514:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 515:tmk_core/protocol/lufa/lufa.c ****                 }
 516:tmk_core/protocol/lufa/lufa.c ****             }
 517:tmk_core/protocol/lufa/lufa.c **** 
 518:tmk_core/protocol/lufa/lufa.c ****             break;
 519:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 520:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 521:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 522:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 525:tmk_core/protocol/lufa/lufa.c ****             }
 526:tmk_core/protocol/lufa/lufa.c **** 
 527:tmk_core/protocol/lufa/lufa.c ****             break;
 528:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 529:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 530:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 531:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()))
 532:tmk_core/protocol/lufa/lufa.c ****                     ;
 533:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 534:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 535:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c ****     }
 540:tmk_core/protocol/lufa/lufa.c **** 
 541:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 542:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 543:tmk_core/protocol/lufa/lufa.c **** #endif
 544:tmk_core/protocol/lufa/lufa.c **** }
 545:tmk_core/protocol/lufa/lufa.c **** 
 546:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 547:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 548:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 549:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 550:tmk_core/protocol/lufa/lufa.c ****  *
 551:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 552:tmk_core/protocol/lufa/lufa.c ****  */
 553:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void) { return keyboard_led_stats; }
  15               		.loc 1 553 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               		.loc 1 553 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE126:
  27               		.section	.text.sendchar,"ax",@progbits
  28               	.global	sendchar
  30               	sendchar:
  31               	.LFB131:
 554:tmk_core/protocol/lufa/lufa.c **** 
 555:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 556:tmk_core/protocol/lufa/lufa.c ****  *
 557:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 558:tmk_core/protocol/lufa/lufa.c ****  */
 559:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report) {
 560:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 561:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 562:tmk_core/protocol/lufa/lufa.c **** 
 563:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 564:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 565:tmk_core/protocol/lufa/lufa.c **** #    ifdef MODULE_ADAFRUIT_BLE
 566:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 567:tmk_core/protocol/lufa/lufa.c **** #    elif MODULE_RN42
 568:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 569:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x09);
 570:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x01);
 571:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->mods);
 572:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->reserved);
 573:tmk_core/protocol/lufa/lufa.c ****         for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 574:tmk_core/protocol/lufa/lufa.c ****             bluefruit_serial_send(report->keys[i]);
 575:tmk_core/protocol/lufa/lufa.c ****         }
 576:tmk_core/protocol/lufa/lufa.c **** #    else
 577:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 578:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->mods);
 579:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->reserved);
 580:tmk_core/protocol/lufa/lufa.c ****         for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 581:tmk_core/protocol/lufa/lufa.c ****             bluefruit_serial_send(report->keys[i]);
 582:tmk_core/protocol/lufa/lufa.c ****         }
 583:tmk_core/protocol/lufa/lufa.c **** #    endif
 584:tmk_core/protocol/lufa/lufa.c ****     }
 585:tmk_core/protocol/lufa/lufa.c **** #endif
 586:tmk_core/protocol/lufa/lufa.c **** 
 587:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 588:tmk_core/protocol/lufa/lufa.c ****         return;
 589:tmk_core/protocol/lufa/lufa.c ****     }
 590:tmk_core/protocol/lufa/lufa.c **** 
 591:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 592:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep   = KEYBOARD_IN_EPNUM;
 593:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 594:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 595:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 596:tmk_core/protocol/lufa/lufa.c ****         ep   = SHARED_IN_EPNUM;
 597:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 598:tmk_core/protocol/lufa/lufa.c ****     }
 599:tmk_core/protocol/lufa/lufa.c **** #endif
 600:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 601:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 602:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 603:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 604:tmk_core/protocol/lufa/lufa.c **** 
 605:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 606:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 607:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 608:tmk_core/protocol/lufa/lufa.c ****     } else {
 609:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 610:tmk_core/protocol/lufa/lufa.c ****     }
 611:tmk_core/protocol/lufa/lufa.c **** 
 612:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 613:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 616:tmk_core/protocol/lufa/lufa.c **** }
 617:tmk_core/protocol/lufa/lufa.c **** 
 618:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 619:tmk_core/protocol/lufa/lufa.c ****  *
 620:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 621:tmk_core/protocol/lufa/lufa.c ****  */
 622:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report) {
 623:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 624:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 625:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 626:tmk_core/protocol/lufa/lufa.c **** 
 627:tmk_core/protocol/lufa/lufa.c **** #    ifdef BLUETOOTH_ENABLE
 628:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 629:tmk_core/protocol/lufa/lufa.c **** #        ifdef MODULE_ADAFRUIT_BLE
 630:tmk_core/protocol/lufa/lufa.c ****         // FIXME: mouse buttons
 631:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 632:tmk_core/protocol/lufa/lufa.c **** #        else
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 634:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 635:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 636:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->buttons);
 637:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->x);
 638:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->y);
 639:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->v);  // should try sending the wheel v here
 640:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->h);  // should try sending the wheel h here
 641:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 642:tmk_core/protocol/lufa/lufa.c **** #        endif
 643:tmk_core/protocol/lufa/lufa.c ****     }
 644:tmk_core/protocol/lufa/lufa.c **** #    endif
 645:tmk_core/protocol/lufa/lufa.c **** 
 646:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 647:tmk_core/protocol/lufa/lufa.c ****         return;
 648:tmk_core/protocol/lufa/lufa.c ****     }
 649:tmk_core/protocol/lufa/lufa.c **** 
 650:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 651:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 652:tmk_core/protocol/lufa/lufa.c **** 
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 658:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 659:tmk_core/protocol/lufa/lufa.c **** 
 660:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:tmk_core/protocol/lufa/lufa.c **** #endif
 663:tmk_core/protocol/lufa/lufa.c **** }
 664:tmk_core/protocol/lufa/lufa.c **** 
 665:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 666:tmk_core/protocol/lufa/lufa.c ****  *
 667:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 668:tmk_core/protocol/lufa/lufa.c ****  */
 669:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data) {
 670:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 671:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 672:tmk_core/protocol/lufa/lufa.c **** 
 673:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 674:tmk_core/protocol/lufa/lufa.c **** 
 675:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {.report_id = REPORT_ID_SYSTEM, .usage = data - SYSTEM_POWER_DOWN + 1};
 676:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 677:tmk_core/protocol/lufa/lufa.c **** 
 678:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 679:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 680:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 681:tmk_core/protocol/lufa/lufa.c **** 
 682:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 683:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 684:tmk_core/protocol/lufa/lufa.c **** #endif
 685:tmk_core/protocol/lufa/lufa.c **** }
 686:tmk_core/protocol/lufa/lufa.c **** 
 687:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 688:tmk_core/protocol/lufa/lufa.c ****  *
 689:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 690:tmk_core/protocol/lufa/lufa.c ****  */
 691:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data) {
 692:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 693:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 694:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 695:tmk_core/protocol/lufa/lufa.c **** 
 696:tmk_core/protocol/lufa/lufa.c **** #    ifdef BLUETOOTH_ENABLE
 697:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 698:tmk_core/protocol/lufa/lufa.c **** #        ifdef MODULE_ADAFRUIT_BLE
 699:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 700:tmk_core/protocol/lufa/lufa.c **** #        elif MODULE_RN42
 701:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 702:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 703:tmk_core/protocol/lufa/lufa.c ****         last_data       = data;
 704:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 705:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 706:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 707:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 708:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap & 0xFF);
 709:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap >> 8) & 0xFF);
 710:tmk_core/protocol/lufa/lufa.c **** #        else
 711:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 712:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 713:tmk_core/protocol/lufa/lufa.c ****         last_data       = data;
 714:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 715:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 716:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 717:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 718:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap >> 8) & 0xFF);
 719:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap & 0xFF);
 720:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 721:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 722:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 723:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 724:tmk_core/protocol/lufa/lufa.c **** #        endif
 725:tmk_core/protocol/lufa/lufa.c ****     }
 726:tmk_core/protocol/lufa/lufa.c **** #    endif
 727:tmk_core/protocol/lufa/lufa.c **** 
 728:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 729:tmk_core/protocol/lufa/lufa.c ****         return;
 730:tmk_core/protocol/lufa/lufa.c ****     }
 731:tmk_core/protocol/lufa/lufa.c **** 
 732:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {.report_id = REPORT_ID_CONSUMER, .usage = data};
 733:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 734:tmk_core/protocol/lufa/lufa.c **** 
 735:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 736:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 738:tmk_core/protocol/lufa/lufa.c **** 
 739:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 741:tmk_core/protocol/lufa/lufa.c **** #endif
 742:tmk_core/protocol/lufa/lufa.c **** }
 743:tmk_core/protocol/lufa/lufa.c **** 
 744:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 745:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 746:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 747:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 748:tmk_core/protocol/lufa/lufa.c **** #    define SEND_TIMEOUT 5
 749:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 750:tmk_core/protocol/lufa/lufa.c ****  *
 751:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 752:tmk_core/protocol/lufa/lufa.c ****  */
 753:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c) {
  32               		.loc 1 753 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	.LBB205:
 754:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 755:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 756:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 757:tmk_core/protocol/lufa/lufa.c **** 
 758:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 759:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 760:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
  40               		.loc 1 760 0
  41 0000 9FB7      		in r25,__SREG__
  42               	.LVL1:
  43               	.LBB206:
  44               	.LBB207:
  45               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  46               		.loc 2 50 0
  47               	/* #APP */
  48               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  49 0002 F894      		cli
  50               	 ;  0 "" 2
  51               	.LVL2:
  52               	/* #NOAPP */
  53               	.LBE207:
  54               	.LBE206:
  55               		.loc 1 760 0
  56 0004 1092 0000 		sts console_flush,__zero_reg__
  57               	.LVL3:
  58               	.LBB208:
  59               	.LBB209:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  60               		.loc 2 70 0
  61 0008 9FBF      		out __SREG__,r25
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  62               		.loc 2 71 0
  63               	.LVL4:
  64               	.LBE209:
  65               	.LBE208:
  66               	.LBE205:
 761:tmk_core/protocol/lufa/lufa.c **** 
 762:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return -1;
  67               		.loc 1 762 0
  68 000a 9091 0000 		lds r25,USB_DeviceState
  69 000e 9430      		cpi r25,lo8(4)
  70 0010 01F0      		breq .+2
  71 0012 00C0      		rjmp .L14
  72               	.LBB210:
  73               	.LBB211:
  74               		.file 3 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2019.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2019  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  75               		.loc 3 253 0
  76 0014 9091 E900 		lds r25,233
  77 0018 9F70      		andi r25,lo8(15)
  78               	.LBB212:
  79               	.LBB213:
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  80               		.loc 3 240 0
  81 001a 3091 EC00 		lds r19,236
  82 001e 232F      		mov r18,r19
  83 0020 2170      		andi r18,lo8(1)
  84 0022 30FD      		sbrc r19,0
  85 0024 20E8      		ldi r18,lo8(-128)
  86               	.L4:
  87               	.LBE213:
  88               	.LBE212:
  89               		.loc 3 253 0
  90 0026 922B      		or r25,r18
  91               	.LVL5:
  92               	.LBE211:
  93               	.LBE210:
  94               	.LBB214:
  95               	.LBB215:
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  96               		.loc 3 270 0
  97 0028 23E0      		ldi r18,lo8(3)
  98 002a 2093 E900 		sts 233,r18
  99               	.LVL6:
 100               	.LBE215:
 101               	.LBE214:
 102               	.LBB216:
 103               	.LBB217:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 104               		.loc 3 313 0
 105 002e 2091 EB00 		lds r18,235
 106               	.LBE217:
 107               	.LBE216:
 763:tmk_core/protocol/lufa/lufa.c **** 
 764:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 765:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 766:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 108               		.loc 1 766 0
 109 0032 20FF      		sbrs r18,0
 110 0034 00C0      		rjmp .L9
 111               	.LBB218:
 112               	.LBB219:
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 113               		.loc 3 370 0
 114 0036 2091 EE00 		lds r18,238
 115               	.LBE219:
 116               	.LBE218:
 117               		.loc 1 766 0
 118 003a 27FF      		sbrs r18,7
 119 003c 00C0      		rjmp .L9
 767:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 768:tmk_core/protocol/lufa/lufa.c ****     }
 769:tmk_core/protocol/lufa/lufa.c **** 
 770:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 120               		.loc 1 770 0
 121 003e 2091 0000 		lds r18,timeouted.6085
 122 0042 2223      		tst r18
 123 0044 01F0      		breq .L6
 124               	.LBB220:
 125               	.LBB221:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 126               		.loc 3 360 0
 127 0046 2091 E800 		lds r18,232
 128               	.LBE221:
 129               	.LBE220:
 130               		.loc 1 770 0
 131 004a 25FF      		sbrs r18,5
 132 004c 00C0      		rjmp .L9
 133               	.L6:
 771:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 772:tmk_core/protocol/lufa/lufa.c ****     }
 773:tmk_core/protocol/lufa/lufa.c **** 
 774:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 134               		.loc 1 774 0
 135 004e 1092 0000 		sts timeouted.6085,__zero_reg__
 136               	.LVL7:
 775:tmk_core/protocol/lufa/lufa.c **** 
 776:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 777:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 137               		.loc 1 777 0
 138 0052 26E0      		ldi r18,lo8(6)
 139               	.LVL8:
 140               	.L7:
 141               	.LBB222:
 142               	.LBB223:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 143               		.loc 3 360 0
 144 0054 3091 E800 		lds r19,232
 145               	.LBE223:
 146               	.LBE222:
 147               		.loc 1 777 0
 148 0058 35FD      		sbrc r19,5
 149 005a 00C0      		rjmp .L28
 778:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 150               		.loc 1 778 0
 151 005c 3091 0000 		lds r19,USB_DeviceState
 152 0060 3430      		cpi r19,lo8(4)
 153 0062 01F4      		brne .L9
 154               	.LBB224:
 155               	.LBB225:
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 156               		.loc 3 513 0
 157 0064 3091 EB00 		lds r19,235
 158               	.LBE225:
 159               	.LBE224:
 779:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 780:tmk_core/protocol/lufa/lufa.c ****         }
 781:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 160               		.loc 1 781 0
 161 0068 35FD      		sbrc r19,5
 162 006a 00C0      		rjmp .L9
 163               	.LVL9:
 164 006c 2150      		subi r18,lo8(-(-1))
 165               	.LVL10:
 782:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 783:tmk_core/protocol/lufa/lufa.c ****         }
 784:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 166               		.loc 1 784 0
 167 006e 01F4      		brne .L8
 785:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 168               		.loc 1 785 0
 169 0070 81E0      		ldi r24,lo8(1)
 170               	.LVL11:
 171 0072 8093 0000 		sts timeouted.6085,r24
 786:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 172               		.loc 1 786 0
 173 0076 00C0      		rjmp .L9
 174               	.LVL12:
 175               	.L8:
 176               	.LBB226:
 177               	.LBB227:
 178               		.file 4 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 179               		.loc 4 187 0
 180 0078 EFE9      		ldi r30,lo8(3999)
 181 007a FFE0      		ldi r31,hi8(3999)
 182 007c 3197      	1:	sbiw r30,1
 183 007e 01F4      		brne 1b
 184 0080 00C0      		rjmp .
 185 0082 0000      		nop
 186 0084 00C0      		rjmp .L7
 187               	.LVL13:
 188               	.L28:
 189               	.LBE227:
 190               	.LBE226:
 191               	.LBB228:
 192               	.LBB229:
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 193               		.loc 3 554 0
 194 0086 8093 F100 		sts 241,r24
 195               	.LVL14:
 196               	.LBE229:
 197               	.LBE228:
 198               	.LBB230:
 199               	.LBB231:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 200               		.loc 3 360 0
 201 008a 8091 E800 		lds r24,232
 202               	.LVL15:
 203               	.LBE231:
 204               	.LBE230:
 787:tmk_core/protocol/lufa/lufa.c ****         }
 788:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 789:tmk_core/protocol/lufa/lufa.c ****     }
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 792:tmk_core/protocol/lufa/lufa.c **** 
 793:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 794:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 205               		.loc 1 794 0
 206 008e 85FD      		sbrc r24,5
 207 0090 00C0      		rjmp .L11
 208               	.L12:
 209               	.LBB232:
 210               	.LBB233:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 211               		.loc 3 407 0 discriminator 1
 212 0092 8091 E800 		lds r24,232
 213               	.LBE233:
 214               	.LBE232:
 795:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()))
 215               		.loc 1 795 0 discriminator 1
 216 0096 80FF      		sbrs r24,0
 217 0098 00C0      		rjmp .L12
 218               	.LBB234:
 219               	.LBB235:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 220               		.loc 3 456 0
 221 009a 8091 E800 		lds r24,232
 222 009e 8E77      		andi r24,lo8(126)
 223 00a0 8093 E800 		sts 232,r24
 224               	.LVL16:
 225 00a4 00C0      		rjmp .L13
 226               	.LVL17:
 227               	.L11:
 228               	.LBE235:
 229               	.LBE234:
 230               	.LBB236:
 796:tmk_core/protocol/lufa/lufa.c ****             ;
 797:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 798:tmk_core/protocol/lufa/lufa.c ****     } else {
 799:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 231               		.loc 1 799 0
 232 00a6 8FB7      		in r24,__SREG__
 233               	.LVL18:
 234               	.LBB237:
 235               	.LBB238:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 236               		.loc 2 50 0
 237               	/* #APP */
 238               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 239 00a8 F894      		cli
 240               	 ;  0 "" 2
 241               	.LVL19:
 242               	/* #NOAPP */
 243               	.LBE238:
 244               	.LBE237:
 245               		.loc 1 799 0
 246 00aa 21E0      		ldi r18,lo8(1)
 247               	.LVL20:
 248 00ac 2093 0000 		sts console_flush,r18
 249               	.LVL21:
 250               	.LBB239:
 251               	.LBB240:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 252               		.loc 2 70 0
 253 00b0 8FBF      		out __SREG__,r24
 254               		.loc 2 71 0
 255               	.LVL22:
 256               	.L13:
 257               	.LBE240:
 258               	.LBE239:
 259               	.LBE236:
 260               	.LBB241:
 261               	.LBB242:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 262               		.loc 3 270 0
 263 00b2 9F70      		andi r25,lo8(15)
 264               	.LVL23:
 265 00b4 9093 E900 		sts 233,r25
 266               	.LBE242:
 267               	.LBE241:
 800:tmk_core/protocol/lufa/lufa.c ****     }
 801:tmk_core/protocol/lufa/lufa.c **** 
 802:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 803:tmk_core/protocol/lufa/lufa.c ****     return 0;
 268               		.loc 1 803 0
 269 00b8 80E0      		ldi r24,0
 270 00ba 0895      		ret
 271               	.LVL24:
 272               	.L9:
 273               	.LBB243:
 274               	.LBB244:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 275               		.loc 3 270 0
 276 00bc 9F70      		andi r25,lo8(15)
 277               	.LVL25:
 278 00be 9093 E900 		sts 233,r25
 279               	.L14:
 280               	.LBE244:
 281               	.LBE243:
 762:tmk_core/protocol/lufa/lufa.c **** 
 282               		.loc 1 762 0
 283 00c2 8FEF      		ldi r24,lo8(-1)
 804:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 805:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 806:tmk_core/protocol/lufa/lufa.c ****     return -1;
 807:tmk_core/protocol/lufa/lufa.c **** }
 284               		.loc 1 807 0
 285 00c4 0895      		ret
 286               		.cfi_endproc
 287               	.LFE131:
 289               		.section	.text.send_consumer,"ax",@progbits
 291               	send_consumer:
 292               	.LFB130:
 691:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 293               		.loc 1 691 0
 294               		.cfi_startproc
 295               	.LVL26:
 296 0000 0F93      		push r16
 297               	.LCFI0:
 298               		.cfi_def_cfa_offset 3
 299               		.cfi_offset 16, -2
 300 0002 1F93      		push r17
 301               	.LCFI1:
 302               		.cfi_def_cfa_offset 4
 303               		.cfi_offset 17, -3
 304 0004 CF93      		push r28
 305               	.LCFI2:
 306               		.cfi_def_cfa_offset 5
 307               		.cfi_offset 28, -4
 308 0006 DF93      		push r29
 309               	.LCFI3:
 310               		.cfi_def_cfa_offset 6
 311               		.cfi_offset 29, -5
 312 0008 00D0      		rcall .
 313 000a 1F92      		push __zero_reg__
 314               	.LCFI4:
 315               		.cfi_def_cfa_offset 9
 316 000c CDB7      		in r28,__SP_L__
 317 000e DEB7      		in r29,__SP_H__
 318               	.LCFI5:
 319               		.cfi_def_cfa_register 28
 320               	/* prologue: function */
 321               	/* frame size = 3 */
 322               	/* stack size = 7 */
 323               	.L__stack_usage = 7
 324 0010 8C01      		movw r16,r24
 325               	.LVL27:
 694:tmk_core/protocol/lufa/lufa.c **** 
 326               		.loc 1 694 0
 327 0012 0E94 0000 		call where_to_send
 328               	.LVL28:
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 329               		.loc 1 728 0
 330 0016 8230      		cpi r24,lo8(2)
 331 0018 01F0      		breq .L30
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 332               		.loc 1 728 0 is_stmt 0 discriminator 1
 333 001a 8430      		cpi r24,lo8(4)
 334 001c 01F4      		brne .L29
 335               	.L30:
 732:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 336               		.loc 1 732 0 is_stmt 1
 337 001e 84E0      		ldi r24,lo8(4)
 338               	.LVL29:
 339 0020 8983      		std Y+1,r24
 340 0022 1B83      		std Y+3,r17
 341 0024 0A83      		std Y+2,r16
 342               	.LVL30:
 343               	.LBB245:
 344               	.LBB246:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 345               		.loc 3 270 0
 346 0026 82E0      		ldi r24,lo8(2)
 347 0028 8093 E900 		sts 233,r24
 348               	.LVL31:
 349 002c 8FEF      		ldi r24,lo8(-1)
 350               	.LVL32:
 351               	.L32:
 352               	.LBE246:
 353               	.LBE245:
 354               	.LBB247:
 355               	.LBB248:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356               		.loc 3 360 0
 357 002e 9091 E800 		lds r25,232
 358 0032 8150      		subi r24,lo8(-(-1))
 359               	.LVL33:
 360               	.LBE248:
 361               	.LBE247:
 736:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 362               		.loc 1 736 0
 363 0034 95FD      		sbrc r25,5
 364 0036 00C0      		rjmp .L33
 365               	.LVL34:
 366               	.LBB249:
 367               	.LBB250:
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 368               		.loc 4 276 0
 369 0038 95ED      		ldi r25,lo8(-43)
 370 003a 9A95      	1:	dec r25
 371 003c 01F4      		brne 1b
 372 003e 0000      		nop
 373               	.LVL35:
 374               	.LBE250:
 375               	.LBE249:
 736:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 376               		.loc 1 736 0
 377 0040 8111      		cpse r24,__zero_reg__
 378 0042 00C0      		rjmp .L32
 379               	.LVL36:
 380               	.L33:
 381               	.LBB251:
 382               	.LBB252:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 383               		.loc 3 360 0
 384 0044 8091 E800 		lds r24,232
 385               	.LBE252:
 386               	.LBE251:
 737:tmk_core/protocol/lufa/lufa.c **** 
 387               		.loc 1 737 0
 388 0048 85FF      		sbrs r24,5
 389 004a 00C0      		rjmp .L29
 739:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 390               		.loc 1 739 0
 391 004c 40E0      		ldi r20,0
 392 004e 50E0      		ldi r21,0
 393 0050 63E0      		ldi r22,lo8(3)
 394 0052 70E0      		ldi r23,0
 395 0054 CE01      		movw r24,r28
 396 0056 0196      		adiw r24,1
 397 0058 0E94 0000 		call Endpoint_Write_Stream_LE
 398               	.LVL37:
 399               	.LBB253:
 400               	.LBB254:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 401               		.loc 3 456 0
 402 005c 8091 E800 		lds r24,232
 403 0060 8E77      		andi r24,lo8(126)
 404 0062 8093 E800 		sts 232,r24
 405               	.LVL38:
 406               	.L29:
 407               	/* epilogue start */
 408               	.LBE254:
 409               	.LBE253:
 742:tmk_core/protocol/lufa/lufa.c **** 
 410               		.loc 1 742 0
 411 0066 0F90      		pop __tmp_reg__
 412 0068 0F90      		pop __tmp_reg__
 413 006a 0F90      		pop __tmp_reg__
 414 006c DF91      		pop r29
 415 006e CF91      		pop r28
 416 0070 1F91      		pop r17
 417 0072 0F91      		pop r16
 418               	.LVL39:
 419 0074 0895      		ret
 420               		.cfi_endproc
 421               	.LFE130:
 423               		.section	.text.send_system,"ax",@progbits
 425               	send_system:
 426               	.LFB129:
 669:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 427               		.loc 1 669 0
 428               		.cfi_startproc
 429               	.LVL40:
 430 0000 CF93      		push r28
 431               	.LCFI6:
 432               		.cfi_def_cfa_offset 3
 433               		.cfi_offset 28, -2
 434 0002 DF93      		push r29
 435               	.LCFI7:
 436               		.cfi_def_cfa_offset 4
 437               		.cfi_offset 29, -3
 438 0004 00D0      		rcall .
 439 0006 1F92      		push __zero_reg__
 440               	.LCFI8:
 441               		.cfi_def_cfa_offset 7
 442 0008 CDB7      		in r28,__SP_L__
 443 000a DEB7      		in r29,__SP_H__
 444               	.LCFI9:
 445               		.cfi_def_cfa_register 28
 446               	/* prologue: function */
 447               	/* frame size = 3 */
 448               	/* stack size = 5 */
 449               	.L__stack_usage = 5
 450               	.LVL41:
 673:tmk_core/protocol/lufa/lufa.c **** 
 451               		.loc 1 673 0
 452 000c 2091 0000 		lds r18,USB_DeviceState
 453 0010 2430      		cpi r18,lo8(4)
 454 0012 01F4      		brne .L45
 675:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 455               		.loc 1 675 0
 456 0014 23E0      		ldi r18,lo8(3)
 457 0016 2983      		std Y+1,r18
 458 0018 8058      		subi r24,-128
 459 001a 9109      		sbc r25,__zero_reg__
 460               	.LVL42:
 461 001c 9B83      		std Y+3,r25
 462 001e 8A83      		std Y+2,r24
 463               	.LVL43:
 464               	.LBB255:
 465               	.LBB256:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 466               		.loc 3 270 0
 467 0020 82E0      		ldi r24,lo8(2)
 468               	.LVL44:
 469 0022 8093 E900 		sts 233,r24
 470               	.LVL45:
 471 0026 8FEF      		ldi r24,lo8(-1)
 472               	.LVL46:
 473               	.L47:
 474               	.LBE256:
 475               	.LBE255:
 476               	.LBB257:
 477               	.LBB258:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 478               		.loc 3 360 0
 479 0028 9091 E800 		lds r25,232
 480 002c 8150      		subi r24,lo8(-(-1))
 481               	.LVL47:
 482               	.LBE258:
 483               	.LBE257:
 679:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 484               		.loc 1 679 0
 485 002e 95FD      		sbrc r25,5
 486 0030 00C0      		rjmp .L48
 487               	.LVL48:
 488               	.LBB259:
 489               	.LBB260:
 490               		.loc 4 276 0
 491 0032 95ED      		ldi r25,lo8(-43)
 492 0034 9A95      	1:	dec r25
 493 0036 01F4      		brne 1b
 494 0038 0000      		nop
 495               	.LVL49:
 496               	.LBE260:
 497               	.LBE259:
 679:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 498               		.loc 1 679 0
 499 003a 8111      		cpse r24,__zero_reg__
 500 003c 00C0      		rjmp .L47
 501               	.LVL50:
 502               	.L48:
 503               	.LBB261:
 504               	.LBB262:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 505               		.loc 3 360 0
 506 003e 8091 E800 		lds r24,232
 507               	.LBE262:
 508               	.LBE261:
 680:tmk_core/protocol/lufa/lufa.c **** 
 509               		.loc 1 680 0
 510 0042 85FF      		sbrs r24,5
 511 0044 00C0      		rjmp .L45
 682:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 512               		.loc 1 682 0
 513 0046 40E0      		ldi r20,0
 514 0048 50E0      		ldi r21,0
 515 004a 63E0      		ldi r22,lo8(3)
 516 004c 70E0      		ldi r23,0
 517 004e CE01      		movw r24,r28
 518 0050 0196      		adiw r24,1
 519 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 520               	.LVL51:
 521               	.LBB263:
 522               	.LBB264:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 523               		.loc 3 456 0
 524 0056 8091 E800 		lds r24,232
 525 005a 8E77      		andi r24,lo8(126)
 526 005c 8093 E800 		sts 232,r24
 527               	.LVL52:
 528               	.L45:
 529               	/* epilogue start */
 530               	.LBE264:
 531               	.LBE263:
 685:tmk_core/protocol/lufa/lufa.c **** 
 532               		.loc 1 685 0
 533 0060 0F90      		pop __tmp_reg__
 534 0062 0F90      		pop __tmp_reg__
 535 0064 0F90      		pop __tmp_reg__
 536 0066 DF91      		pop r29
 537 0068 CF91      		pop r28
 538 006a 0895      		ret
 539               		.cfi_endproc
 540               	.LFE129:
 542               		.section	.text.send_mouse,"ax",@progbits
 544               	send_mouse:
 545               	.LFB128:
 622:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 546               		.loc 1 622 0
 547               		.cfi_startproc
 548               	.LVL53:
 549 0000 CF93      		push r28
 550               	.LCFI10:
 551               		.cfi_def_cfa_offset 3
 552               		.cfi_offset 28, -2
 553 0002 DF93      		push r29
 554               	.LCFI11:
 555               		.cfi_def_cfa_offset 4
 556               		.cfi_offset 29, -3
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 2 */
 560               	.L__stack_usage = 2
 561 0004 EC01      		movw r28,r24
 562               	.LVL54:
 625:tmk_core/protocol/lufa/lufa.c **** 
 563               		.loc 1 625 0
 564 0006 0E94 0000 		call where_to_send
 565               	.LVL55:
 646:tmk_core/protocol/lufa/lufa.c ****         return;
 566               		.loc 1 646 0
 567 000a 8230      		cpi r24,lo8(2)
 568 000c 01F0      		breq .L58
 646:tmk_core/protocol/lufa/lufa.c ****         return;
 569               		.loc 1 646 0 is_stmt 0 discriminator 1
 570 000e 8430      		cpi r24,lo8(4)
 571 0010 01F4      		brne .L57
 572               	.L58:
 573               	.LVL56:
 574               	.LBB265:
 575               	.LBB266:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 576               		.loc 3 270 0 is_stmt 1
 577 0012 82E0      		ldi r24,lo8(2)
 578               	.LVL57:
 579 0014 8093 E900 		sts 233,r24
 580               	.LVL58:
 581 0018 8FEF      		ldi r24,lo8(-1)
 582               	.LVL59:
 583               	.L60:
 584               	.LBE266:
 585               	.LBE265:
 586               	.LBB267:
 587               	.LBB268:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 588               		.loc 3 360 0
 589 001a 9091 E800 		lds r25,232
 590 001e 8150      		subi r24,lo8(-(-1))
 591               	.LVL60:
 592               	.LBE268:
 593               	.LBE267:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 594               		.loc 1 654 0
 595 0020 95FD      		sbrc r25,5
 596 0022 00C0      		rjmp .L61
 597               	.LVL61:
 598               	.LBB269:
 599               	.LBB270:
 600               		.loc 4 276 0
 601 0024 95ED      		ldi r25,lo8(-43)
 602 0026 9A95      	1:	dec r25
 603 0028 01F4      		brne 1b
 604 002a 0000      		nop
 605               	.LVL62:
 606               	.LBE270:
 607               	.LBE269:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 608               		.loc 1 654 0
 609 002c 8111      		cpse r24,__zero_reg__
 610 002e 00C0      		rjmp .L60
 611               	.LVL63:
 612               	.L61:
 613               	.LBB271:
 614               	.LBB272:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 615               		.loc 3 360 0
 616 0030 8091 E800 		lds r24,232
 617               	.LBE272:
 618               	.LBE271:
 655:tmk_core/protocol/lufa/lufa.c **** 
 619               		.loc 1 655 0
 620 0034 85FF      		sbrs r24,5
 621 0036 00C0      		rjmp .L57
 658:tmk_core/protocol/lufa/lufa.c **** 
 622               		.loc 1 658 0
 623 0038 40E0      		ldi r20,0
 624 003a 50E0      		ldi r21,0
 625 003c 66E0      		ldi r22,lo8(6)
 626 003e 70E0      		ldi r23,0
 627 0040 CE01      		movw r24,r28
 628 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 629               	.LVL64:
 630               	.LBB273:
 631               	.LBB274:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 632               		.loc 3 456 0
 633 0046 8091 E800 		lds r24,232
 634 004a 8E77      		andi r24,lo8(126)
 635 004c 8093 E800 		sts 232,r24
 636               	.LVL65:
 637               	.L57:
 638               	/* epilogue start */
 639               	.LBE274:
 640               	.LBE273:
 663:tmk_core/protocol/lufa/lufa.c **** 
 641               		.loc 1 663 0
 642 0050 DF91      		pop r29
 643 0052 CF91      		pop r28
 644               	.LVL66:
 645 0054 0895      		ret
 646               		.cfi_endproc
 647               	.LFE128:
 649               		.section	.text.send_keyboard,"ax",@progbits
 651               	send_keyboard:
 652               	.LFB127:
 559:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 653               		.loc 1 559 0
 654               		.cfi_startproc
 655               	.LVL67:
 656 0000 CF93      		push r28
 657               	.LCFI12:
 658               		.cfi_def_cfa_offset 3
 659               		.cfi_offset 28, -2
 660 0002 DF93      		push r29
 661               	.LCFI13:
 662               		.cfi_def_cfa_offset 4
 663               		.cfi_offset 29, -3
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 2 */
 667               	.L__stack_usage = 2
 668 0004 EC01      		movw r28,r24
 669               	.LVL68:
 561:tmk_core/protocol/lufa/lufa.c **** 
 670               		.loc 1 561 0
 671 0006 0E94 0000 		call where_to_send
 672               	.LVL69:
 587:tmk_core/protocol/lufa/lufa.c ****         return;
 673               		.loc 1 587 0
 674 000a 8230      		cpi r24,lo8(2)
 675 000c 01F0      		breq .L77
 587:tmk_core/protocol/lufa/lufa.c ****         return;
 676               		.loc 1 587 0 is_stmt 0 discriminator 1
 677 000e 8430      		cpi r24,lo8(4)
 678 0010 01F4      		brne .L76
 679               	.L77:
 680               	.LVL70:
 681               	.LBB275:
 682               	.LBB276:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 683               		.loc 3 270 0 is_stmt 1
 684 0012 81E0      		ldi r24,lo8(1)
 685               	.LVL71:
 686 0014 8093 E900 		sts 233,r24
 687               	.LVL72:
 688 0018 8FEF      		ldi r24,lo8(-1)
 689               	.LVL73:
 690               	.L79:
 691               	.LBE276:
 692               	.LBE275:
 693               	.LBB277:
 694               	.LBB278:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 695               		.loc 3 360 0
 696 001a 9091 E800 		lds r25,232
 697 001e 8150      		subi r24,lo8(-(-1))
 698               	.LVL74:
 699               	.LBE278:
 700               	.LBE277:
 602:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 701               		.loc 1 602 0
 702 0020 95FD      		sbrc r25,5
 703 0022 00C0      		rjmp .L80
 704               	.LVL75:
 705               	.LBB279:
 706               	.LBB280:
 707               		.loc 4 276 0
 708 0024 95ED      		ldi r25,lo8(-43)
 709 0026 9A95      	1:	dec r25
 710 0028 01F4      		brne 1b
 711 002a 0000      		nop
 712               	.LVL76:
 713               	.LBE280:
 714               	.LBE279:
 602:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 715               		.loc 1 602 0
 716 002c 8111      		cpse r24,__zero_reg__
 717 002e 00C0      		rjmp .L79
 718               	.LVL77:
 719               	.L80:
 720               	.LBB281:
 721               	.LBB282:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 722               		.loc 3 360 0
 723 0030 8091 E800 		lds r24,232
 724               	.LBE282:
 725               	.LBE281:
 603:tmk_core/protocol/lufa/lufa.c **** 
 726               		.loc 1 603 0
 727 0034 85FF      		sbrs r24,5
 728 0036 00C0      		rjmp .L76
 607:tmk_core/protocol/lufa/lufa.c ****     } else {
 729               		.loc 1 607 0
 730 0038 40E0      		ldi r20,0
 731 003a 50E0      		ldi r21,0
 732 003c 68E0      		ldi r22,lo8(8)
 733 003e 70E0      		ldi r23,0
 609:tmk_core/protocol/lufa/lufa.c ****     }
 734               		.loc 1 609 0
 735 0040 CE01      		movw r24,r28
 736 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 737               	.LVL78:
 738               	.LBB283:
 739               	.LBB284:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 740               		.loc 3 456 0
 741 0046 8091 E800 		lds r24,232
 742 004a 8E77      		andi r24,lo8(126)
 743 004c 8093 E800 		sts 232,r24
 744               	.LBE284:
 745               	.LBE283:
 615:tmk_core/protocol/lufa/lufa.c **** }
 746               		.loc 1 615 0
 747 0050 88E0      		ldi r24,lo8(8)
 748 0052 FE01      		movw r30,r28
 749 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 750 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 751               		0:
 752 0058 0190      		ld r0,Z+
 753 005a 0D92      		st X+,r0
 754 005c 8A95      		dec r24
 755 005e 01F4      		brne 0b
 756               	.LVL79:
 757               	.L76:
 758               	/* epilogue start */
 616:tmk_core/protocol/lufa/lufa.c **** 
 759               		.loc 1 616 0
 760 0060 DF91      		pop r29
 761 0062 CF91      		pop r28
 762               	.LVL80:
 763 0064 0895      		ret
 764               		.cfi_endproc
 765               	.LFE127:
 767               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 768               	.global	EVENT_USB_Device_Connect
 770               	EVENT_USB_Device_Connect:
 771               	.LFB118:
 285:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 772               		.loc 1 285 0
 773               		.cfi_startproc
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 0 */
 777               	.L__stack_usage = 0
 286:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 778               		.loc 1 286 0
 779 0000 80E0      		ldi r24,lo8(__c.5988)
 780 0002 90E0      		ldi r25,hi8(__c.5988)
 781 0004 0E94 0000 		call xputs
 782               	.LVL81:
 288:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 783               		.loc 1 288 0
 784 0008 8091 0000 		lds r24,USB_IsInitialized
 785 000c 8111      		cpse r24,__zero_reg__
 786 000e 00C0      		rjmp .L97
 289:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 787               		.loc 1 289 0
 788 0010 0E94 0000 		call USB_Disable
 789               	.LVL82:
 290:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 790               		.loc 1 290 0
 791 0014 0E94 0000 		call USB_Init
 792               	.LVL83:
 793               	.LBB285:
 794               	.LBB286:
 795               	.LBB287:
 796               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2019.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2019  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 797               		.loc 5 113 0
 798 0018 8091 E200 		lds r24,226
 799 001c 8460      		ori r24,lo8(4)
 800 001e 8093 E200 		sts 226,r24
 801               	.LVL84:
 802               	.L97:
 803 0022 0895      		ret
 804               	.LBE287:
 805               	.LBE286:
 806               	.LBE285:
 807               		.cfi_endproc
 808               	.LFE118:
 810               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 811               	.global	EVENT_USB_Device_Disconnect
 813               	EVENT_USB_Device_Disconnect:
 814               	.LFB119:
 299:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 815               		.loc 1 299 0
 816               		.cfi_startproc
 817               	/* prologue: function */
 818               	/* frame size = 0 */
 819               	/* stack size = 0 */
 820               	.L__stack_usage = 0
 300:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 821               		.loc 1 300 0
 822 0000 80E0      		ldi r24,lo8(__c.5993)
 823 0002 90E0      		ldi r25,hi8(__c.5993)
 824 0004 0E94 0000 		call xputs
 825               	.LVL85:
 302:tmk_core/protocol/lufa/lufa.c ****     /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 826               		.loc 1 302 0
 827 0008 1092 0000 		sts USB_IsInitialized,__zero_reg__
 828 000c 0895      		ret
 829               		.cfi_endproc
 830               	.LFE119:
 832               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 833               	.global	EVENT_USB_Device_Reset
 835               	EVENT_USB_Device_Reset:
 836               	.LFB120:
 316:tmk_core/protocol/lufa/lufa.c **** 
 837               		.loc 1 316 0
 838               		.cfi_startproc
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 0 */
 842               	.L__stack_usage = 0
 316:tmk_core/protocol/lufa/lufa.c **** 
 843               		.loc 1 316 0
 844 0000 80E0      		ldi r24,lo8(__c.5998)
 845 0002 90E0      		ldi r25,hi8(__c.5998)
 846 0004 0C94 0000 		jmp xputs
 847               	.LVL86:
 848               		.cfi_endproc
 849               	.LFE120:
 851               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 852               	.global	EVENT_USB_Device_Suspend
 854               	EVENT_USB_Device_Suspend:
 855               	.LFB121:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 856               		.loc 1 322 0
 857               		.cfi_startproc
 858               	/* prologue: function */
 859               	/* frame size = 0 */
 860               	/* stack size = 0 */
 861               	.L__stack_usage = 0
 323:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 862               		.loc 1 323 0
 863 0000 80E0      		ldi r24,lo8(__c.6002)
 864 0002 90E0      		ldi r25,hi8(__c.6002)
 865 0004 0C94 0000 		jmp xputs
 866               	.LVL87:
 867               		.cfi_endproc
 868               	.LFE121:
 870               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 871               	.global	EVENT_USB_Device_WakeUp
 873               	EVENT_USB_Device_WakeUp:
 874               	.LFB122:
 333:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 875               		.loc 1 333 0
 876               		.cfi_startproc
 877               	/* prologue: function */
 878               	/* frame size = 0 */
 879               	/* stack size = 0 */
 880               	.L__stack_usage = 0
 334:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 881               		.loc 1 334 0
 882 0000 80E0      		ldi r24,lo8(__c.6006)
 883 0002 90E0      		ldi r25,hi8(__c.6006)
 884 0004 0E94 0000 		call xputs
 885               	.LVL88:
 335:tmk_core/protocol/lufa/lufa.c **** 
 886               		.loc 1 335 0
 887 0008 0C94 0000 		jmp suspend_wakeup_init
 888               	.LVL89:
 889               		.cfi_endproc
 890               	.LFE122:
 892               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 893               	.global	EVENT_USB_Device_StartOfFrame
 895               	EVENT_USB_Device_StartOfFrame:
 896               	.LFB123:
 356:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 897               		.loc 1 356 0
 898               		.cfi_startproc
 899               	/* prologue: function */
 900               	/* frame size = 0 */
 901               	/* stack size = 0 */
 902               	.L__stack_usage = 0
 358:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 903               		.loc 1 358 0
 904 0000 2091 0000 		lds r18,count.6012
 905 0004 2F5F      		subi r18,lo8(-(1))
 906 0006 822F      		mov r24,r18
 907 0008 62E3      		ldi r22,lo8(50)
 908 000a 0E94 0000 		call __udivmodqi4
 909 000e 9923      		tst r25
 910 0010 01F0      		breq .L104
 911 0012 2093 0000 		sts count.6012,r18
 912 0016 0895      		ret
 913               	.L104:
 359:tmk_core/protocol/lufa/lufa.c **** 
 914               		.loc 1 359 0
 915 0018 1092 0000 		sts count.6012,__zero_reg__
 361:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 916               		.loc 1 361 0
 917 001c 8091 0000 		lds r24,console_flush
 918 0020 8823      		tst r24
 919 0022 01F0      		breq .L103
 920               	.LBB312:
 921               	.LBB313:
 223:tmk_core/protocol/lufa/lufa.c **** 
 922               		.loc 1 223 0
 923 0024 8091 0000 		lds r24,USB_DeviceState
 924 0028 8430      		cpi r24,lo8(4)
 925 002a 01F4      		brne .L107
 926               	.LBB314:
 927               	.LBB315:
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 928               		.loc 3 253 0
 929 002c 8091 E900 		lds r24,233
 930 0030 8F70      		andi r24,lo8(15)
 931               	.LBB316:
 932               	.LBB317:
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 933               		.loc 3 240 0
 934 0032 2091 EC00 		lds r18,236
 935 0036 922F      		mov r25,r18
 936 0038 9170      		andi r25,lo8(1)
 937 003a 20FD      		sbrc r18,0
 938 003c 90E8      		ldi r25,lo8(-128)
 939               	.L108:
 940               	.LBE317:
 941               	.LBE316:
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 942               		.loc 3 253 0
 943 003e 892B      		or r24,r25
 944               	.LVL90:
 945               	.LBE315:
 946               	.LBE314:
 947               	.LBB318:
 948               	.LBB319:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 949               		.loc 3 270 0
 950 0040 93E0      		ldi r25,lo8(3)
 951 0042 9093 E900 		sts 233,r25
 952               	.LVL91:
 953               	.LBE319:
 954               	.LBE318:
 955               	.LBB320:
 956               	.LBB321:
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 957               		.loc 3 313 0
 958 0046 9091 EB00 		lds r25,235
 959               	.LBE321:
 960               	.LBE320:
 254:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961               		.loc 1 254 0
 962 004a 90FF      		sbrs r25,0
 963 004c 00C0      		rjmp .L112
 964               	.LBB322:
 965               	.LBB323:
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 966               		.loc 3 370 0
 967 004e 9091 EE00 		lds r25,238
 968               	.LBE323:
 969               	.LBE322:
 254:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 970               		.loc 1 254 0
 971 0052 97FF      		sbrs r25,7
 972 0054 00C0      		rjmp .L112
 973               	.L120:
 974               	.LBB324:
 975               	.LBB325:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 976               		.loc 3 360 0
 977 0056 9091 E800 		lds r25,232
 978               	.LBE325:
 979               	.LBE324:
 260:tmk_core/protocol/lufa/lufa.c **** 
 980               		.loc 1 260 0
 981 005a 95FF      		sbrs r25,5
 982 005c 00C0      		rjmp .L124
 983               	.LVL92:
 984               	.LBB326:
 985               	.LBB327:
 986               		.loc 3 554 0
 987 005e 1092 F100 		sts 241,__zero_reg__
 988 0062 00C0      		rjmp .L120
 989               	.LVL93:
 990               	.L124:
 991               	.LBE327:
 992               	.LBE326:
 993               	.LBB328:
 994               	.LBB329:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 995               		.loc 3 407 0
 996 0064 9091 E800 		lds r25,232
 997               	.LBE329:
 998               	.LBE328:
 263:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 999               		.loc 1 263 0
 1000 0068 90FF      		sbrs r25,0
 1001 006a 00C0      		rjmp .L112
 1002               	.LBB330:
 1003               	.LBB331:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1004               		.loc 3 456 0
 1005 006c 9091 E800 		lds r25,232
 1006 0070 9E77      		andi r25,lo8(126)
 1007 0072 9093 E800 		sts 232,r25
 1008               	.L112:
 1009               	.LVL94:
 1010               	.LBE331:
 1011               	.LBE330:
 1012               	.LBB332:
 1013               	.LBB333:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1014               		.loc 3 270 0
 1015 0076 8F70      		andi r24,lo8(15)
 1016               	.LVL95:
 1017 0078 8093 E900 		sts 233,r24
 1018               	.L107:
 1019               	.LBE333:
 1020               	.LBE332:
 1021               	.LBE313:
 1022               	.LBE312:
 363:tmk_core/protocol/lufa/lufa.c **** }
 1023               		.loc 1 363 0
 1024 007c 1092 0000 		sts console_flush,__zero_reg__
 1025               	.L103:
 1026 0080 0895      		ret
 1027               		.cfi_endproc
 1028               	.LFE123:
 1030               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 1031               	.global	EVENT_USB_Device_ConfigurationChanged
 1033               	EVENT_USB_Device_ConfigurationChanged:
 1034               	.LFB124:
 375:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 1035               		.loc 1 375 0
 1036               		.cfi_startproc
 1037               	/* prologue: function */
 1038               	/* frame size = 0 */
 1039               	/* stack size = 0 */
 1040               	.L__stack_usage = 0
 1041               	.LVL96:
 1042               	.LBB334:
 1043               	.LBB335:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 1044               		.loc 3 210 0
 1045 0000 42E0      		ldi r20,lo8(2)
 1046 0002 61EC      		ldi r22,lo8(-63)
 1047 0004 81E0      		ldi r24,lo8(1)
 1048 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1049               	.LVL97:
 1050               	.LBE335:
 1051               	.LBE334:
 1052               	.LBB336:
 1053               	.LBB337:
 1054 000a 42E2      		ldi r20,lo8(34)
 1055 000c 61EC      		ldi r22,lo8(-63)
 1056 000e 82E0      		ldi r24,lo8(2)
 1057 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1058               	.LVL98:
 1059               	.LBE337:
 1060               	.LBE336:
 1061               	.LBB338:
 1062               	.LBB339:
 1063 0014 42E2      		ldi r20,lo8(34)
 1064 0016 61EC      		ldi r22,lo8(-63)
 1065 0018 83E0      		ldi r24,lo8(3)
 1066 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1067               	.LVL99:
 1068               	.LBE339:
 1069               	.LBE338:
 1070               		.cfi_endproc
 1071               	.LFE124:
 1073               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 1074               	.global	EVENT_USB_Device_ControlRequest
 1076               	EVENT_USB_Device_ControlRequest:
 1077               	.LFB125:
 437:tmk_core/protocol/lufa/lufa.c ****     uint8_t *ReportData = NULL;
 1078               		.loc 1 437 0
 1079               		.cfi_startproc
 1080               	/* prologue: function */
 1081               	/* frame size = 0 */
 1082               	/* stack size = 0 */
 1083               	.L__stack_usage = 0
 1084               	.LVL100:
 442:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 1085               		.loc 1 442 0
 1086 0000 8091 0000 		lds r24,USB_ControlRequest+1
 1087 0004 8330      		cpi r24,lo8(3)
 1088 0006 01F4      		brne .+2
 1089 0008 00C0      		rjmp .L128
 1090 000a 00F4      		brsh .L129
 1091 000c 8130      		cpi r24,lo8(1)
 1092 000e 01F0      		breq .L130
 1093 0010 8230      		cpi r24,lo8(2)
 1094 0012 01F4      		brne .+2
 1095 0014 00C0      		rjmp .L131
 1096 0016 0895      		ret
 1097               	.L129:
 1098 0018 8A30      		cpi r24,lo8(10)
 1099 001a 01F4      		brne .+2
 1100 001c 00C0      		rjmp .L132
 1101 001e 8B30      		cpi r24,lo8(11)
 1102 0020 01F4      		brne .+2
 1103 0022 00C0      		rjmp .L133
 1104 0024 8930      		cpi r24,lo8(9)
 1105 0026 01F0      		breq .+2
 1106 0028 00C0      		rjmp .L126
 1107 002a 00C0      		rjmp .L157
 1108               	.L130:
 444:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 1109               		.loc 1 444 0
 1110 002c 8091 0000 		lds r24,USB_ControlRequest
 1111 0030 813A      		cpi r24,lo8(-95)
 1112 0032 01F0      		breq .+2
 1113 0034 00C0      		rjmp .L126
 1114               	.LBB340:
 1115               	.LBB341:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1116               		.loc 3 444 0
 1117 0036 8091 E800 		lds r24,232
 1118 003a 877F      		andi r24,lo8(-9)
 1119 003c 8093 E800 		sts 232,r24
 1120               	.LBE341:
 1121               	.LBE340:
 448:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 1122               		.loc 1 448 0
 1123 0040 8091 0000 		lds r24,USB_ControlRequest+4
 1124 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 1125 0048 892B      		or r24,r25
 1126 004a 01F4      		brne .L154
 452:tmk_core/protocol/lufa/lufa.c ****                         break;
 1127               		.loc 1 452 0
 1128 004c 68E0      		ldi r22,lo8(8)
 451:tmk_core/protocol/lufa/lufa.c ****                         ReportSize = sizeof(keyboard_report_sent);
 1129               		.loc 1 451 0
 1130 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 1131 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 1132 0052 00C0      		rjmp .L136
 1133               	.L154:
 439:tmk_core/protocol/lufa/lufa.c **** 
 1134               		.loc 1 439 0
 1135 0054 60E0      		ldi r22,0
 438:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1136               		.loc 1 438 0
 1137 0056 80E0      		ldi r24,0
 1138 0058 90E0      		ldi r25,0
 1139               	.L136:
 1140               	.LVL101:
 457:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1141               		.loc 1 457 0
 1142 005a 70E0      		ldi r23,0
 1143 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1144               	.LVL102:
 1145               	.LBB342:
 1146               	.LBB343:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1147               		.loc 3 471 0
 1148 0060 8091 E800 		lds r24,232
 1149 0064 8B77      		andi r24,lo8(123)
 1150 0066 8093 E800 		sts 232,r24
 1151 006a 0895      		ret
 1152               	.LVL103:
 1153               	.L157:
 1154               	.LBE343:
 1155               	.LBE342:
 463:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 1156               		.loc 1 463 0
 1157 006c 8091 0000 		lds r24,USB_ControlRequest
 1158 0070 8132      		cpi r24,lo8(33)
 1159 0072 01F0      		breq .+2
 1160 0074 00C0      		rjmp .L126
 465:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 1161               		.loc 1 465 0
 1162 0076 8091 0000 		lds r24,USB_ControlRequest+4
 1163 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 1164 007e 0297      		sbiw r24,2
 1165 0080 00F0      		brlo .+2
 1166 0082 00C0      		rjmp .L126
 1167               	.LBB344:
 1168               	.LBB345:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1169               		.loc 3 444 0
 1170 0084 8091 E800 		lds r24,232
 1171 0088 877F      		andi r24,lo8(-9)
 1172 008a 8093 E800 		sts 232,r24
 1173               	.L140:
 1174               	.LBE345:
 1175               	.LBE344:
 1176               	.LBB346:
 1177               	.LBB347:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1178               		.loc 3 419 0
 1179 008e 8091 E800 		lds r24,232
 1180               	.LBE347:
 1181               	.LBE346:
 472:tmk_core/protocol/lufa/lufa.c ****                             if (USB_DeviceState == DEVICE_STATE_Unattached) return;
 1182               		.loc 1 472 0
 1183 0092 82FD      		sbrc r24,2
 1184 0094 00C0      		rjmp .L158
 473:tmk_core/protocol/lufa/lufa.c ****                         }
 1185               		.loc 1 473 0
 1186 0096 8091 0000 		lds r24,USB_DeviceState
 1187 009a 8111      		cpse r24,__zero_reg__
 1188 009c 00C0      		rjmp .L140
 1189 009e 00C0      		rjmp .L126
 1190               	.L158:
 1191               	.LBB348:
 1192               	.LBB349:
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1193               		.loc 3 229 0
 1194 00a0 8091 F200 		lds r24,242
 1195               	.LBE349:
 1196               	.LBE348:
 476:tmk_core/protocol/lufa/lufa.c ****                             uint8_t report_id = Endpoint_Read_8();
 1197               		.loc 1 476 0
 1198 00a4 8230      		cpi r24,lo8(2)
 1199 00a6 01F4      		brne .L142
 1200               	.LBB350:
 1201               	.LBB351:
 1202               	.LBB352:
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1203               		.loc 3 542 0
 1204 00a8 8091 F100 		lds r24,241
 1205               	.LBE352:
 1206               	.LBE351:
 479:tmk_core/protocol/lufa/lufa.c ****                                 keyboard_led_stats = Endpoint_Read_8();
 1207               		.loc 1 479 0
 1208 00ac 8B7F      		andi r24,lo8(-5)
 1209 00ae 8130      		cpi r24,lo8(1)
 1210 00b0 01F4      		brne .L143
 1211               	.L142:
 1212               	.LBE350:
 1213               	.LBB353:
 1214               	.LBB354:
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1215               		.loc 3 542 0
 1216 00b2 8091 F100 		lds r24,241
 1217               	.LBE354:
 1218               	.LBE353:
 483:tmk_core/protocol/lufa/lufa.c ****                         }
 1219               		.loc 1 483 0
 1220 00b6 8093 0000 		sts keyboard_led_stats,r24
 1221               	.L143:
 1222               	.LBB355:
 1223               	.LBB356:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1224               		.loc 3 471 0
 1225 00ba 8091 E800 		lds r24,232
 1226 00be 8B77      		andi r24,lo8(123)
 1227 00c0 00C0      		rjmp .L155
 1228               	.L128:
 1229               	.LBE356:
 1230               	.LBE355:
 495:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 1231               		.loc 1 495 0
 1232 00c2 8091 0000 		lds r24,USB_ControlRequest
 1233 00c6 813A      		cpi r24,lo8(-95)
 1234 00c8 01F0      		breq .+2
 1235 00ca 00C0      		rjmp .L126
 496:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1236               		.loc 1 496 0
 1237 00cc 8091 0000 		lds r24,USB_ControlRequest+4
 1238 00d0 9091 0000 		lds r25,USB_ControlRequest+4+1
 1239 00d4 892B      		or r24,r25
 1240 00d6 01F0      		breq .+2
 1241 00d8 00C0      		rjmp .L126
 1242               	.LBB357:
 1243               	.LBB358:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1244               		.loc 3 444 0
 1245 00da 8091 E800 		lds r24,232
 1246 00de 877F      		andi r24,lo8(-9)
 1247 00e0 8093 E800 		sts 232,r24
 1248               	.L144:
 1249               	.LBE358:
 1250               	.LBE357:
 1251               	.LBB359:
 1252               	.LBB360:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1253               		.loc 3 407 0 discriminator 1
 1254 00e4 8091 E800 		lds r24,232
 1255               	.LBE360:
 1256               	.LBE359:
 498:tmk_core/protocol/lufa/lufa.c ****                         ;
 1257               		.loc 1 498 0 discriminator 1
 1258 00e8 80FF      		sbrs r24,0
 1259 00ea 00C0      		rjmp .L144
 500:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1260               		.loc 1 500 0
 1261 00ec 8091 0000 		lds r24,keyboard_protocol
 1262               	.LVL104:
 1263 00f0 00C0      		rjmp .L156
 1264               	.LVL105:
 1265               	.L133:
 508:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 1266               		.loc 1 508 0
 1267 00f2 8091 0000 		lds r24,USB_ControlRequest
 1268 00f6 8132      		cpi r24,lo8(33)
 1269 00f8 01F4      		brne .L126
 509:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1270               		.loc 1 509 0
 1271 00fa 8091 0000 		lds r24,USB_ControlRequest+4
 1272 00fe 9091 0000 		lds r25,USB_ControlRequest+4+1
 1273 0102 892B      		or r24,r25
 1274 0104 01F4      		brne .L126
 1275               	.LBB361:
 1276               	.LBB362:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1277               		.loc 3 444 0
 1278 0106 8091 E800 		lds r24,232
 1279 010a 877F      		andi r24,lo8(-9)
 1280 010c 8093 E800 		sts 232,r24
 1281               	.LBE362:
 1282               	.LBE361:
 511:tmk_core/protocol/lufa/lufa.c **** 
 1283               		.loc 1 511 0
 1284 0110 0E94 0000 		call Endpoint_ClearStatusStage
 1285               	.LVL106:
 513:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1286               		.loc 1 513 0
 1287 0114 8091 0000 		lds r24,USB_ControlRequest+2
 1288 0118 8093 0000 		sts keyboard_protocol,r24
 514:tmk_core/protocol/lufa/lufa.c ****                 }
 1289               		.loc 1 514 0
 1290 011c 0C94 0000 		jmp clear_keyboard
 1291               	.LVL107:
 1292               	.L132:
 520:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 1293               		.loc 1 520 0
 1294 0120 8091 0000 		lds r24,USB_ControlRequest
 1295 0124 8132      		cpi r24,lo8(33)
 1296 0126 01F4      		brne .L126
 1297               	.LBB363:
 1298               	.LBB364:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1299               		.loc 3 444 0
 1300 0128 8091 E800 		lds r24,232
 1301 012c 877F      		andi r24,lo8(-9)
 1302 012e 8093 E800 		sts 232,r24
 1303               	.LBE364:
 1304               	.LBE363:
 522:tmk_core/protocol/lufa/lufa.c **** 
 1305               		.loc 1 522 0
 1306 0132 0E94 0000 		call Endpoint_ClearStatusStage
 1307               	.LVL108:
 524:tmk_core/protocol/lufa/lufa.c ****             }
 1308               		.loc 1 524 0
 1309 0136 8091 0000 		lds r24,USB_ControlRequest+3
 1310 013a 8093 0000 		sts keyboard_idle,r24
 1311 013e 0895      		ret
 1312               	.L131:
 529:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 1313               		.loc 1 529 0
 1314 0140 8091 0000 		lds r24,USB_ControlRequest
 1315 0144 813A      		cpi r24,lo8(-95)
 1316 0146 01F4      		brne .L126
 1317               	.LBB365:
 1318               	.LBB366:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1319               		.loc 3 444 0
 1320 0148 8091 E800 		lds r24,232
 1321 014c 877F      		andi r24,lo8(-9)
 1322 014e 8093 E800 		sts 232,r24
 1323               	.L145:
 1324               	.LBE366:
 1325               	.LBE365:
 1326               	.LBB367:
 1327               	.LBB368:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1328               		.loc 3 407 0 discriminator 1
 1329 0152 8091 E800 		lds r24,232
 1330               	.LBE368:
 1331               	.LBE367:
 531:tmk_core/protocol/lufa/lufa.c ****                     ;
 1332               		.loc 1 531 0 discriminator 1
 1333 0156 80FF      		sbrs r24,0
 1334 0158 00C0      		rjmp .L145
 533:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1335               		.loc 1 533 0
 1336 015a 8091 0000 		lds r24,keyboard_idle
 1337               	.L156:
 1338               	.LVL109:
 1339               	.LBB369:
 1340               	.LBB370:
 1341               		.loc 3 554 0
 1342 015e 8093 F100 		sts 241,r24
 1343               	.LVL110:
 1344               	.LBE370:
 1345               	.LBE369:
 1346               	.LBB371:
 1347               	.LBB372:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1348               		.loc 3 456 0
 1349 0162 8091 E800 		lds r24,232
 1350 0166 8E77      		andi r24,lo8(126)
 1351               	.L155:
 1352 0168 8093 E800 		sts 232,r24
 1353               	.LBE372:
 1354               	.LBE371:
 535:tmk_core/protocol/lufa/lufa.c ****             }
 1355               		.loc 1 535 0
 1356 016c 0C94 0000 		jmp Endpoint_ClearStatusStage
 1357               	.LVL111:
 1358               	.L126:
 1359 0170 0895      		ret
 1360               		.cfi_endproc
 1361               	.LFE125:
 1363               		.section	.text.startup.main,"ax",@progbits
 1364               		.weak	main
 1366               	main:
 1367               	.LFB134:
 808:tmk_core/protocol/lufa/lufa.c **** #else
 809:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c) { return 0; }
 810:tmk_core/protocol/lufa/lufa.c **** #endif
 811:tmk_core/protocol/lufa/lufa.c **** 
 812:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 813:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 814:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 815:tmk_core/protocol/lufa/lufa.c **** 
 816:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 817:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface = {
 818:tmk_core/protocol/lufa/lufa.c ****     .Config =
 819:tmk_core/protocol/lufa/lufa.c ****         {
 820:tmk_core/protocol/lufa/lufa.c ****             .StreamingInterfaceNumber = AS_INTERFACE,
 821:tmk_core/protocol/lufa/lufa.c ****             .DataINEndpoint =
 822:tmk_core/protocol/lufa/lufa.c ****                 {
 823:tmk_core/protocol/lufa/lufa.c ****                     .Address = MIDI_STREAM_IN_EPADDR,
 824:tmk_core/protocol/lufa/lufa.c ****                     .Size    = MIDI_STREAM_EPSIZE,
 825:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 826:tmk_core/protocol/lufa/lufa.c ****                 },
 827:tmk_core/protocol/lufa/lufa.c ****             .DataOUTEndpoint =
 828:tmk_core/protocol/lufa/lufa.c ****                 {
 829:tmk_core/protocol/lufa/lufa.c ****                     .Address = MIDI_STREAM_OUT_EPADDR,
 830:tmk_core/protocol/lufa/lufa.c ****                     .Size    = MIDI_STREAM_EPSIZE,
 831:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 832:tmk_core/protocol/lufa/lufa.c ****                 },
 833:tmk_core/protocol/lufa/lufa.c ****         },
 834:tmk_core/protocol/lufa/lufa.c **** };
 835:tmk_core/protocol/lufa/lufa.c **** 
 836:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t *event) { MIDI_Device_SendEventPacket(&USB_MIDI_Interface,
 837:tmk_core/protocol/lufa/lufa.c **** 
 838:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t *const event) { return MIDI_Device_ReceiveEventPacket(&USB
 839:tmk_core/protocol/lufa/lufa.c **** 
 840:tmk_core/protocol/lufa/lufa.c **** #endif
 841:tmk_core/protocol/lufa/lufa.c **** 
 842:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 843:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 844:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 845:tmk_core/protocol/lufa/lufa.c **** 
 846:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 847:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 848:tmk_core/protocol/lufa/lufa.c ****  *
 849:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 850:tmk_core/protocol/lufa/lufa.c ****  */
 851:tmk_core/protocol/lufa/lufa.c **** void virtser_init(void) {
 852:tmk_core/protocol/lufa/lufa.c ****     cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR;
 853:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_SendControlLineStateChange(&cdc_device);
 854:tmk_core/protocol/lufa/lufa.c **** }
 855:tmk_core/protocol/lufa/lufa.c **** 
 856:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 857:tmk_core/protocol/lufa/lufa.c ****  *
 858:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 859:tmk_core/protocol/lufa/lufa.c ****  */
 860:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__((weak));
 861:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) {
 862:tmk_core/protocol/lufa/lufa.c ****     // Ignore by default
 863:tmk_core/protocol/lufa/lufa.c **** }
 864:tmk_core/protocol/lufa/lufa.c **** 
 865:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 866:tmk_core/protocol/lufa/lufa.c ****  *
 867:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 868:tmk_core/protocol/lufa/lufa.c ****  */
 869:tmk_core/protocol/lufa/lufa.c **** void virtser_task(void) {
 870:tmk_core/protocol/lufa/lufa.c ****     uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 871:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ch;
 872:tmk_core/protocol/lufa/lufa.c ****     if (count) {
 873:tmk_core/protocol/lufa/lufa.c ****         ch = CDC_Device_ReceiveByte(&cdc_device);
 874:tmk_core/protocol/lufa/lufa.c ****         virtser_recv(ch);
 875:tmk_core/protocol/lufa/lufa.c ****     }
 876:tmk_core/protocol/lufa/lufa.c **** }
 877:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 878:tmk_core/protocol/lufa/lufa.c ****  *
 879:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 880:tmk_core/protocol/lufa/lufa.c ****  */
 881:tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte) {
 882:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 883:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep      = Endpoint_GetCurrentEndpoint();
 884:tmk_core/protocol/lufa/lufa.c **** 
 885:tmk_core/protocol/lufa/lufa.c ****     if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) {
 886:tmk_core/protocol/lufa/lufa.c ****         /* IN packet */
 887:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 888:tmk_core/protocol/lufa/lufa.c **** 
 889:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 890:tmk_core/protocol/lufa/lufa.c ****             Endpoint_SelectEndpoint(ep);
 891:tmk_core/protocol/lufa/lufa.c ****             return;
 892:tmk_core/protocol/lufa/lufa.c ****         }
 893:tmk_core/protocol/lufa/lufa.c **** 
 894:tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 895:tmk_core/protocol/lufa/lufa.c **** 
 896:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(byte);
 897:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_Flush(&cdc_device);
 898:tmk_core/protocol/lufa/lufa.c **** 
 899:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsINReady()) {
 900:tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 901:tmk_core/protocol/lufa/lufa.c ****         }
 902:tmk_core/protocol/lufa/lufa.c **** 
 903:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 904:tmk_core/protocol/lufa/lufa.c ****     }
 905:tmk_core/protocol/lufa/lufa.c **** }
 906:tmk_core/protocol/lufa/lufa.c **** #endif
 907:tmk_core/protocol/lufa/lufa.c **** 
 908:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 909:tmk_core/protocol/lufa/lufa.c ****  * main
 910:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 911:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 912:tmk_core/protocol/lufa/lufa.c ****  *
 913:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:tmk_core/protocol/lufa/lufa.c ****  */
 915:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void) {
 916:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 917:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 918:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 919:tmk_core/protocol/lufa/lufa.c **** 
 920:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 921:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 922:tmk_core/protocol/lufa/lufa.c **** 
 923:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 924:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 925:tmk_core/protocol/lufa/lufa.c **** }
 926:tmk_core/protocol/lufa/lufa.c **** 
 927:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 928:tmk_core/protocol/lufa/lufa.c ****  *
 929:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 930:tmk_core/protocol/lufa/lufa.c ****  */
 931:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void) {
 932:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 933:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 934:tmk_core/protocol/lufa/lufa.c **** 
 935:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 936:tmk_core/protocol/lufa/lufa.c **** 
 937:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 938:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 939:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 940:tmk_core/protocol/lufa/lufa.c **** }
 941:tmk_core/protocol/lufa/lufa.c **** 
 942:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
 943:tmk_core/protocol/lufa/lufa.c ****  *
 944:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 945:tmk_core/protocol/lufa/lufa.c ****  */
 946:tmk_core/protocol/lufa/lufa.c **** int main(void) __attribute__((weak));
 947:tmk_core/protocol/lufa/lufa.c **** int main(void) {
 1368               		.loc 1 947 0
 1369               		.cfi_startproc
 1370               	/* prologue: function */
 1371               	/* frame size = 0 */
 1372               	/* stack size = 0 */
 1373               	.L__stack_usage = 0
 1374               	.LBB384:
 1375               	.LBB385:
 917:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1376               		.loc 1 917 0
 1377 0000 84B7      		in r24,0x34
 1378 0002 877F      		andi r24,lo8(-9)
 1379 0004 84BF      		out 0x34,r24
 1380               	.LBB386:
 1381               	.LBB387:
 1382               		.file 6 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 457:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 459:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 460:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 461:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 463:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 464:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 469:/usr/lib/avr/include/avr/wdt.h **** 		);
 470:/usr/lib/avr/include/avr/wdt.h **** 	}
 471:/usr/lib/avr/include/avr/wdt.h **** 	else
 472:/usr/lib/avr/include/avr/wdt.h **** 	{
 473:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 474:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 476:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 477:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 478:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 480:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 481:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 486:/usr/lib/avr/include/avr/wdt.h **** 		);
 487:/usr/lib/avr/include/avr/wdt.h **** 	}
 488:/usr/lib/avr/include/avr/wdt.h **** }
 489:/usr/lib/avr/include/avr/wdt.h **** 
 490:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 491:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 492:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 493:/usr/lib/avr/include/avr/wdt.h **** {
 494:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:/usr/lib/avr/include/avr/wdt.h **** 	{
 496:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 497:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 498:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 500:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 501:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 510:/usr/lib/avr/include/avr/wdt.h **** 		);
 511:/usr/lib/avr/include/avr/wdt.h **** 	}
 512:/usr/lib/avr/include/avr/wdt.h **** 	else
 513:/usr/lib/avr/include/avr/wdt.h **** 	{
 514:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 515:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1383               		.loc 6 515 0
 1384               	/* #APP */
 1385               	 ;  515 "/usr/lib/avr/include/avr/wdt.h" 1
 1386 0006 0FB6      		in __tmp_reg__,__SREG__
 1387 0008 F894      		cli
 1388 000a A895      		wdr
 1389 000c 8091 6000 		lds r24,96
 1390 0010 8861      		ori r24,24
 1391 0012 8093 6000 		sts 96,r24
 1392 0016 1092 6000 		sts 96,__zero_reg__
 1393 001a 0FBE      		out __SREG__,__tmp_reg__
 1394               		
 1395               	 ;  0 "" 2
 1396               	/* #NOAPP */
 1397               	.LBE387:
 1398               	.LBE386:
 923:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1399               		.loc 1 923 0
 1400 001c 80E8      		ldi r24,lo8(-128)
 1401 001e 8093 6100 		sts 97,r24
 924:tmk_core/protocol/lufa/lufa.c **** }
 1402               		.loc 1 924 0
 1403 0022 1092 6100 		sts 97,__zero_reg__
 1404               	.LBE385:
 1405               	.LBE384:
 948:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 949:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
 950:tmk_core/protocol/lufa/lufa.c **** #endif
 951:tmk_core/protocol/lufa/lufa.c **** 
 952:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 953:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1406               		.loc 1 953 0
 1407 0026 0E94 0000 		call keyboard_setup
 1408               	.LVL112:
 1409               	.LBB388:
 1410               	.LBB389:
 933:tmk_core/protocol/lufa/lufa.c **** 
 1411               		.loc 1 933 0
 1412 002a 0E94 0000 		call USB_Disable
 1413               	.LVL113:
 935:tmk_core/protocol/lufa/lufa.c **** 
 1414               		.loc 1 935 0
 1415 002e 0E94 0000 		call USB_Init
 1416               	.LVL114:
 1417               	.LBB390:
 1418               	.LBB391:
 1419               	.LBB392:
 1420               		.loc 5 113 0
 1421 0032 8091 E200 		lds r24,226
 1422 0036 8460      		ori r24,lo8(4)
 1423 0038 8093 E200 		sts 226,r24
 1424               	.LVL115:
 1425               	.LBE392:
 1426               	.LBE391:
 1427               	.LBE390:
 939:tmk_core/protocol/lufa/lufa.c **** }
 1428               		.loc 1 939 0
 1429 003c 80E0      		ldi r24,lo8(gs(sendchar))
 1430 003e 90E0      		ldi r25,hi8(gs(sendchar))
 1431 0040 0E94 0000 		call print_set_sendchar
 1432               	.LVL116:
 1433               	.LBE389:
 1434               	.LBE388:
 954:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 955:tmk_core/protocol/lufa/lufa.c ****     sei();
 1435               		.loc 1 955 0
 1436               	/* #APP */
 1437               	 ;  955 "tmk_core/protocol/lufa/lufa.c" 1
 1438 0044 7894      		sei
 1439               	 ;  0 "" 2
 956:tmk_core/protocol/lufa/lufa.c **** 
 957:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
 958:tmk_core/protocol/lufa/lufa.c ****     serial_init();
 959:tmk_core/protocol/lufa/lufa.c **** #endif
 960:tmk_core/protocol/lufa/lufa.c **** 
 961:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 962:tmk_core/protocol/lufa/lufa.c **** 
 963:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 964:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 965:tmk_core/protocol/lufa/lufa.c **** #    if defined(INTERRUPT_CONTROL_ENDPOINT)
 966:tmk_core/protocol/lufa/lufa.c ****         ;
 967:tmk_core/protocol/lufa/lufa.c **** #    else
 968:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 969:tmk_core/protocol/lufa/lufa.c **** #    endif
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 972:tmk_core/protocol/lufa/lufa.c **** #else
 973:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1440               		.loc 1 973 0
 1441               	/* #NOAPP */
 1442 0046 0E94 0000 		call USB_USBTask
 1443               	.LVL117:
 974:tmk_core/protocol/lufa/lufa.c **** #endif
 975:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 976:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1444               		.loc 1 976 0
 1445 004a 0E94 0000 		call keyboard_init
 1446               	.LVL118:
 977:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1447               		.loc 1 977 0
 1448 004e 80E0      		ldi r24,lo8(lufa_driver)
 1449 0050 90E0      		ldi r25,hi8(lufa_driver)
 1450 0052 0E94 0000 		call host_set_driver
 1451               	.LVL119:
 978:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 979:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 980:tmk_core/protocol/lufa/lufa.c **** #endif
 981:tmk_core/protocol/lufa/lufa.c **** 
 982:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 983:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1452               		.loc 1 986 0
 1453 0056 80E0      		ldi r24,lo8(__c.6116)
 1454 0058 90E0      		ldi r25,hi8(__c.6116)
 1455 005a 0E94 0000 		call xputs
 1456               	.LVL120:
 1457               	.L160:
 987:tmk_core/protocol/lufa/lufa.c ****     while (1) {
 988:tmk_core/protocol/lufa/lufa.c **** #if !defined(NO_USB_STARTUP_CHECK)
 989:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1458               		.loc 1 989 0
 1459 005e 8091 0000 		lds r24,USB_DeviceState
 1460 0062 8530      		cpi r24,lo8(5)
 1461 0064 01F4      		brne .L168
 990:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1462               		.loc 1 990 0
 1463 0066 80E0      		ldi r24,lo8(__c.6118)
 1464 0068 90E0      		ldi r25,hi8(__c.6118)
 1465 006a 0E94 0000 		call xputs
 1466               	.LVL121:
 991:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1467               		.loc 1 991 0
 1468 006e 0E94 0000 		call suspend_power_down
 1469               	.LVL122:
 992:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1470               		.loc 1 992 0
 1471 0072 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1472 0076 8823      		tst r24
 1473 0078 01F0      		breq .L160
 1474               		.loc 1 992 0 is_stmt 0 discriminator 1
 1475 007a 0E94 0000 		call suspend_wakeup_condition
 1476               	.LVL123:
 1477 007e 8823      		tst r24
 1478 0080 01F0      		breq .L160
 993:tmk_core/protocol/lufa/lufa.c ****                 USB_Device_SendRemoteWakeup();
 1479               		.loc 1 993 0 is_stmt 1
 1480 0082 0E94 0000 		call USB_Device_SendRemoteWakeup
 1481               	.LVL124:
 1482 0086 00C0      		rjmp .L160
 1483               	.L168:
 994:tmk_core/protocol/lufa/lufa.c ****             }
 995:tmk_core/protocol/lufa/lufa.c ****         }
 996:tmk_core/protocol/lufa/lufa.c **** #endif
 997:tmk_core/protocol/lufa/lufa.c **** 
 998:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1484               		.loc 1 998 0
 1485 0088 0E94 0000 		call keyboard_task
 1486               	.LVL125:
 999:tmk_core/protocol/lufa/lufa.c **** 
1000:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1001:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1002:tmk_core/protocol/lufa/lufa.c **** #endif
1003:tmk_core/protocol/lufa/lufa.c **** 
1004:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) && defined(RGBLIGHT_ENABLE)
1005:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1006:tmk_core/protocol/lufa/lufa.c **** #endif
1007:tmk_core/protocol/lufa/lufa.c **** 
1008:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1009:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1010:tmk_core/protocol/lufa/lufa.c **** #endif
1011:tmk_core/protocol/lufa/lufa.c **** 
1012:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1013:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1014:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1015:tmk_core/protocol/lufa/lufa.c **** #endif
1016:tmk_core/protocol/lufa/lufa.c **** 
1017:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1018:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1019:tmk_core/protocol/lufa/lufa.c **** #endif
1020:tmk_core/protocol/lufa/lufa.c **** 
1021:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1022:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1023:tmk_core/protocol/lufa/lufa.c **** #endif
1024:tmk_core/protocol/lufa/lufa.c ****     }
 1487               		.loc 1 1024 0
 1488 008c 00C0      		rjmp .L160
 1489               		.cfi_endproc
 1490               	.LFE134:
 1492               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1493               	.global	CALLBACK_USB_GetDescriptor
 1495               	CALLBACK_USB_GetDescriptor:
 1496               	.LFB135:
1025:tmk_core/protocol/lufa/lufa.c **** }
1026:tmk_core/protocol/lufa/lufa.c **** 
1027:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void **cons
 1497               		.loc 1 1027 0
 1498               		.cfi_startproc
 1499               	.LVL126:
 1500               	/* prologue: function */
 1501               	/* frame size = 0 */
 1502               	/* stack size = 0 */
 1503               	.L__stack_usage = 0
 1504               		.loc 1 1027 0
 1505 0000 0C94 0000 		jmp get_usb_descriptor
 1506               	.LVL127:
 1507               		.cfi_endproc
 1508               	.LFE135:
 1510               		.section	.progmem.data.__c.6118,"a",@progbits
 1513               	__c.6118:
 1514 0000 5B73 5D00 		.string	"[s]"
 1515               		.section	.progmem.data.__c.6116,"a",@progbits
 1518               	__c.6116:
 1519 0000 4B65 7962 		.string	"Keyboard start.\n"
 1519      6F61 7264 
 1519      2073 7461 
 1519      7274 2E0A 
 1519      00
 1520               		.section	.bss.timeouted.6085,"aw",@nobits
 1523               	timeouted.6085:
 1524 0000 00        		.zero	1
 1525               		.section	.bss.count.6012,"aw",@nobits
 1528               	count.6012:
 1529 0000 00        		.zero	1
 1530               		.section	.progmem.data.__c.6006,"a",@progbits
 1533               	__c.6006:
 1534 0000 5B57 5D00 		.string	"[W]"
 1535               		.section	.progmem.data.__c.6002,"a",@progbits
 1538               	__c.6002:
 1539 0000 5B53 5D00 		.string	"[S]"
 1540               		.section	.progmem.data.__c.5998,"a",@progbits
 1543               	__c.5998:
 1544 0000 5B52 5D00 		.string	"[R]"
 1545               		.section	.progmem.data.__c.5993,"a",@progbits
 1548               	__c.5993:
 1549 0000 5B44 5D00 		.string	"[D]"
 1550               		.section	.progmem.data.__c.5988,"a",@progbits
 1553               	__c.5988:
 1554 0000 5B43 5D00 		.string	"[C]"
 1555               		.section	.bss.console_flush,"aw",@nobits
 1558               	console_flush:
 1559 0000 00        		.zero	1
 1560               	.global	lufa_driver
 1561               		.section	.data.lufa_driver,"aw",@progbits
 1564               	lufa_driver:
 1565 0000 0000      		.word	gs(keyboard_leds)
 1566 0002 0000      		.word	gs(send_keyboard)
 1567 0004 0000      		.word	gs(send_mouse)
 1568 0006 0000      		.word	gs(send_system)
 1569 0008 0000      		.word	gs(send_consumer)
 1570               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1573               	keyboard_report_sent:
 1574 0000 0000 0000 		.zero	8
 1574      0000 0000 
 1575               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1578               	keyboard_led_stats:
 1579 0000 00        		.zero	1
 1580               	.global	keyboard_protocol
 1581               		.section	.data.keyboard_protocol,"aw",@progbits
 1584               	keyboard_protocol:
 1585 0000 01        		.byte	1
 1586               	.global	keyboard_idle
 1587               		.section	.bss.keyboard_idle,"aw",@nobits
 1590               	keyboard_idle:
 1591 0000 00        		.zero	1
 1592               		.text
 1593               	.Letext0:
 1594               		.file 7 "/usr/lib/avr/include/stdint.h"
 1595               		.file 8 "tmk_core/common/report.h"
 1596               		.file 9 "tmk_core/common/host_driver.h"
 1597               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1598               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1599               		.file 12 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1600               		.file 13 "tmk_core/protocol/usb_descriptor.h"
 1601               		.file 14 "tmk_core/protocol/lufa/lufa.h"
 1602               		.file 15 "tmk_core/protocol/lufa/outputselect.h"
 1603               		.file 16 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1604               		.file 17 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1605               		.file 18 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1606               		.file 19 "tmk_core/common/action_util.h"
 1607               		.file 20 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1608               		.file 21 "tmk_core/common/avr/xprintf.h"
 1609               		.file 22 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1610               		.file 23 "tmk_core/common/suspend.h"
 1611               		.file 24 "tmk_core/common/action.h"
 1612               		.file 25 "tmk_core/common/print.h"
 1613               		.file 26 "tmk_core/common/keyboard.h"
 1614               		.file 27 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccxb4V9h.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxb4V9h.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxb4V9h.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxb4V9h.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxb4V9h.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxb4V9h.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccxb4V9h.s:1578   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccxb4V9h.s:30     .text.sendchar:0000000000000000 sendchar
     /tmp/ccxb4V9h.s:1558   .bss.console_flush:0000000000000000 console_flush
     /tmp/ccxb4V9h.s:1523   .bss.timeouted.6085:0000000000000000 timeouted.6085
     /tmp/ccxb4V9h.s:291    .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccxb4V9h.s:425    .text.send_system:0000000000000000 send_system
     /tmp/ccxb4V9h.s:544    .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccxb4V9h.s:651    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccxb4V9h.s:1573   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccxb4V9h.s:770    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccxb4V9h.s:1553   .progmem.data.__c.5988:0000000000000000 __c.5988
     /tmp/ccxb4V9h.s:813    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccxb4V9h.s:1548   .progmem.data.__c.5993:0000000000000000 __c.5993
     /tmp/ccxb4V9h.s:835    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccxb4V9h.s:1543   .progmem.data.__c.5998:0000000000000000 __c.5998
     /tmp/ccxb4V9h.s:854    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccxb4V9h.s:1538   .progmem.data.__c.6002:0000000000000000 __c.6002
     /tmp/ccxb4V9h.s:873    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccxb4V9h.s:1533   .progmem.data.__c.6006:0000000000000000 __c.6006
     /tmp/ccxb4V9h.s:895    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
     /tmp/ccxb4V9h.s:1528   .bss.count.6012:0000000000000000 count.6012
     /tmp/ccxb4V9h.s:1033   .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccxb4V9h.s:1076   .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccxb4V9h.s:1584   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccxb4V9h.s:1590   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccxb4V9h.s:1366   .text.startup.main:0000000000000000 main
     /tmp/ccxb4V9h.s:1564   .data.lufa_driver:0000000000000000 lufa_driver
     /tmp/ccxb4V9h.s:1518   .progmem.data.__c.6116:0000000000000000 __c.6116
     /tmp/ccxb4V9h.s:1513   .progmem.data.__c.6118:0000000000000000 __c.6118
     /tmp/ccxb4V9h.s:1495   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
USB_DeviceState
where_to_send
Endpoint_Write_Stream_LE
xputs
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
__udivmodqi4
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
print_set_sendchar
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
