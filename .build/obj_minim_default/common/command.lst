   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB32:
  14               		.file 1 "tmk_core/common/command.c"
   1:tmk_core/common/command.c **** /*
   2:tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/command.c **** 
   4:tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/command.c **** (at your option) any later version.
   8:tmk_core/common/command.c **** 
   9:tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/command.c **** GNU General Public License for more details.
  13:tmk_core/common/command.c **** 
  14:tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/command.c **** */
  17:tmk_core/common/command.c **** #include <stdint.h>
  18:tmk_core/common/command.c **** #include <stdbool.h>
  19:tmk_core/common/command.c **** #include "wait.h"
  20:tmk_core/common/command.c **** #include "keycode.h"
  21:tmk_core/common/command.c **** #include "host.h"
  22:tmk_core/common/command.c **** #include "keymap.h"
  23:tmk_core/common/command.c **** #include "print.h"
  24:tmk_core/common/command.c **** #include "debug.h"
  25:tmk_core/common/command.c **** #include "util.h"
  26:tmk_core/common/command.c **** #include "timer.h"
  27:tmk_core/common/command.c **** #include "keyboard.h"
  28:tmk_core/common/command.c **** #include "bootloader.h"
  29:tmk_core/common/command.c **** #include "action_layer.h"
  30:tmk_core/common/command.c **** #include "action_util.h"
  31:tmk_core/common/command.c **** #include "eeconfig.h"
  32:tmk_core/common/command.c **** #include "sleep_led.h"
  33:tmk_core/common/command.c **** #include "led.h"
  34:tmk_core/common/command.c **** #include "command.h"
  35:tmk_core/common/command.c **** #include "quantum.h"
  36:tmk_core/common/command.c **** #include "version.h"
  37:tmk_core/common/command.c **** 
  38:tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
  39:tmk_core/common/command.c **** #    include "backlight.h"
  40:tmk_core/common/command.c **** #endif
  41:tmk_core/common/command.c **** 
  42:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  43:tmk_core/common/command.c **** #    include "mousekey.h"
  44:tmk_core/common/command.c **** #endif
  45:tmk_core/common/command.c **** 
  46:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  47:tmk_core/common/command.c **** #    include "usb_keyboard.h"
  48:tmk_core/common/command.c **** #    ifdef EXTRAKEY_ENABLE
  49:tmk_core/common/command.c **** #        include "usb_extra.h"
  50:tmk_core/common/command.c **** #    endif
  51:tmk_core/common/command.c **** #endif
  52:tmk_core/common/command.c **** 
  53:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  54:tmk_core/common/command.c **** #    include "usbdrv.h"
  55:tmk_core/common/command.c **** #endif
  56:tmk_core/common/command.c **** 
  57:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  58:tmk_core/common/command.c **** #    include "audio.h"
  59:tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  60:tmk_core/common/command.c **** 
  61:tmk_core/common/command.c **** static bool command_common(uint8_t code);
  62:tmk_core/common/command.c **** static void command_common_help(void);
  63:tmk_core/common/command.c **** static void print_version(void);
  64:tmk_core/common/command.c **** static void print_status(void);
  65:tmk_core/common/command.c **** static bool command_console(uint8_t code);
  66:tmk_core/common/command.c **** static void command_console_help(void);
  67:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  68:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  69:tmk_core/common/command.c **** static void mousekey_console_help(void);
  70:tmk_core/common/command.c **** #endif
  71:tmk_core/common/command.c **** 
  72:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  73:tmk_core/common/command.c **** 
  74:tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  75:tmk_core/common/command.c **** 
  76:tmk_core/common/command.c **** bool command_proc(uint8_t code) {
  77:tmk_core/common/command.c ****     switch (command_state) {
  78:tmk_core/common/command.c ****         case ONESHOT:
  79:tmk_core/common/command.c ****             if (!IS_COMMAND()) return false;
  80:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  81:tmk_core/common/command.c ****             break;
  82:tmk_core/common/command.c ****         case CONSOLE:
  83:tmk_core/common/command.c ****             if (IS_COMMAND())
  84:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  85:tmk_core/common/command.c ****             else
  86:tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  87:tmk_core/common/command.c ****             break;
  88:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  89:tmk_core/common/command.c ****         case MOUSEKEY:
  90:tmk_core/common/command.c ****             mousekey_console(code);
  91:tmk_core/common/command.c ****             break;
  92:tmk_core/common/command.c **** #endif
  93:tmk_core/common/command.c ****         default:
  94:tmk_core/common/command.c ****             command_state = ONESHOT;
  95:tmk_core/common/command.c ****             return false;
  96:tmk_core/common/command.c ****     }
  97:tmk_core/common/command.c ****     return true;
  98:tmk_core/common/command.c **** }
  99:tmk_core/common/command.c **** 
 100:tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 101:tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 102:tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__((weak));
 103:tmk_core/common/command.c **** bool command_extra(uint8_t code) {
 104:tmk_core/common/command.c ****     (void)code;
 105:tmk_core/common/command.c ****     return false;
 106:tmk_core/common/command.c **** }
 107:tmk_core/common/command.c **** 
 108:tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__((weak));
 109:tmk_core/common/command.c **** bool command_console_extra(uint8_t code) {
 110:tmk_core/common/command.c ****     (void)code;
 111:tmk_core/common/command.c ****     return false;
 112:tmk_core/common/command.c **** }
 113:tmk_core/common/command.c **** 
 114:tmk_core/common/command.c **** /***********************************************************
 115:tmk_core/common/command.c ****  * Command common
 116:tmk_core/common/command.c ****  ***********************************************************/
 117:tmk_core/common/command.c **** static void command_common_help(void) {
 118:tmk_core/common/command.c ****     print("\n\t- Magic -\n" STR(MAGIC_KEY_DEBUG) ":	Debug Message Toggle\n" STR(MAGIC_KEY_DEBUG_MAT
 119:tmk_core/common/command.c **** 
 120:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 121:tmk_core/common/command.c ****           STR(MAGIC_KEY_LAYER0) ":	Switch to Layer 0\n" STR(MAGIC_KEY_LAYER1) ":	Switch to Layer 1\
 122:tmk_core/common/command.c **** #endif
 123:tmk_core/common/command.c **** 
 124:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 125:tmk_core/common/command.c ****                                                                                                    
 126:tmk_core/common/command.c **** #endif
 127:tmk_core/common/command.c **** 
 128:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 129:tmk_core/common/command.c ****                                                                                                    
 130:tmk_core/common/command.c **** #endif
 131:tmk_core/common/command.c **** 
 132:tmk_core/common/command.c ****           STR(MAGIC_KEY_LAYER0_ALT) ":	Switch to Layer 0 (alternate)\n"
 133:tmk_core/common/command.c **** 
 134:tmk_core/common/command.c ****           STR(MAGIC_KEY_BOOTLOADER) ":	Jump to Bootloader\n" STR(MAGIC_KEY_BOOTLOADER_ALT) ":	Jump 
 135:tmk_core/common/command.c **** 
 136:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 137:tmk_core/common/command.c ****           STR(MAGIC_KEY_LOCK) ":	Lock Keyboard\n"
 138:tmk_core/common/command.c **** #endif
 139:tmk_core/common/command.c **** 
 140:tmk_core/common/command.c ****           STR(MAGIC_KEY_EEPROM) ":	Print EEPROM Settings\n" STR(MAGIC_KEY_EEPROM_CLEAR) ":	Clear EE
 141:tmk_core/common/command.c **** 
 142:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 143:tmk_core/common/command.c ****           STR(MAGIC_KEY_NKRO) ":	NKRO Toggle\n"
 144:tmk_core/common/command.c **** #endif
 145:tmk_core/common/command.c **** 
 146:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 147:tmk_core/common/command.c ****           STR(MAGIC_KEY_SLEEP_LED) ":	Sleep LED Test\n"
 148:tmk_core/common/command.c **** #endif
 149:tmk_core/common/command.c ****     );
 150:tmk_core/common/command.c **** }
 151:tmk_core/common/command.c **** 
 152:tmk_core/common/command.c **** static void print_version(void) {
 153:tmk_core/common/command.c ****     // print version & information
 154:tmk_core/common/command.c ****     print("\n\t- Version -\n");
 155:tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 156:tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 157:tmk_core/common/command.c ****                                                        "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") 
 158:tmk_core/common/command.c ****                                                                                                 "VE
 159:tmk_core/common/command.c **** #ifdef SKIP_VERSION
 160:tmk_core/common/command.c ****     print("BUILD:  (" __DATE__ ")\n");
 161:tmk_core/common/command.c **** #else
 162:tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 163:tmk_core/common/command.c **** #endif
 164:tmk_core/common/command.c **** 
 165:tmk_core/common/command.c ****     /* build options */
 166:tmk_core/common/command.c ****     print("OPTIONS:"
 167:tmk_core/common/command.c **** 
 168:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 169:tmk_core/common/command.c ****           " PJRC"
 170:tmk_core/common/command.c **** #endif
 171:tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 172:tmk_core/common/command.c ****           " LUFA"
 173:tmk_core/common/command.c **** #endif
 174:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 175:tmk_core/common/command.c ****           " VUSB"
 176:tmk_core/common/command.c **** #endif
 177:tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 178:tmk_core/common/command.c ****           " BOOTMAGIC"
 179:tmk_core/common/command.c **** #endif
 180:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 181:tmk_core/common/command.c ****           " MOUSEKEY"
 182:tmk_core/common/command.c **** #endif
 183:tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 184:tmk_core/common/command.c ****           " EXTRAKEY"
 185:tmk_core/common/command.c **** #endif
 186:tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 187:tmk_core/common/command.c ****           " CONSOLE"
 188:tmk_core/common/command.c **** #endif
 189:tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 190:tmk_core/common/command.c ****           " COMMAND"
 191:tmk_core/common/command.c **** #endif
 192:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 193:tmk_core/common/command.c ****           " NKRO"
 194:tmk_core/common/command.c **** #endif
 195:tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 196:tmk_core/common/command.c ****           " KEYMAP_SECTION"
 197:tmk_core/common/command.c **** #endif
 198:tmk_core/common/command.c **** 
 199:tmk_core/common/command.c ****           " " STR(BOOTLOADER_SIZE) "\n");
 200:tmk_core/common/command.c **** 
 201:tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 202:tmk_core/common/command.c **** #if defined(__AVR__)
 203:tmk_core/common/command.c ****               " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__ " AVR_ARCH: avr" STR(__AVR_ARCH__)
 204:tmk_core/common/command.c **** #endif
 205:tmk_core/common/command.c ****                   "\n");
 206:tmk_core/common/command.c **** 
 207:tmk_core/common/command.c ****     return;
 208:tmk_core/common/command.c **** }
 209:tmk_core/common/command.c **** 
 210:tmk_core/common/command.c **** static void print_status(void) {
 211:tmk_core/common/command.c ****     print("\n\t- Status -\n");
 212:tmk_core/common/command.c **** 
 213:tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 214:tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 215:tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 216:tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 217:tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 218:tmk_core/common/command.c **** #endif
 219:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 220:tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 221:tmk_core/common/command.c **** #endif
 222:tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 223:tmk_core/common/command.c **** 
 224:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 225:tmk_core/common/command.c ****     print_val_hex8(UDCON);
 226:tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 227:tmk_core/common/command.c ****     print_val_hex8(UDINT);
 228:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 229:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 230:tmk_core/common/command.c **** #endif
 231:tmk_core/common/command.c **** 
 232:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 233:tmk_core/common/command.c **** #    if USB_COUNT_SOF
 234:tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 235:tmk_core/common/command.c **** #    endif
 236:tmk_core/common/command.c **** #endif
 237:tmk_core/common/command.c ****     return;
 238:tmk_core/common/command.c **** }
 239:tmk_core/common/command.c **** 
 240:tmk_core/common/command.c **** static void print_eeconfig(void) {
 241:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 242:tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 243:tmk_core/common/command.c **** 
 244:tmk_core/common/command.c ****     print("default_layer: ");
 245:tmk_core/common/command.c ****     print_dec(eeconfig_read_default_layer());
 246:tmk_core/common/command.c ****     print("\n");
 247:tmk_core/common/command.c **** 
 248:tmk_core/common/command.c ****     debug_config_t dc;
 249:tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 250:tmk_core/common/command.c ****     print("debug_config.raw: ");
 251:tmk_core/common/command.c ****     print_hex8(dc.raw);
 252:tmk_core/common/command.c ****     print("\n");
 253:tmk_core/common/command.c ****     print(".enable: ");
 254:tmk_core/common/command.c ****     print_dec(dc.enable);
 255:tmk_core/common/command.c ****     print("\n");
 256:tmk_core/common/command.c ****     print(".matrix: ");
 257:tmk_core/common/command.c ****     print_dec(dc.matrix);
 258:tmk_core/common/command.c ****     print("\n");
 259:tmk_core/common/command.c ****     print(".keyboard: ");
 260:tmk_core/common/command.c ****     print_dec(dc.keyboard);
 261:tmk_core/common/command.c ****     print("\n");
 262:tmk_core/common/command.c ****     print(".mouse: ");
 263:tmk_core/common/command.c ****     print_dec(dc.mouse);
 264:tmk_core/common/command.c ****     print("\n");
 265:tmk_core/common/command.c **** 
 266:tmk_core/common/command.c ****     keymap_config_t kc;
 267:tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 268:tmk_core/common/command.c ****     print("keymap_config.raw: ");
 269:tmk_core/common/command.c ****     print_hex8(kc.raw);
 270:tmk_core/common/command.c ****     print("\n");
 271:tmk_core/common/command.c ****     print(".swap_control_capslock: ");
 272:tmk_core/common/command.c ****     print_dec(kc.swap_control_capslock);
 273:tmk_core/common/command.c ****     print("\n");
 274:tmk_core/common/command.c ****     print(".capslock_to_control: ");
 275:tmk_core/common/command.c ****     print_dec(kc.capslock_to_control);
 276:tmk_core/common/command.c ****     print("\n");
 277:tmk_core/common/command.c ****     print(".swap_lctl_lgui: ");
 278:tmk_core/common/command.c ****     print_dec(kc.swap_lctl_lgui);
 279:tmk_core/common/command.c ****     print("\n");
 280:tmk_core/common/command.c ****     print(".swap_rctl_rgui: ");
 281:tmk_core/common/command.c ****     print_dec(kc.swap_rctl_rgui);
 282:tmk_core/common/command.c ****     print("\n");
 283:tmk_core/common/command.c ****     print(".swap_lalt_lgui: ");
 284:tmk_core/common/command.c ****     print_dec(kc.swap_lalt_lgui);
 285:tmk_core/common/command.c ****     print("\n");
 286:tmk_core/common/command.c ****     print(".swap_ralt_rgui: ");
 287:tmk_core/common/command.c ****     print_dec(kc.swap_ralt_rgui);
 288:tmk_core/common/command.c ****     print("\n");
 289:tmk_core/common/command.c ****     print(".no_gui: ");
 290:tmk_core/common/command.c ****     print_dec(kc.no_gui);
 291:tmk_core/common/command.c ****     print("\n");
 292:tmk_core/common/command.c ****     print(".swap_grave_esc: ");
 293:tmk_core/common/command.c ****     print_dec(kc.swap_grave_esc);
 294:tmk_core/common/command.c ****     print("\n");
 295:tmk_core/common/command.c ****     print(".swap_backslash_backspace: ");
 296:tmk_core/common/command.c ****     print_dec(kc.swap_backslash_backspace);
 297:tmk_core/common/command.c ****     print("\n");
 298:tmk_core/common/command.c ****     print(".nkro: ");
 299:tmk_core/common/command.c ****     print_dec(kc.nkro);
 300:tmk_core/common/command.c ****     print("\n");
 301:tmk_core/common/command.c **** 
 302:tmk_core/common/command.c **** #    ifdef BACKLIGHT_ENABLE
 303:tmk_core/common/command.c ****     backlight_config_t bc;
 304:tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 305:tmk_core/common/command.c ****     print("backlight_config.raw: ");
 306:tmk_core/common/command.c ****     print_hex8(bc.raw);
 307:tmk_core/common/command.c ****     print("\n");
 308:tmk_core/common/command.c ****     print(".enable: ");
 309:tmk_core/common/command.c ****     print_dec(bc.enable);
 310:tmk_core/common/command.c ****     print("\n");
 311:tmk_core/common/command.c ****     print(".level: ");
 312:tmk_core/common/command.c ****     print_dec(bc.level);
 313:tmk_core/common/command.c ****     print("\n");
 314:tmk_core/common/command.c **** #    endif /* BACKLIGHT_ENABLE */
 315:tmk_core/common/command.c **** 
 316:tmk_core/common/command.c **** #endif /* !NO_PRINT */
 317:tmk_core/common/command.c **** }
 318:tmk_core/common/command.c **** 
 319:tmk_core/common/command.c **** static bool command_common(uint8_t code) {
 320:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 321:tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 322:tmk_core/common/command.c **** #endif
 323:tmk_core/common/command.c **** 
 324:tmk_core/common/command.c ****     switch (code) {
 325:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 326:tmk_core/common/command.c **** 
 327:tmk_core/common/command.c ****         // test breathing sleep LED
 328:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 329:tmk_core/common/command.c ****             print("Sleep LED Test\n");
 330:tmk_core/common/command.c ****             sleep_led_toggle();
 331:tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 332:tmk_core/common/command.c ****             break;
 333:tmk_core/common/command.c **** #endif
 334:tmk_core/common/command.c **** 
 335:tmk_core/common/command.c ****         // print stored eeprom config
 336:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 337:tmk_core/common/command.c ****             print("eeconfig:\n");
 338:tmk_core/common/command.c ****             print_eeconfig();
 339:tmk_core/common/command.c ****             break;
 340:tmk_core/common/command.c **** 
 341:tmk_core/common/command.c ****         // clear eeprom
 342:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM_CLEAR):
 343:tmk_core/common/command.c ****             print("Clearing EEPROM\n");
 344:tmk_core/common/command.c ****             eeconfig_init();
 345:tmk_core/common/command.c ****             break;
 346:tmk_core/common/command.c **** 
 347:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 348:tmk_core/common/command.c **** 
 349:tmk_core/common/command.c ****         // lock/unlock keyboard
 350:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 351:tmk_core/common/command.c ****             if (host_get_driver()) {
 352:tmk_core/common/command.c ****                 host_driver = host_get_driver();
 353:tmk_core/common/command.c ****                 clear_keyboard();
 354:tmk_core/common/command.c ****                 host_set_driver(0);
 355:tmk_core/common/command.c ****                 print("Locked.\n");
 356:tmk_core/common/command.c ****             } else {
 357:tmk_core/common/command.c ****                 host_set_driver(host_driver);
 358:tmk_core/common/command.c ****                 print("Unlocked.\n");
 359:tmk_core/common/command.c ****             }
 360:tmk_core/common/command.c ****             break;
 361:tmk_core/common/command.c **** #endif
 362:tmk_core/common/command.c **** 
 363:tmk_core/common/command.c ****         // print help
 364:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP):
 365:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP_ALT):
 366:tmk_core/common/command.c ****             command_common_help();
 367:tmk_core/common/command.c ****             break;
 368:tmk_core/common/command.c **** 
 369:tmk_core/common/command.c ****         // activate console
 370:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 371:tmk_core/common/command.c ****             debug_matrix   = false;
 372:tmk_core/common/command.c ****             debug_keyboard = false;
 373:tmk_core/common/command.c ****             debug_mouse    = false;
 374:tmk_core/common/command.c ****             debug_enable   = false;
 375:tmk_core/common/command.c ****             command_console_help();
 376:tmk_core/common/command.c ****             print("C> ");
 377:tmk_core/common/command.c ****             command_state = CONSOLE;
 378:tmk_core/common/command.c ****             break;
 379:tmk_core/common/command.c **** 
 380:tmk_core/common/command.c ****         // jump to bootloader
 381:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 382:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER_ALT):
 383:tmk_core/common/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 384:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 385:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
 386:tmk_core/common/command.c ****             stop_all_notes();
 387:tmk_core/common/command.c ****             shutdown_user();
 388:tmk_core/common/command.c **** #else
 389:tmk_core/common/command.c ****             wait_ms(1000);
 390:tmk_core/common/command.c **** #endif
 391:tmk_core/common/command.c ****             bootloader_jump();  // not return
 392:tmk_core/common/command.c ****             break;
 393:tmk_core/common/command.c **** 
 394:tmk_core/common/command.c ****         // debug toggle
 395:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 396:tmk_core/common/command.c ****             debug_enable = !debug_enable;
 397:tmk_core/common/command.c ****             if (debug_enable) {
 398:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 399:tmk_core/common/command.c ****             } else {
 400:tmk_core/common/command.c ****                 print("\ndebug: off\n");
 401:tmk_core/common/command.c ****                 debug_matrix   = false;
 402:tmk_core/common/command.c ****                 debug_keyboard = false;
 403:tmk_core/common/command.c ****                 debug_mouse    = false;
 404:tmk_core/common/command.c ****             }
 405:tmk_core/common/command.c ****             break;
 406:tmk_core/common/command.c **** 
 407:tmk_core/common/command.c ****         // debug matrix toggle
 408:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 409:tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 410:tmk_core/common/command.c ****             if (debug_matrix) {
 411:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 412:tmk_core/common/command.c ****                 debug_enable = true;
 413:tmk_core/common/command.c ****             } else {
 414:tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 415:tmk_core/common/command.c ****             }
 416:tmk_core/common/command.c ****             break;
 417:tmk_core/common/command.c **** 
 418:tmk_core/common/command.c ****         // debug keyboard toggle
 419:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 420:tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 421:tmk_core/common/command.c ****             if (debug_keyboard) {
 422:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 423:tmk_core/common/command.c ****                 debug_enable = true;
 424:tmk_core/common/command.c ****             } else {
 425:tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 426:tmk_core/common/command.c ****             }
 427:tmk_core/common/command.c ****             break;
 428:tmk_core/common/command.c **** 
 429:tmk_core/common/command.c ****         // debug mouse toggle
 430:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 431:tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 432:tmk_core/common/command.c ****             if (debug_mouse) {
 433:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 434:tmk_core/common/command.c ****                 debug_enable = true;
 435:tmk_core/common/command.c ****             } else {
 436:tmk_core/common/command.c ****                 print("\nmouse: off\n");
 437:tmk_core/common/command.c ****             }
 438:tmk_core/common/command.c ****             break;
 439:tmk_core/common/command.c **** 
 440:tmk_core/common/command.c ****         // print version
 441:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 442:tmk_core/common/command.c ****             print_version();
 443:tmk_core/common/command.c ****             break;
 444:tmk_core/common/command.c **** 
 445:tmk_core/common/command.c ****         // print status
 446:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_STATUS):
 447:tmk_core/common/command.c ****             print_status();
 448:tmk_core/common/command.c ****             break;
 449:tmk_core/common/command.c **** 
 450:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 451:tmk_core/common/command.c **** 
 452:tmk_core/common/command.c ****         // NKRO toggle
 453:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 454:tmk_core/common/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 455:tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 456:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 457:tmk_core/common/command.c ****                 print("NKRO: on\n");
 458:tmk_core/common/command.c ****             } else {
 459:tmk_core/common/command.c ****                 print("NKRO: off\n");
 460:tmk_core/common/command.c ****             }
 461:tmk_core/common/command.c ****             break;
 462:tmk_core/common/command.c **** #endif
 463:tmk_core/common/command.c **** 
 464:tmk_core/common/command.c ****             // switch layers
 465:tmk_core/common/command.c **** 
 466:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0_ALT):
 467:tmk_core/common/command.c ****             switch_default_layer(0);
 468:tmk_core/common/command.c ****             break;
 469:tmk_core/common/command.c **** 
 470:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 471:tmk_core/common/command.c **** 
 472:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0):
 473:tmk_core/common/command.c ****             switch_default_layer(0);
 474:tmk_core/common/command.c ****             break;
 475:tmk_core/common/command.c **** 
 476:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER1):
 477:tmk_core/common/command.c ****             switch_default_layer(1);
 478:tmk_core/common/command.c ****             break;
 479:tmk_core/common/command.c **** 
 480:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER2):
 481:tmk_core/common/command.c ****             switch_default_layer(2);
 482:tmk_core/common/command.c ****             break;
 483:tmk_core/common/command.c **** 
 484:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER3):
 485:tmk_core/common/command.c ****             switch_default_layer(3);
 486:tmk_core/common/command.c ****             break;
 487:tmk_core/common/command.c **** 
 488:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER4):
 489:tmk_core/common/command.c ****             switch_default_layer(4);
 490:tmk_core/common/command.c ****             break;
 491:tmk_core/common/command.c **** 
 492:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER5):
 493:tmk_core/common/command.c ****             switch_default_layer(5);
 494:tmk_core/common/command.c ****             break;
 495:tmk_core/common/command.c **** 
 496:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER6):
 497:tmk_core/common/command.c ****             switch_default_layer(6);
 498:tmk_core/common/command.c ****             break;
 499:tmk_core/common/command.c **** 
 500:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER7):
 501:tmk_core/common/command.c ****             switch_default_layer(7);
 502:tmk_core/common/command.c ****             break;
 503:tmk_core/common/command.c **** 
 504:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER8):
 505:tmk_core/common/command.c ****             switch_default_layer(8);
 506:tmk_core/common/command.c ****             break;
 507:tmk_core/common/command.c **** 
 508:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER9):
 509:tmk_core/common/command.c ****             switch_default_layer(9);
 510:tmk_core/common/command.c ****             break;
 511:tmk_core/common/command.c **** #endif
 512:tmk_core/common/command.c **** 
 513:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 514:tmk_core/common/command.c **** 
 515:tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 516:tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 517:tmk_core/common/command.c ****             break;
 518:tmk_core/common/command.c ****         case KC_F10:
 519:tmk_core/common/command.c ****             switch_default_layer(0);
 520:tmk_core/common/command.c ****             break;
 521:tmk_core/common/command.c **** #endif
 522:tmk_core/common/command.c **** 
 523:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 524:tmk_core/common/command.c **** 
 525:tmk_core/common/command.c ****         case KC_1 ... KC_9:
 526:tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 527:tmk_core/common/command.c ****             break;
 528:tmk_core/common/command.c ****         case KC_0:
 529:tmk_core/common/command.c ****             switch_default_layer(0);
 530:tmk_core/common/command.c ****             break;
 531:tmk_core/common/command.c **** #endif
 532:tmk_core/common/command.c **** 
 533:tmk_core/common/command.c ****         default:
 534:tmk_core/common/command.c ****             print("?");
 535:tmk_core/common/command.c ****             return false;
 536:tmk_core/common/command.c ****     }
 537:tmk_core/common/command.c ****     return true;
 538:tmk_core/common/command.c **** }
 539:tmk_core/common/command.c **** 
 540:tmk_core/common/command.c **** /***********************************************************
 541:tmk_core/common/command.c ****  * Command console
 542:tmk_core/common/command.c ****  ***********************************************************/
 543:tmk_core/common/command.c **** static void command_console_help(void) {
 544:tmk_core/common/command.c ****     print("\n\t- Console -\n"
 545:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 546:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 547:tmk_core/common/command.c ****           "m:	mousekey\n"
 548:tmk_core/common/command.c **** #endif
 549:tmk_core/common/command.c ****     );
 550:tmk_core/common/command.c **** }
 551:tmk_core/common/command.c **** 
 552:tmk_core/common/command.c **** static bool command_console(uint8_t code) {
 553:tmk_core/common/command.c ****     switch (code) {
 554:tmk_core/common/command.c ****         case KC_H:
 555:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 556:tmk_core/common/command.c ****             command_console_help();
 557:tmk_core/common/command.c ****             break;
 558:tmk_core/common/command.c ****         case KC_Q:
 559:tmk_core/common/command.c ****         case KC_ESC:
 560:tmk_core/common/command.c ****             command_state = ONESHOT;
 561:tmk_core/common/command.c ****             return false;
 562:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 563:tmk_core/common/command.c ****         case KC_M:
 564:tmk_core/common/command.c ****             mousekey_console_help();
 565:tmk_core/common/command.c ****             print("M> ");
 566:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 567:tmk_core/common/command.c ****             return true;
 568:tmk_core/common/command.c **** #endif
 569:tmk_core/common/command.c ****         default:
 570:tmk_core/common/command.c ****             print("?");
 571:tmk_core/common/command.c ****             return false;
 572:tmk_core/common/command.c ****     }
 573:tmk_core/common/command.c ****     print("C> ");
 574:tmk_core/common/command.c ****     return true;
 575:tmk_core/common/command.c **** }
 576:tmk_core/common/command.c **** 
 577:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 578:tmk_core/common/command.c **** /***********************************************************
 579:tmk_core/common/command.c ****  * Mousekey console
 580:tmk_core/common/command.c ****  ***********************************************************/
 581:tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 582:tmk_core/common/command.c **** 
 583:tmk_core/common/command.c **** static void mousekey_param_print(void) {
 584:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 585:tmk_core/common/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 586:tmk_core/common/command.c ****     print("\n\t- Values -\n");
 587:tmk_core/common/command.c ****     print("1: delay(*10ms): ");
 588:tmk_core/common/command.c ****     pdec(mk_delay);
 589:tmk_core/common/command.c ****     print("\n");
 590:tmk_core/common/command.c ****     print("2: interval(ms): ");
 591:tmk_core/common/command.c ****     pdec(mk_interval);
 592:tmk_core/common/command.c ****     print("\n");
 593:tmk_core/common/command.c ****     print("3: max_speed: ");
 594:tmk_core/common/command.c ****     pdec(mk_max_speed);
 595:tmk_core/common/command.c ****     print("\n");
 596:tmk_core/common/command.c ****     print("4: time_to_max: ");
 597:tmk_core/common/command.c ****     pdec(mk_time_to_max);
 598:tmk_core/common/command.c ****     print("\n");
 599:tmk_core/common/command.c ****     print("5: wheel_max_speed: ");
 600:tmk_core/common/command.c ****     pdec(mk_wheel_max_speed);
 601:tmk_core/common/command.c ****     print("\n");
 602:tmk_core/common/command.c ****     print("6: wheel_time_to_max: ");
 603:tmk_core/common/command.c ****     pdec(mk_wheel_time_to_max);
 604:tmk_core/common/command.c ****     print("\n");
 605:tmk_core/common/command.c **** #    endif /* !NO_PRINT */
 606:tmk_core/common/command.c **** }
 607:tmk_core/common/command.c **** 
 608:tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 609:tmk_core/common/command.c **** #    define PRINT_SET_VAL(v) xprintf(#    v " = %d\n", (v))
 610:tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc) {
 611:tmk_core/common/command.c ****     switch (param) {
 612:tmk_core/common/command.c ****         case 1:
 613:tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 614:tmk_core/common/command.c ****                 mk_delay += inc;
 615:tmk_core/common/command.c ****             else
 616:tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 617:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 618:tmk_core/common/command.c ****             break;
 619:tmk_core/common/command.c ****         case 2:
 620:tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 621:tmk_core/common/command.c ****                 mk_interval += inc;
 622:tmk_core/common/command.c ****             else
 623:tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 624:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 625:tmk_core/common/command.c ****             break;
 626:tmk_core/common/command.c ****         case 3:
 627:tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 628:tmk_core/common/command.c ****                 mk_max_speed += inc;
 629:tmk_core/common/command.c ****             else
 630:tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 631:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 632:tmk_core/common/command.c ****             break;
 633:tmk_core/common/command.c ****         case 4:
 634:tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 635:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 636:tmk_core/common/command.c ****             else
 637:tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 638:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 639:tmk_core/common/command.c ****             break;
 640:tmk_core/common/command.c ****         case 5:
 641:tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 642:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 643:tmk_core/common/command.c ****             else
 644:tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 645:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 646:tmk_core/common/command.c ****             break;
 647:tmk_core/common/command.c ****         case 6:
 648:tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 649:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 650:tmk_core/common/command.c ****             else
 651:tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 652:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 653:tmk_core/common/command.c ****             break;
 654:tmk_core/common/command.c ****     }
 655:tmk_core/common/command.c **** }
 656:tmk_core/common/command.c **** 
 657:tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec) {
 658:tmk_core/common/command.c ****     switch (param) {
 659:tmk_core/common/command.c ****         case 1:
 660:tmk_core/common/command.c ****             if (mk_delay > dec)
 661:tmk_core/common/command.c ****                 mk_delay -= dec;
 662:tmk_core/common/command.c ****             else
 663:tmk_core/common/command.c ****                 mk_delay = 0;
 664:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 665:tmk_core/common/command.c ****             break;
 666:tmk_core/common/command.c ****         case 2:
 667:tmk_core/common/command.c ****             if (mk_interval > dec)
 668:tmk_core/common/command.c ****                 mk_interval -= dec;
 669:tmk_core/common/command.c ****             else
 670:tmk_core/common/command.c ****                 mk_interval = 0;
 671:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 672:tmk_core/common/command.c ****             break;
 673:tmk_core/common/command.c ****         case 3:
 674:tmk_core/common/command.c ****             if (mk_max_speed > dec)
 675:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 676:tmk_core/common/command.c ****             else
 677:tmk_core/common/command.c ****                 mk_max_speed = 0;
 678:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 679:tmk_core/common/command.c ****             break;
 680:tmk_core/common/command.c ****         case 4:
 681:tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 682:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 683:tmk_core/common/command.c ****             else
 684:tmk_core/common/command.c ****                 mk_time_to_max = 0;
 685:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 686:tmk_core/common/command.c ****             break;
 687:tmk_core/common/command.c ****         case 5:
 688:tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 689:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 690:tmk_core/common/command.c ****             else
 691:tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 692:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 693:tmk_core/common/command.c ****             break;
 694:tmk_core/common/command.c ****         case 6:
 695:tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 696:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 697:tmk_core/common/command.c ****             else
 698:tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 699:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 700:tmk_core/common/command.c ****             break;
 701:tmk_core/common/command.c ****     }
 702:tmk_core/common/command.c **** }
 703:tmk_core/common/command.c **** 
 704:tmk_core/common/command.c **** static void mousekey_console_help(void) {
  15               		.loc 1 704 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 705:tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 705 0
  22 0000 80E0      		ldi r24,lo8(__c.3776)
  23 0002 90E0      		ldi r25,hi8(__c.3776)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 706:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 707:tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 708:tmk_core/common/command.c ****           "2:	interval(ms)\n"
 709:tmk_core/common/command.c ****           "3:	max_speed\n"
 710:tmk_core/common/command.c ****           "4:	time_to_max\n"
 711:tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 712:tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 713:tmk_core/common/command.c ****           "\n"
 714:tmk_core/common/command.c ****           "p:	print values\n"
 715:tmk_core/common/command.c ****           "d:	set defaults\n"
 716:tmk_core/common/command.c ****           "up:	+1\n"
 717:tmk_core/common/command.c ****           "down:	-1\n"
 718:tmk_core/common/command.c ****           "pgup:	+10\n"
 719:tmk_core/common/command.c ****           "pgdown:	-10\n"
 720:tmk_core/common/command.c ****           "\n"
 721:tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 722:tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
  26               		.loc 1 722 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.3778)
  42 0016 90E0      		ldi r25,hi8(__c.3778)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 723:tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n",
 724:tmk_core/common/command.c ****             MOUSEKEY_MOVE_DELTA, MOUSEKEY_WHEEL_DELTA);
 725:tmk_core/common/command.c **** }
  51               		.loc 1 725 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60 002c 0895      		ret
  61               		.cfi_endproc
  62               	.LFE32:
  64               		.section	.text.mousekey_param_inc,"ax",@progbits
  66               	mousekey_param_inc:
  67               	.LFB30:
 610:tmk_core/common/command.c ****     switch (param) {
  68               		.loc 1 610 0
  69               		.cfi_startproc
  70               	.LVL2:
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 611:tmk_core/common/command.c ****         case 1:
  75               		.loc 1 611 0
  76 0000 8330      		cpi r24,lo8(3)
  77 0002 01F0      		breq .L4
  78 0004 00F4      		brsh .L5
  79 0006 8130      		cpi r24,lo8(1)
  80 0008 01F0      		breq .L6
  81 000a 8230      		cpi r24,lo8(2)
  82 000c 01F0      		breq .L7
  83 000e 0895      		ret
  84               	.L5:
  85 0010 8530      		cpi r24,lo8(5)
  86 0012 01F4      		brne .+2
  87 0014 00C0      		rjmp .L8
  88 0016 00F4      		brsh .+2
  89 0018 00C0      		rjmp .L9
  90 001a 8630      		cpi r24,lo8(6)
  91 001c 01F4      		brne .+2
  92 001e 00C0      		rjmp .L10
  93 0020 0895      		ret
  94               	.L6:
 613:tmk_core/common/command.c ****                 mk_delay += inc;
  95               		.loc 1 613 0
  96 0022 8091 0000 		lds r24,mk_delay
  97               	.LVL3:
  98 0026 262F      		mov r18,r22
  99 0028 30E0      		ldi r19,0
 100 002a 280F      		add r18,r24
 101 002c 311D      		adc r19,__zero_reg__
 102 002e 2F3F      		cpi r18,-1
 103 0030 3105      		cpc r19,__zero_reg__
 104 0032 04F4      		brge .L11
 614:tmk_core/common/command.c ****             else
 105               		.loc 1 614 0
 106 0034 680F      		add r22,r24
 107               	.LVL4:
 108 0036 6093 0000 		sts mk_delay,r22
 109 003a 00C0      		rjmp .L12
 110               	.LVL5:
 111               	.L11:
 616:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 112               		.loc 1 616 0
 113 003c 8FEF      		ldi r24,lo8(-1)
 114 003e 8093 0000 		sts mk_delay,r24
 115               	.LVL6:
 116               	.L12:
 617:tmk_core/common/command.c ****             break;
 117               		.loc 1 617 0
 118 0042 8091 0000 		lds r24,mk_delay
 119 0046 1F92      		push __zero_reg__
 120               	.LCFI7:
 121               		.cfi_remember_state
 122               		.cfi_def_cfa_offset 3
 123 0048 8F93      		push r24
 124               	.LCFI8:
 125               		.cfi_def_cfa_offset 4
 126 004a 80E0      		ldi r24,lo8(__c.3732)
 127 004c 90E0      		ldi r25,hi8(__c.3732)
 128 004e 00C0      		rjmp .L23
 129               	.LVL7:
 130               	.L7:
 131               	.LCFI9:
 132               		.cfi_restore_state
 620:tmk_core/common/command.c ****                 mk_interval += inc;
 133               		.loc 1 620 0
 134 0050 8091 0000 		lds r24,mk_interval
 135               	.LVL8:
 136 0054 262F      		mov r18,r22
 137 0056 30E0      		ldi r19,0
 138 0058 280F      		add r18,r24
 139 005a 311D      		adc r19,__zero_reg__
 140 005c 2F3F      		cpi r18,-1
 141 005e 3105      		cpc r19,__zero_reg__
 142 0060 04F4      		brge .L13
 621:tmk_core/common/command.c ****             else
 143               		.loc 1 621 0
 144 0062 680F      		add r22,r24
 145               	.LVL9:
 146 0064 6093 0000 		sts mk_interval,r22
 147 0068 00C0      		rjmp .L14
 148               	.LVL10:
 149               	.L13:
 623:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 150               		.loc 1 623 0
 151 006a 8FEF      		ldi r24,lo8(-1)
 152 006c 8093 0000 		sts mk_interval,r24
 153               	.LVL11:
 154               	.L14:
 624:tmk_core/common/command.c ****             break;
 155               		.loc 1 624 0
 156 0070 8091 0000 		lds r24,mk_interval
 157 0074 1F92      		push __zero_reg__
 158               	.LCFI10:
 159               		.cfi_remember_state
 160               		.cfi_def_cfa_offset 3
 161 0076 8F93      		push r24
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 4
 164 0078 80E0      		ldi r24,lo8(__c.3736)
 165 007a 90E0      		ldi r25,hi8(__c.3736)
 166 007c 00C0      		rjmp .L23
 167               	.LVL12:
 168               	.L4:
 169               	.LCFI12:
 170               		.cfi_restore_state
 627:tmk_core/common/command.c ****                 mk_max_speed += inc;
 171               		.loc 1 627 0
 172 007e 8091 0000 		lds r24,mk_max_speed
 173               	.LVL13:
 174 0082 262F      		mov r18,r22
 175 0084 30E0      		ldi r19,0
 176 0086 280F      		add r18,r24
 177 0088 311D      		adc r19,__zero_reg__
 178 008a 2F3F      		cpi r18,-1
 179 008c 3105      		cpc r19,__zero_reg__
 180 008e 04F4      		brge .L15
 628:tmk_core/common/command.c ****             else
 181               		.loc 1 628 0
 182 0090 680F      		add r22,r24
 183               	.LVL14:
 184 0092 6093 0000 		sts mk_max_speed,r22
 185 0096 00C0      		rjmp .L16
 186               	.LVL15:
 187               	.L15:
 630:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 188               		.loc 1 630 0
 189 0098 8FEF      		ldi r24,lo8(-1)
 190 009a 8093 0000 		sts mk_max_speed,r24
 191               	.LVL16:
 192               	.L16:
 631:tmk_core/common/command.c ****             break;
 193               		.loc 1 631 0
 194 009e 8091 0000 		lds r24,mk_max_speed
 195 00a2 1F92      		push __zero_reg__
 196               	.LCFI13:
 197               		.cfi_remember_state
 198               		.cfi_def_cfa_offset 3
 199 00a4 8F93      		push r24
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 4
 202 00a6 80E0      		ldi r24,lo8(__c.3739)
 203 00a8 90E0      		ldi r25,hi8(__c.3739)
 204 00aa 00C0      		rjmp .L23
 205               	.LVL17:
 206               	.L9:
 207               	.LCFI15:
 208               		.cfi_restore_state
 634:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 209               		.loc 1 634 0
 210 00ac 8091 0000 		lds r24,mk_time_to_max
 211               	.LVL18:
 212 00b0 262F      		mov r18,r22
 213 00b2 30E0      		ldi r19,0
 214 00b4 280F      		add r18,r24
 215 00b6 311D      		adc r19,__zero_reg__
 216 00b8 2F3F      		cpi r18,-1
 217 00ba 3105      		cpc r19,__zero_reg__
 218 00bc 04F4      		brge .L17
 635:tmk_core/common/command.c ****             else
 219               		.loc 1 635 0
 220 00be 680F      		add r22,r24
 221               	.LVL19:
 222 00c0 6093 0000 		sts mk_time_to_max,r22
 223 00c4 00C0      		rjmp .L18
 224               	.LVL20:
 225               	.L17:
 637:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 226               		.loc 1 637 0
 227 00c6 8FEF      		ldi r24,lo8(-1)
 228 00c8 8093 0000 		sts mk_time_to_max,r24
 229               	.LVL21:
 230               	.L18:
 638:tmk_core/common/command.c ****             break;
 231               		.loc 1 638 0
 232 00cc 8091 0000 		lds r24,mk_time_to_max
 233 00d0 1F92      		push __zero_reg__
 234               	.LCFI16:
 235               		.cfi_remember_state
 236               		.cfi_def_cfa_offset 3
 237 00d2 8F93      		push r24
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240 00d4 80E0      		ldi r24,lo8(__c.3742)
 241 00d6 90E0      		ldi r25,hi8(__c.3742)
 242 00d8 00C0      		rjmp .L23
 243               	.LVL22:
 244               	.L8:
 245               	.LCFI18:
 246               		.cfi_restore_state
 641:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 247               		.loc 1 641 0
 248 00da 8091 0000 		lds r24,mk_wheel_max_speed
 249               	.LVL23:
 250 00de 262F      		mov r18,r22
 251 00e0 30E0      		ldi r19,0
 252 00e2 280F      		add r18,r24
 253 00e4 311D      		adc r19,__zero_reg__
 254 00e6 2F3F      		cpi r18,-1
 255 00e8 3105      		cpc r19,__zero_reg__
 256 00ea 04F4      		brge .L19
 642:tmk_core/common/command.c ****             else
 257               		.loc 1 642 0
 258 00ec 680F      		add r22,r24
 259               	.LVL24:
 260 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 261 00f2 00C0      		rjmp .L20
 262               	.LVL25:
 263               	.L19:
 644:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 264               		.loc 1 644 0
 265 00f4 8FEF      		ldi r24,lo8(-1)
 266 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 267               	.LVL26:
 268               	.L20:
 645:tmk_core/common/command.c ****             break;
 269               		.loc 1 645 0
 270 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 271 00fe 1F92      		push __zero_reg__
 272               	.LCFI19:
 273               		.cfi_remember_state
 274               		.cfi_def_cfa_offset 3
 275 0100 8F93      		push r24
 276               	.LCFI20:
 277               		.cfi_def_cfa_offset 4
 278 0102 80E0      		ldi r24,lo8(__c.3745)
 279 0104 90E0      		ldi r25,hi8(__c.3745)
 280 0106 00C0      		rjmp .L23
 281               	.LVL27:
 282               	.L10:
 283               	.LCFI21:
 284               		.cfi_restore_state
 648:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 285               		.loc 1 648 0
 286 0108 8091 0000 		lds r24,mk_wheel_time_to_max
 287               	.LVL28:
 288 010c 262F      		mov r18,r22
 289 010e 30E0      		ldi r19,0
 290 0110 280F      		add r18,r24
 291 0112 311D      		adc r19,__zero_reg__
 292 0114 2F3F      		cpi r18,-1
 293 0116 3105      		cpc r19,__zero_reg__
 294 0118 04F4      		brge .L21
 649:tmk_core/common/command.c ****             else
 295               		.loc 1 649 0
 296 011a 680F      		add r22,r24
 297               	.LVL29:
 298 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 299 0120 00C0      		rjmp .L22
 300               	.LVL30:
 301               	.L21:
 651:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 302               		.loc 1 651 0
 303 0122 8FEF      		ldi r24,lo8(-1)
 304 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 305               	.LVL31:
 306               	.L22:
 652:tmk_core/common/command.c ****             break;
 307               		.loc 1 652 0
 308 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 309 012c 1F92      		push __zero_reg__
 310               	.LCFI22:
 311               		.cfi_def_cfa_offset 3
 312 012e 8F93      		push r24
 313               	.LCFI23:
 314               		.cfi_def_cfa_offset 4
 315 0130 80E0      		ldi r24,lo8(__c.3748)
 316 0132 90E0      		ldi r25,hi8(__c.3748)
 317               	.L23:
 318 0134 9F93      		push r25
 319               	.LCFI24:
 320               		.cfi_def_cfa_offset 5
 321 0136 8F93      		push r24
 322               	.LCFI25:
 323               		.cfi_def_cfa_offset 6
 324 0138 0E94 0000 		call __xprintf
 325               	.LVL32:
 653:tmk_core/common/command.c ****     }
 326               		.loc 1 653 0
 327 013c 0F90      		pop __tmp_reg__
 328 013e 0F90      		pop __tmp_reg__
 329 0140 0F90      		pop __tmp_reg__
 330 0142 0F90      		pop __tmp_reg__
 331               	.LCFI26:
 332               		.cfi_def_cfa_offset 2
 333 0144 0895      		ret
 334               		.cfi_endproc
 335               	.LFE30:
 337               		.section	.text.mousekey_param_dec,"ax",@progbits
 339               	mousekey_param_dec:
 340               	.LFB31:
 657:tmk_core/common/command.c ****     switch (param) {
 341               		.loc 1 657 0
 342               		.cfi_startproc
 343               	.LVL33:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 658:tmk_core/common/command.c ****         case 1:
 348               		.loc 1 658 0
 349 0000 8330      		cpi r24,lo8(3)
 350 0002 01F0      		breq .L27
 351 0004 00F4      		brsh .L28
 352 0006 8130      		cpi r24,lo8(1)
 353 0008 01F0      		breq .L29
 354 000a 8230      		cpi r24,lo8(2)
 355 000c 01F0      		breq .L30
 356 000e 0895      		ret
 357               	.L28:
 358 0010 8530      		cpi r24,lo8(5)
 359 0012 01F4      		brne .+2
 360 0014 00C0      		rjmp .L31
 361 0016 00F0      		brlo .L32
 362 0018 8630      		cpi r24,lo8(6)
 363 001a 01F4      		brne .+2
 364 001c 00C0      		rjmp .L33
 365 001e 0895      		ret
 366               	.L29:
 660:tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 660 0
 368 0020 8091 0000 		lds r24,mk_delay
 369               	.LVL34:
 370 0024 6817      		cp r22,r24
 371 0026 00F4      		brsh .L34
 661:tmk_core/common/command.c ****             else
 372               		.loc 1 661 0
 373 0028 861B      		sub r24,r22
 374 002a 8093 0000 		sts mk_delay,r24
 375 002e 00C0      		rjmp .L35
 376               	.L34:
 663:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 377               		.loc 1 663 0
 378 0030 1092 0000 		sts mk_delay,__zero_reg__
 379               	.L35:
 664:tmk_core/common/command.c ****             break;
 380               		.loc 1 664 0
 381 0034 8091 0000 		lds r24,mk_delay
 382 0038 1F92      		push __zero_reg__
 383               	.LCFI27:
 384               		.cfi_remember_state
 385               		.cfi_def_cfa_offset 3
 386 003a 8F93      		push r24
 387               	.LCFI28:
 388               		.cfi_def_cfa_offset 4
 389 003c 80E0      		ldi r24,lo8(__c.3755)
 390 003e 90E0      		ldi r25,hi8(__c.3755)
 391 0040 00C0      		rjmp .L46
 392               	.LVL35:
 393               	.L30:
 394               	.LCFI29:
 395               		.cfi_restore_state
 667:tmk_core/common/command.c ****                 mk_interval -= dec;
 396               		.loc 1 667 0
 397 0042 8091 0000 		lds r24,mk_interval
 398               	.LVL36:
 399 0046 6817      		cp r22,r24
 400 0048 00F4      		brsh .L36
 668:tmk_core/common/command.c ****             else
 401               		.loc 1 668 0
 402 004a 861B      		sub r24,r22
 403 004c 8093 0000 		sts mk_interval,r24
 404 0050 00C0      		rjmp .L37
 405               	.L36:
 670:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 406               		.loc 1 670 0
 407 0052 1092 0000 		sts mk_interval,__zero_reg__
 408               	.L37:
 671:tmk_core/common/command.c ****             break;
 409               		.loc 1 671 0
 410 0056 8091 0000 		lds r24,mk_interval
 411 005a 1F92      		push __zero_reg__
 412               	.LCFI30:
 413               		.cfi_remember_state
 414               		.cfi_def_cfa_offset 3
 415 005c 8F93      		push r24
 416               	.LCFI31:
 417               		.cfi_def_cfa_offset 4
 418 005e 80E0      		ldi r24,lo8(__c.3759)
 419 0060 90E0      		ldi r25,hi8(__c.3759)
 420 0062 00C0      		rjmp .L46
 421               	.LVL37:
 422               	.L27:
 423               	.LCFI32:
 424               		.cfi_restore_state
 674:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 425               		.loc 1 674 0
 426 0064 8091 0000 		lds r24,mk_max_speed
 427               	.LVL38:
 428 0068 6817      		cp r22,r24
 429 006a 00F4      		brsh .L38
 675:tmk_core/common/command.c ****             else
 430               		.loc 1 675 0
 431 006c 861B      		sub r24,r22
 432 006e 8093 0000 		sts mk_max_speed,r24
 433 0072 00C0      		rjmp .L39
 434               	.L38:
 677:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 435               		.loc 1 677 0
 436 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 437               	.L39:
 678:tmk_core/common/command.c ****             break;
 438               		.loc 1 678 0
 439 0078 8091 0000 		lds r24,mk_max_speed
 440 007c 1F92      		push __zero_reg__
 441               	.LCFI33:
 442               		.cfi_remember_state
 443               		.cfi_def_cfa_offset 3
 444 007e 8F93      		push r24
 445               	.LCFI34:
 446               		.cfi_def_cfa_offset 4
 447 0080 80E0      		ldi r24,lo8(__c.3762)
 448 0082 90E0      		ldi r25,hi8(__c.3762)
 449 0084 00C0      		rjmp .L46
 450               	.LVL39:
 451               	.L32:
 452               	.LCFI35:
 453               		.cfi_restore_state
 681:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 454               		.loc 1 681 0
 455 0086 8091 0000 		lds r24,mk_time_to_max
 456               	.LVL40:
 457 008a 6817      		cp r22,r24
 458 008c 00F4      		brsh .L40
 682:tmk_core/common/command.c ****             else
 459               		.loc 1 682 0
 460 008e 861B      		sub r24,r22
 461 0090 8093 0000 		sts mk_time_to_max,r24
 462 0094 00C0      		rjmp .L41
 463               	.L40:
 684:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 464               		.loc 1 684 0
 465 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 466               	.L41:
 685:tmk_core/common/command.c ****             break;
 467               		.loc 1 685 0
 468 009a 8091 0000 		lds r24,mk_time_to_max
 469 009e 1F92      		push __zero_reg__
 470               	.LCFI36:
 471               		.cfi_remember_state
 472               		.cfi_def_cfa_offset 3
 473 00a0 8F93      		push r24
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476 00a2 80E0      		ldi r24,lo8(__c.3765)
 477 00a4 90E0      		ldi r25,hi8(__c.3765)
 478 00a6 00C0      		rjmp .L46
 479               	.LVL41:
 480               	.L31:
 481               	.LCFI38:
 482               		.cfi_restore_state
 688:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 483               		.loc 1 688 0
 484 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 485               	.LVL42:
 486 00ac 6817      		cp r22,r24
 487 00ae 00F4      		brsh .L42
 689:tmk_core/common/command.c ****             else
 488               		.loc 1 689 0
 489 00b0 861B      		sub r24,r22
 490 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 491 00b6 00C0      		rjmp .L43
 492               	.L42:
 691:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 493               		.loc 1 691 0
 494 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 495               	.L43:
 692:tmk_core/common/command.c ****             break;
 496               		.loc 1 692 0
 497 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 498 00c0 1F92      		push __zero_reg__
 499               	.LCFI39:
 500               		.cfi_remember_state
 501               		.cfi_def_cfa_offset 3
 502 00c2 8F93      		push r24
 503               	.LCFI40:
 504               		.cfi_def_cfa_offset 4
 505 00c4 80E0      		ldi r24,lo8(__c.3768)
 506 00c6 90E0      		ldi r25,hi8(__c.3768)
 507 00c8 00C0      		rjmp .L46
 508               	.LVL43:
 509               	.L33:
 510               	.LCFI41:
 511               		.cfi_restore_state
 695:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 512               		.loc 1 695 0
 513 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 514               	.LVL44:
 515 00ce 6817      		cp r22,r24
 516 00d0 00F4      		brsh .L44
 696:tmk_core/common/command.c ****             else
 517               		.loc 1 696 0
 518 00d2 861B      		sub r24,r22
 519 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 520 00d8 00C0      		rjmp .L45
 521               	.L44:
 698:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 522               		.loc 1 698 0
 523 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 524               	.L45:
 699:tmk_core/common/command.c ****             break;
 525               		.loc 1 699 0
 526 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 527 00e2 1F92      		push __zero_reg__
 528               	.LCFI42:
 529               		.cfi_def_cfa_offset 3
 530 00e4 8F93      		push r24
 531               	.LCFI43:
 532               		.cfi_def_cfa_offset 4
 533 00e6 80E0      		ldi r24,lo8(__c.3771)
 534 00e8 90E0      		ldi r25,hi8(__c.3771)
 535               	.L46:
 536 00ea 9F93      		push r25
 537               	.LCFI44:
 538               		.cfi_def_cfa_offset 5
 539 00ec 8F93      		push r24
 540               	.LCFI45:
 541               		.cfi_def_cfa_offset 6
 542 00ee 0E94 0000 		call __xprintf
 543               	.LVL45:
 700:tmk_core/common/command.c ****     }
 544               		.loc 1 700 0
 545 00f2 0F90      		pop __tmp_reg__
 546 00f4 0F90      		pop __tmp_reg__
 547 00f6 0F90      		pop __tmp_reg__
 548 00f8 0F90      		pop __tmp_reg__
 549               	.LCFI46:
 550               		.cfi_def_cfa_offset 2
 551 00fa 0895      		ret
 552               		.cfi_endproc
 553               	.LFE31:
 555               		.section	.text.switch_default_layer,"ax",@progbits
 557               	switch_default_layer:
 558               	.LFB35:
 726:tmk_core/common/command.c **** 
 727:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code) {
 728:tmk_core/common/command.c ****     switch (code) {
 729:tmk_core/common/command.c ****         case KC_H:
 730:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 731:tmk_core/common/command.c ****             mousekey_console_help();
 732:tmk_core/common/command.c ****             break;
 733:tmk_core/common/command.c ****         case KC_Q:
 734:tmk_core/common/command.c ****         case KC_ESC:
 735:tmk_core/common/command.c ****             if (mousekey_param) {
 736:tmk_core/common/command.c ****                 mousekey_param = 0;
 737:tmk_core/common/command.c ****             } else {
 738:tmk_core/common/command.c ****                 print("C> ");
 739:tmk_core/common/command.c ****                 command_state = CONSOLE;
 740:tmk_core/common/command.c ****                 return false;
 741:tmk_core/common/command.c ****             }
 742:tmk_core/common/command.c ****             break;
 743:tmk_core/common/command.c ****         case KC_P:
 744:tmk_core/common/command.c ****             mousekey_param_print();
 745:tmk_core/common/command.c ****             break;
 746:tmk_core/common/command.c ****         case KC_1:
 747:tmk_core/common/command.c ****         case KC_2:
 748:tmk_core/common/command.c ****         case KC_3:
 749:tmk_core/common/command.c ****         case KC_4:
 750:tmk_core/common/command.c ****         case KC_5:
 751:tmk_core/common/command.c ****         case KC_6:
 752:tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 753:tmk_core/common/command.c ****             break;
 754:tmk_core/common/command.c ****         case KC_UP:
 755:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 756:tmk_core/common/command.c ****             break;
 757:tmk_core/common/command.c ****         case KC_DOWN:
 758:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 759:tmk_core/common/command.c ****             break;
 760:tmk_core/common/command.c ****         case KC_PGUP:
 761:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 762:tmk_core/common/command.c ****             break;
 763:tmk_core/common/command.c ****         case KC_PGDN:
 764:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 765:tmk_core/common/command.c ****             break;
 766:tmk_core/common/command.c ****         case KC_D:
 767:tmk_core/common/command.c ****             mk_delay             = MOUSEKEY_DELAY / 10;
 768:tmk_core/common/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 769:tmk_core/common/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 770:tmk_core/common/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 771:tmk_core/common/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 772:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 773:tmk_core/common/command.c ****             print("set default\n");
 774:tmk_core/common/command.c ****             break;
 775:tmk_core/common/command.c ****         default:
 776:tmk_core/common/command.c ****             print("?");
 777:tmk_core/common/command.c ****             return false;
 778:tmk_core/common/command.c ****     }
 779:tmk_core/common/command.c ****     if (mousekey_param) {
 780:tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 781:tmk_core/common/command.c ****     } else {
 782:tmk_core/common/command.c ****         print("M>");
 783:tmk_core/common/command.c ****     }
 784:tmk_core/common/command.c ****     return true;
 785:tmk_core/common/command.c **** }
 786:tmk_core/common/command.c **** #endif
 787:tmk_core/common/command.c **** 
 788:tmk_core/common/command.c **** /***********************************************************
 789:tmk_core/common/command.c ****  * Utilities
 790:tmk_core/common/command.c ****  ***********************************************************/
 791:tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code) {
 792:tmk_core/common/command.c ****     switch (code) {
 793:tmk_core/common/command.c ****         case KC_1:
 794:tmk_core/common/command.c ****             return 1;
 795:tmk_core/common/command.c ****         case KC_2:
 796:tmk_core/common/command.c ****             return 2;
 797:tmk_core/common/command.c ****         case KC_3:
 798:tmk_core/common/command.c ****             return 3;
 799:tmk_core/common/command.c ****         case KC_4:
 800:tmk_core/common/command.c ****             return 4;
 801:tmk_core/common/command.c ****         case KC_5:
 802:tmk_core/common/command.c ****             return 5;
 803:tmk_core/common/command.c ****         case KC_6:
 804:tmk_core/common/command.c ****             return 6;
 805:tmk_core/common/command.c ****         case KC_7:
 806:tmk_core/common/command.c ****             return 7;
 807:tmk_core/common/command.c ****         case KC_8:
 808:tmk_core/common/command.c ****             return 8;
 809:tmk_core/common/command.c ****         case KC_9:
 810:tmk_core/common/command.c ****             return 9;
 811:tmk_core/common/command.c ****         case KC_0:
 812:tmk_core/common/command.c ****             return 0;
 813:tmk_core/common/command.c ****     }
 814:tmk_core/common/command.c ****     return 0;
 815:tmk_core/common/command.c **** }
 816:tmk_core/common/command.c **** 
 817:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer) {
 559               		.loc 1 817 0
 560               		.cfi_startproc
 561               	.LVL46:
 562 0000 CF93      		push r28
 563               	.LCFI47:
 564               		.cfi_def_cfa_offset 3
 565               		.cfi_offset 28, -2
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 1 */
 569               	.L__stack_usage = 1
 570 0002 C82F      		mov r28,r24
 818:tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 571               		.loc 1 818 0
 572 0004 1F92      		push __zero_reg__
 573               	.LCFI48:
 574               		.cfi_def_cfa_offset 4
 575 0006 8F93      		push r24
 576               	.LCFI49:
 577               		.cfi_def_cfa_offset 5
 578 0008 80E0      		ldi r24,lo8(__c.3827)
 579 000a 90E0      		ldi r25,hi8(__c.3827)
 580               	.LVL47:
 581 000c 9F93      		push r25
 582               	.LCFI50:
 583               		.cfi_def_cfa_offset 6
 584 000e 8F93      		push r24
 585               	.LCFI51:
 586               		.cfi_def_cfa_offset 7
 587 0010 0E94 0000 		call __xprintf
 588               	.LVL48:
 819:tmk_core/common/command.c ****     default_layer_set(1UL << layer);
 589               		.loc 1 819 0
 590 0014 81E0      		ldi r24,lo8(1)
 591 0016 90E0      		ldi r25,0
 592 0018 A0E0      		ldi r26,0
 593 001a B0E0      		ldi r27,0
 594 001c BC01      		movw r22,r24
 595 001e CD01      		movw r24,r26
 596 0020 00C0      		rjmp 2f
 597               		1:
 598 0022 660F      		lsl r22
 599 0024 771F      		rol r23
 600 0026 881F      		rol r24
 601 0028 991F      		rol r25
 602               		2:
 603 002a CA95      		dec r28
 604 002c 02F4      		brpl 1b
 605 002e 0E94 0000 		call default_layer_set
 606               	.LVL49:
 820:tmk_core/common/command.c ****     clear_keyboard();
 607               		.loc 1 820 0
 608 0032 0F90      		pop __tmp_reg__
 609 0034 0F90      		pop __tmp_reg__
 610 0036 0F90      		pop __tmp_reg__
 611 0038 0F90      		pop __tmp_reg__
 612               	.LCFI52:
 613               		.cfi_def_cfa_offset 3
 614               	/* epilogue start */
 821:tmk_core/common/command.c **** }
 615               		.loc 1 821 0
 616 003a CF91      		pop r28
 617               	.LVL50:
 820:tmk_core/common/command.c ****     clear_keyboard();
 618               		.loc 1 820 0
 619 003c 0C94 0000 		jmp clear_keyboard
 620               	.LVL51:
 621               		.cfi_endproc
 622               	.LFE35:
 624               		.section	.text.command_common,"ax",@progbits
 626               	command_common:
 627               	.LFB26:
 319:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 628               		.loc 1 319 0
 629               		.cfi_startproc
 630 0000 CF93      		push r28
 631               	.LCFI53:
 632               		.cfi_def_cfa_offset 3
 633               		.cfi_offset 28, -2
 634 0002 DF93      		push r29
 635               	.LCFI54:
 636               		.cfi_def_cfa_offset 4
 637               		.cfi_offset 29, -3
 638               	/* prologue: function */
 639               	/* frame size = 0 */
 640               	/* stack size = 2 */
 641               	.L__stack_usage = 2
 324:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 642               		.loc 1 324 0
 643 0004 8B31      		cpi r24,lo8(27)
 644 0006 01F4      		brne .+2
 645 0008 00C0      		rjmp .L50
 646 000a 00F0      		brlo .+2
 647 000c 00C0      		rjmp .L51
 648 000e 8B30      		cpi r24,lo8(11)
 649 0010 01F4      		brne .+2
 650 0012 00C0      		rjmp .L52
 651 0014 00F0      		brlo .+2
 652 0016 00C0      		rjmp .L53
 653 0018 8630      		cpi r24,lo8(6)
 654 001a 01F4      		brne .+2
 655 001c 00C0      		rjmp .L54
 656 001e 00F4      		brsh .L55
 657 0020 8530      		cpi r24,lo8(5)
 658 0022 01F4      		brne .+2
 659 0024 00C0      		rjmp .L56
 660 0026 00C0      		rjmp .L49
 661               	.L55:
 662 0028 8730      		cpi r24,lo8(7)
 663 002a 01F4      		brne .+2
 664 002c 00C0      		rjmp .L57
 665 002e 8830      		cpi r24,lo8(8)
 666 0030 01F0      		breq .+2
 667 0032 00C0      		rjmp .L49
 337:tmk_core/common/command.c ****             print_eeconfig();
 668               		.loc 1 337 0
 669 0034 80E0      		ldi r24,lo8(__c.3619)
 670 0036 90E0      		ldi r25,hi8(__c.3619)
 671 0038 0E94 0000 		call xputs
 672               	.LBB106:
 673               	.LBB107:
 244:tmk_core/common/command.c ****     print_dec(eeconfig_read_default_layer());
 674               		.loc 1 244 0
 675 003c 80E0      		ldi r24,lo8(__c.3511)
 676 003e 90E0      		ldi r25,hi8(__c.3511)
 677 0040 0E94 0000 		call xputs
 245:tmk_core/common/command.c ****     print("\n");
 678               		.loc 1 245 0
 679 0044 0E94 0000 		call eeconfig_read_default_layer
 680 0048 1F92      		push __zero_reg__
 681               	.LCFI55:
 682               		.cfi_def_cfa_offset 5
 683 004a 8F93      		push r24
 684               	.LCFI56:
 685               		.cfi_def_cfa_offset 6
 686 004c 80E0      		ldi r24,lo8(__c.3513)
 687 004e 90E0      		ldi r25,hi8(__c.3513)
 688 0050 9F93      		push r25
 689               	.LCFI57:
 690               		.cfi_def_cfa_offset 7
 691 0052 8F93      		push r24
 692               	.LCFI58:
 693               		.cfi_def_cfa_offset 8
 694 0054 0E94 0000 		call __xprintf
 246:tmk_core/common/command.c **** 
 695               		.loc 1 246 0
 696 0058 80E0      		ldi r24,lo8(__c.3515)
 697 005a 90E0      		ldi r25,hi8(__c.3515)
 698 005c 0E94 0000 		call xputs
 249:tmk_core/common/command.c ****     print("debug_config.raw: ");
 699               		.loc 1 249 0
 700 0060 0E94 0000 		call eeconfig_read_debug
 701 0064 C82F      		mov r28,r24
 250:tmk_core/common/command.c ****     print_hex8(dc.raw);
 702               		.loc 1 250 0
 703 0066 80E0      		ldi r24,lo8(__c.3518)
 704 0068 90E0      		ldi r25,hi8(__c.3518)
 705 006a 0E94 0000 		call xputs
 251:tmk_core/common/command.c ****     print("\n");
 706               		.loc 1 251 0
 707 006e 1F92      		push __zero_reg__
 708               	.LCFI59:
 709               		.cfi_def_cfa_offset 9
 710 0070 CF93      		push r28
 711               	.LCFI60:
 712               		.cfi_def_cfa_offset 10
 713 0072 80E0      		ldi r24,lo8(__c.3520)
 714 0074 90E0      		ldi r25,hi8(__c.3520)
 715 0076 9F93      		push r25
 716               	.LCFI61:
 717               		.cfi_def_cfa_offset 11
 718 0078 8F93      		push r24
 719               	.LCFI62:
 720               		.cfi_def_cfa_offset 12
 721 007a 0E94 0000 		call __xprintf
 252:tmk_core/common/command.c ****     print(".enable: ");
 722               		.loc 1 252 0
 723 007e 80E0      		ldi r24,lo8(__c.3522)
 724 0080 90E0      		ldi r25,hi8(__c.3522)
 725 0082 0E94 0000 		call xputs
 253:tmk_core/common/command.c ****     print_dec(dc.enable);
 726               		.loc 1 253 0
 727 0086 80E0      		ldi r24,lo8(__c.3524)
 728 0088 90E0      		ldi r25,hi8(__c.3524)
 729 008a 0E94 0000 		call xputs
 254:tmk_core/common/command.c ****     print("\n");
 730               		.loc 1 254 0
 731 008e 8C2F      		mov r24,r28
 732 0090 8170      		andi r24,1
 733 0092 1F92      		push __zero_reg__
 734               	.LCFI63:
 735               		.cfi_def_cfa_offset 13
 736 0094 8F93      		push r24
 737               	.LCFI64:
 738               		.cfi_def_cfa_offset 14
 739 0096 80E0      		ldi r24,lo8(__c.3526)
 740 0098 90E0      		ldi r25,hi8(__c.3526)
 741 009a 9F93      		push r25
 742               	.LCFI65:
 743               		.cfi_def_cfa_offset 15
 744 009c 8F93      		push r24
 745               	.LCFI66:
 746               		.cfi_def_cfa_offset 16
 747 009e 0E94 0000 		call __xprintf
 255:tmk_core/common/command.c ****     print(".matrix: ");
 748               		.loc 1 255 0
 749 00a2 80E0      		ldi r24,lo8(__c.3528)
 750 00a4 90E0      		ldi r25,hi8(__c.3528)
 751 00a6 0E94 0000 		call xputs
 256:tmk_core/common/command.c ****     print_dec(dc.matrix);
 752               		.loc 1 256 0
 753 00aa 80E0      		ldi r24,lo8(__c.3530)
 754 00ac 90E0      		ldi r25,hi8(__c.3530)
 755 00ae 0E94 0000 		call xputs
 257:tmk_core/common/command.c ****     print("\n");
 756               		.loc 1 257 0
 757 00b2 C1FB      		bst r28,1
 758 00b4 8827      		clr r24
 759 00b6 80F9      		bld r24,0
 760 00b8 1F92      		push __zero_reg__
 761               	.LCFI67:
 762               		.cfi_def_cfa_offset 17
 763 00ba 8F93      		push r24
 764               	.LCFI68:
 765               		.cfi_def_cfa_offset 18
 766 00bc 80E0      		ldi r24,lo8(__c.3532)
 767 00be 90E0      		ldi r25,hi8(__c.3532)
 768 00c0 9F93      		push r25
 769               	.LCFI69:
 770               		.cfi_def_cfa_offset 19
 771 00c2 8F93      		push r24
 772               	.LCFI70:
 773               		.cfi_def_cfa_offset 20
 774 00c4 0E94 0000 		call __xprintf
 258:tmk_core/common/command.c ****     print(".keyboard: ");
 775               		.loc 1 258 0
 776 00c8 80E0      		ldi r24,lo8(__c.3534)
 777 00ca 90E0      		ldi r25,hi8(__c.3534)
 778 00cc 0E94 0000 		call xputs
 259:tmk_core/common/command.c ****     print_dec(dc.keyboard);
 779               		.loc 1 259 0
 780 00d0 80E0      		ldi r24,lo8(__c.3536)
 781 00d2 90E0      		ldi r25,hi8(__c.3536)
 782 00d4 0E94 0000 		call xputs
 260:tmk_core/common/command.c ****     print("\n");
 783               		.loc 1 260 0
 784 00d8 C2FB      		bst r28,2
 785 00da 8827      		clr r24
 786 00dc 80F9      		bld r24,0
 787 00de 1F92      		push __zero_reg__
 788               	.LCFI71:
 789               		.cfi_def_cfa_offset 21
 790 00e0 8F93      		push r24
 791               	.LCFI72:
 792               		.cfi_def_cfa_offset 22
 793 00e2 80E0      		ldi r24,lo8(__c.3538)
 794 00e4 90E0      		ldi r25,hi8(__c.3538)
 795 00e6 9F93      		push r25
 796               	.LCFI73:
 797               		.cfi_def_cfa_offset 23
 798 00e8 8F93      		push r24
 799               	.LCFI74:
 800               		.cfi_def_cfa_offset 24
 801 00ea 0E94 0000 		call __xprintf
 261:tmk_core/common/command.c ****     print(".mouse: ");
 802               		.loc 1 261 0
 803 00ee 80E0      		ldi r24,lo8(__c.3540)
 804 00f0 90E0      		ldi r25,hi8(__c.3540)
 805 00f2 0E94 0000 		call xputs
 262:tmk_core/common/command.c ****     print_dec(dc.mouse);
 806               		.loc 1 262 0
 807 00f6 80E0      		ldi r24,lo8(__c.3542)
 808 00f8 90E0      		ldi r25,hi8(__c.3542)
 809 00fa 0E94 0000 		call xputs
 263:tmk_core/common/command.c ****     print("\n");
 810               		.loc 1 263 0
 811 00fe C3FB      		bst r28,3
 812 0100 CC27      		clr r28
 813 0102 C0F9      		bld r28,0
 814 0104 1F92      		push __zero_reg__
 815               	.LCFI75:
 816               		.cfi_def_cfa_offset 25
 817 0106 CF93      		push r28
 818               	.LCFI76:
 819               		.cfi_def_cfa_offset 26
 820 0108 80E0      		ldi r24,lo8(__c.3544)
 821 010a 90E0      		ldi r25,hi8(__c.3544)
 822 010c 9F93      		push r25
 823               	.LCFI77:
 824               		.cfi_def_cfa_offset 27
 825 010e 8F93      		push r24
 826               	.LCFI78:
 827               		.cfi_def_cfa_offset 28
 828 0110 0E94 0000 		call __xprintf
 264:tmk_core/common/command.c **** 
 829               		.loc 1 264 0
 830 0114 80E0      		ldi r24,lo8(__c.3546)
 831 0116 90E0      		ldi r25,hi8(__c.3546)
 832 0118 0E94 0000 		call xputs
 267:tmk_core/common/command.c ****     print("keymap_config.raw: ");
 833               		.loc 1 267 0
 834 011c 0E94 0000 		call eeconfig_read_keymap
 835 0120 EC01      		movw r28,r24
 268:tmk_core/common/command.c ****     print_hex8(kc.raw);
 836               		.loc 1 268 0
 837 0122 80E0      		ldi r24,lo8(__c.3549)
 838 0124 90E0      		ldi r25,hi8(__c.3549)
 839 0126 0E94 0000 		call xputs
 269:tmk_core/common/command.c ****     print("\n");
 840               		.loc 1 269 0
 841 012a DF93      		push r29
 842               	.LCFI79:
 843               		.cfi_def_cfa_offset 29
 844 012c CF93      		push r28
 845               	.LCFI80:
 846               		.cfi_def_cfa_offset 30
 847 012e 80E0      		ldi r24,lo8(__c.3551)
 848 0130 90E0      		ldi r25,hi8(__c.3551)
 849 0132 9F93      		push r25
 850               	.LCFI81:
 851               		.cfi_def_cfa_offset 31
 852 0134 8F93      		push r24
 853               	.LCFI82:
 854               		.cfi_def_cfa_offset 32
 855 0136 0E94 0000 		call __xprintf
 270:tmk_core/common/command.c ****     print(".swap_control_capslock: ");
 856               		.loc 1 270 0
 857 013a 80E0      		ldi r24,lo8(__c.3553)
 858 013c 90E0      		ldi r25,hi8(__c.3553)
 859 013e 0E94 0000 		call xputs
 271:tmk_core/common/command.c ****     print_dec(kc.swap_control_capslock);
 860               		.loc 1 271 0
 861 0142 80E0      		ldi r24,lo8(__c.3555)
 862 0144 90E0      		ldi r25,hi8(__c.3555)
 863 0146 0E94 0000 		call xputs
 272:tmk_core/common/command.c ****     print("\n");
 864               		.loc 1 272 0
 865 014a 8C2F      		mov r24,r28
 866 014c 8170      		andi r24,1
 867 014e 1F92      		push __zero_reg__
 868               	.LCFI83:
 869               		.cfi_def_cfa_offset 33
 870 0150 8F93      		push r24
 871               	.LCFI84:
 872               		.cfi_def_cfa_offset 34
 873 0152 80E0      		ldi r24,lo8(__c.3557)
 874 0154 90E0      		ldi r25,hi8(__c.3557)
 875 0156 9F93      		push r25
 876               	.LCFI85:
 877               		.cfi_def_cfa_offset 35
 878 0158 8F93      		push r24
 879               	.LCFI86:
 880               		.cfi_def_cfa_offset 36
 881 015a 0E94 0000 		call __xprintf
 273:tmk_core/common/command.c ****     print(".capslock_to_control: ");
 882               		.loc 1 273 0
 883 015e 8DB7      		in r24,__SP_L__
 884 0160 9EB7      		in r25,__SP_H__
 885 0162 8096      		adiw r24,32
 886 0164 0FB6      		in __tmp_reg__,__SREG__
 887 0166 F894      		cli
 888 0168 9EBF      		out __SP_H__,r25
 889 016a 0FBE      		out __SREG__,__tmp_reg__
 890 016c 8DBF      		out __SP_L__,r24
 891               	.LCFI87:
 892               		.cfi_def_cfa_offset 4
 893 016e 80E0      		ldi r24,lo8(__c.3559)
 894 0170 90E0      		ldi r25,hi8(__c.3559)
 895 0172 0E94 0000 		call xputs
 274:tmk_core/common/command.c ****     print_dec(kc.capslock_to_control);
 896               		.loc 1 274 0
 897 0176 80E0      		ldi r24,lo8(__c.3561)
 898 0178 90E0      		ldi r25,hi8(__c.3561)
 899 017a 0E94 0000 		call xputs
 275:tmk_core/common/command.c ****     print("\n");
 900               		.loc 1 275 0
 901 017e C1FB      		bst r28,1
 902 0180 8827      		clr r24
 903 0182 80F9      		bld r24,0
 904 0184 1F92      		push __zero_reg__
 905               	.LCFI88:
 906               		.cfi_def_cfa_offset 5
 907 0186 8F93      		push r24
 908               	.LCFI89:
 909               		.cfi_def_cfa_offset 6
 910 0188 80E0      		ldi r24,lo8(__c.3563)
 911 018a 90E0      		ldi r25,hi8(__c.3563)
 912 018c 9F93      		push r25
 913               	.LCFI90:
 914               		.cfi_def_cfa_offset 7
 915 018e 8F93      		push r24
 916               	.LCFI91:
 917               		.cfi_def_cfa_offset 8
 918 0190 0E94 0000 		call __xprintf
 276:tmk_core/common/command.c ****     print(".swap_lctl_lgui: ");
 919               		.loc 1 276 0
 920 0194 80E0      		ldi r24,lo8(__c.3565)
 921 0196 90E0      		ldi r25,hi8(__c.3565)
 922 0198 0E94 0000 		call xputs
 277:tmk_core/common/command.c ****     print_dec(kc.swap_lctl_lgui);
 923               		.loc 1 277 0
 924 019c 80E0      		ldi r24,lo8(__c.3567)
 925 019e 90E0      		ldi r25,hi8(__c.3567)
 926 01a0 0E94 0000 		call xputs
 278:tmk_core/common/command.c ****     print("\n");
 927               		.loc 1 278 0
 928 01a4 8D2F      		mov r24,r29
 929 01a6 8170      		andi r24,1
 930 01a8 1F92      		push __zero_reg__
 931               	.LCFI92:
 932               		.cfi_def_cfa_offset 9
 933 01aa 8F93      		push r24
 934               	.LCFI93:
 935               		.cfi_def_cfa_offset 10
 936 01ac 80E0      		ldi r24,lo8(__c.3569)
 937 01ae 90E0      		ldi r25,hi8(__c.3569)
 938 01b0 9F93      		push r25
 939               	.LCFI94:
 940               		.cfi_def_cfa_offset 11
 941 01b2 8F93      		push r24
 942               	.LCFI95:
 943               		.cfi_def_cfa_offset 12
 944 01b4 0E94 0000 		call __xprintf
 279:tmk_core/common/command.c ****     print(".swap_rctl_rgui: ");
 945               		.loc 1 279 0
 946 01b8 80E0      		ldi r24,lo8(__c.3571)
 947 01ba 90E0      		ldi r25,hi8(__c.3571)
 948 01bc 0E94 0000 		call xputs
 280:tmk_core/common/command.c ****     print_dec(kc.swap_rctl_rgui);
 949               		.loc 1 280 0
 950 01c0 80E0      		ldi r24,lo8(__c.3573)
 951 01c2 90E0      		ldi r25,hi8(__c.3573)
 952 01c4 0E94 0000 		call xputs
 281:tmk_core/common/command.c ****     print("\n");
 953               		.loc 1 281 0
 954 01c8 D695      		lsr r29
 955 01ca D170      		andi r29,1
 956 01cc 1F92      		push __zero_reg__
 957               	.LCFI96:
 958               		.cfi_def_cfa_offset 13
 959 01ce DF93      		push r29
 960               	.LCFI97:
 961               		.cfi_def_cfa_offset 14
 962 01d0 80E0      		ldi r24,lo8(__c.3575)
 963 01d2 90E0      		ldi r25,hi8(__c.3575)
 964 01d4 9F93      		push r25
 965               	.LCFI98:
 966               		.cfi_def_cfa_offset 15
 967 01d6 8F93      		push r24
 968               	.LCFI99:
 969               		.cfi_def_cfa_offset 16
 970 01d8 0E94 0000 		call __xprintf
 282:tmk_core/common/command.c ****     print(".swap_lalt_lgui: ");
 971               		.loc 1 282 0
 972 01dc 80E0      		ldi r24,lo8(__c.3577)
 973 01de 90E0      		ldi r25,hi8(__c.3577)
 974 01e0 0E94 0000 		call xputs
 283:tmk_core/common/command.c ****     print_dec(kc.swap_lalt_lgui);
 975               		.loc 1 283 0
 976 01e4 80E0      		ldi r24,lo8(__c.3579)
 977 01e6 90E0      		ldi r25,hi8(__c.3579)
 978 01e8 0E94 0000 		call xputs
 284:tmk_core/common/command.c ****     print("\n");
 979               		.loc 1 284 0
 980 01ec C2FB      		bst r28,2
 981 01ee 8827      		clr r24
 982 01f0 80F9      		bld r24,0
 983 01f2 1F92      		push __zero_reg__
 984               	.LCFI100:
 985               		.cfi_def_cfa_offset 17
 986 01f4 8F93      		push r24
 987               	.LCFI101:
 988               		.cfi_def_cfa_offset 18
 989 01f6 80E0      		ldi r24,lo8(__c.3581)
 990 01f8 90E0      		ldi r25,hi8(__c.3581)
 991 01fa 9F93      		push r25
 992               	.LCFI102:
 993               		.cfi_def_cfa_offset 19
 994 01fc 8F93      		push r24
 995               	.LCFI103:
 996               		.cfi_def_cfa_offset 20
 997 01fe 0E94 0000 		call __xprintf
 285:tmk_core/common/command.c ****     print(".swap_ralt_rgui: ");
 998               		.loc 1 285 0
 999 0202 80E0      		ldi r24,lo8(__c.3583)
 1000 0204 90E0      		ldi r25,hi8(__c.3583)
 1001 0206 0E94 0000 		call xputs
 286:tmk_core/common/command.c ****     print_dec(kc.swap_ralt_rgui);
 1002               		.loc 1 286 0
 1003 020a 80E0      		ldi r24,lo8(__c.3585)
 1004 020c 90E0      		ldi r25,hi8(__c.3585)
 1005 020e 0E94 0000 		call xputs
 287:tmk_core/common/command.c ****     print("\n");
 1006               		.loc 1 287 0
 1007 0212 C3FB      		bst r28,3
 1008 0214 8827      		clr r24
 1009 0216 80F9      		bld r24,0
 1010 0218 1F92      		push __zero_reg__
 1011               	.LCFI104:
 1012               		.cfi_def_cfa_offset 21
 1013 021a 8F93      		push r24
 1014               	.LCFI105:
 1015               		.cfi_def_cfa_offset 22
 1016 021c 80E0      		ldi r24,lo8(__c.3587)
 1017 021e 90E0      		ldi r25,hi8(__c.3587)
 1018 0220 9F93      		push r25
 1019               	.LCFI106:
 1020               		.cfi_def_cfa_offset 23
 1021 0222 8F93      		push r24
 1022               	.LCFI107:
 1023               		.cfi_def_cfa_offset 24
 1024 0224 0E94 0000 		call __xprintf
 288:tmk_core/common/command.c ****     print(".no_gui: ");
 1025               		.loc 1 288 0
 1026 0228 80E0      		ldi r24,lo8(__c.3589)
 1027 022a 90E0      		ldi r25,hi8(__c.3589)
 1028 022c 0E94 0000 		call xputs
 289:tmk_core/common/command.c ****     print_dec(kc.no_gui);
 1029               		.loc 1 289 0
 1030 0230 80E0      		ldi r24,lo8(__c.3591)
 1031 0232 90E0      		ldi r25,hi8(__c.3591)
 1032 0234 0E94 0000 		call xputs
 290:tmk_core/common/command.c ****     print("\n");
 1033               		.loc 1 290 0
 1034 0238 C4FB      		bst r28,4
 1035 023a 8827      		clr r24
 1036 023c 80F9      		bld r24,0
 1037 023e 1F92      		push __zero_reg__
 1038               	.LCFI108:
 1039               		.cfi_def_cfa_offset 25
 1040 0240 8F93      		push r24
 1041               	.LCFI109:
 1042               		.cfi_def_cfa_offset 26
 1043 0242 80E0      		ldi r24,lo8(__c.3593)
 1044 0244 90E0      		ldi r25,hi8(__c.3593)
 1045 0246 9F93      		push r25
 1046               	.LCFI110:
 1047               		.cfi_def_cfa_offset 27
 1048 0248 8F93      		push r24
 1049               	.LCFI111:
 1050               		.cfi_def_cfa_offset 28
 1051 024a 0E94 0000 		call __xprintf
 291:tmk_core/common/command.c ****     print(".swap_grave_esc: ");
 1052               		.loc 1 291 0
 1053 024e 80E0      		ldi r24,lo8(__c.3595)
 1054 0250 90E0      		ldi r25,hi8(__c.3595)
 1055 0252 0E94 0000 		call xputs
 292:tmk_core/common/command.c ****     print_dec(kc.swap_grave_esc);
 1056               		.loc 1 292 0
 1057 0256 80E0      		ldi r24,lo8(__c.3597)
 1058 0258 90E0      		ldi r25,hi8(__c.3597)
 1059 025a 0E94 0000 		call xputs
 293:tmk_core/common/command.c ****     print("\n");
 1060               		.loc 1 293 0
 1061 025e C5FB      		bst r28,5
 1062 0260 8827      		clr r24
 1063 0262 80F9      		bld r24,0
 1064 0264 1F92      		push __zero_reg__
 1065               	.LCFI112:
 1066               		.cfi_def_cfa_offset 29
 1067 0266 8F93      		push r24
 1068               	.LCFI113:
 1069               		.cfi_def_cfa_offset 30
 1070 0268 80E0      		ldi r24,lo8(__c.3599)
 1071 026a 90E0      		ldi r25,hi8(__c.3599)
 1072 026c 9F93      		push r25
 1073               	.LCFI114:
 1074               		.cfi_def_cfa_offset 31
 1075 026e 8F93      		push r24
 1076               	.LCFI115:
 1077               		.cfi_def_cfa_offset 32
 1078 0270 0E94 0000 		call __xprintf
 294:tmk_core/common/command.c ****     print(".swap_backslash_backspace: ");
 1079               		.loc 1 294 0
 1080 0274 80E0      		ldi r24,lo8(__c.3601)
 1081 0276 90E0      		ldi r25,hi8(__c.3601)
 1082 0278 0E94 0000 		call xputs
 295:tmk_core/common/command.c ****     print_dec(kc.swap_backslash_backspace);
 1083               		.loc 1 295 0
 1084 027c 80E0      		ldi r24,lo8(__c.3603)
 1085 027e 90E0      		ldi r25,hi8(__c.3603)
 1086 0280 0E94 0000 		call xputs
 296:tmk_core/common/command.c ****     print("\n");
 1087               		.loc 1 296 0
 1088 0284 C6FB      		bst r28,6
 1089 0286 8827      		clr r24
 1090 0288 80F9      		bld r24,0
 1091 028a 1F92      		push __zero_reg__
 1092               	.LCFI116:
 1093               		.cfi_def_cfa_offset 33
 1094 028c 8F93      		push r24
 1095               	.LCFI117:
 1096               		.cfi_def_cfa_offset 34
 1097 028e 80E0      		ldi r24,lo8(__c.3605)
 1098 0290 90E0      		ldi r25,hi8(__c.3605)
 1099 0292 9F93      		push r25
 1100               	.LCFI118:
 1101               		.cfi_def_cfa_offset 35
 1102 0294 8F93      		push r24
 1103               	.LCFI119:
 1104               		.cfi_def_cfa_offset 36
 1105 0296 0E94 0000 		call __xprintf
 297:tmk_core/common/command.c ****     print(".nkro: ");
 1106               		.loc 1 297 0
 1107 029a 8DB7      		in r24,__SP_L__
 1108 029c 9EB7      		in r25,__SP_H__
 1109 029e 8096      		adiw r24,32
 1110 02a0 0FB6      		in __tmp_reg__,__SREG__
 1111 02a2 F894      		cli
 1112 02a4 9EBF      		out __SP_H__,r25
 1113 02a6 0FBE      		out __SREG__,__tmp_reg__
 1114 02a8 8DBF      		out __SP_L__,r24
 1115               	.LCFI120:
 1116               		.cfi_def_cfa_offset 4
 1117 02aa 80E0      		ldi r24,lo8(__c.3607)
 1118 02ac 90E0      		ldi r25,hi8(__c.3607)
 1119 02ae 0E94 0000 		call xputs
 298:tmk_core/common/command.c ****     print_dec(kc.nkro);
 1120               		.loc 1 298 0
 1121 02b2 80E0      		ldi r24,lo8(__c.3609)
 1122 02b4 90E0      		ldi r25,hi8(__c.3609)
 1123 02b6 0E94 0000 		call xputs
 299:tmk_core/common/command.c ****     print("\n");
 1124               		.loc 1 299 0
 1125 02ba C7FB      		bst r28,7
 1126 02bc CC27      		clr r28
 1127 02be C0F9      		bld r28,0
 1128 02c0 1F92      		push __zero_reg__
 1129               	.LCFI121:
 1130               		.cfi_def_cfa_offset 5
 1131 02c2 CF93      		push r28
 1132               	.LCFI122:
 1133               		.cfi_def_cfa_offset 6
 1134 02c4 80E0      		ldi r24,lo8(__c.3611)
 1135 02c6 90E0      		ldi r25,hi8(__c.3611)
 1136 02c8 9F93      		push r25
 1137               	.LCFI123:
 1138               		.cfi_def_cfa_offset 7
 1139 02ca 8F93      		push r24
 1140               	.LCFI124:
 1141               		.cfi_def_cfa_offset 8
 1142 02cc 0E94 0000 		call __xprintf
 300:tmk_core/common/command.c **** 
 1143               		.loc 1 300 0
 1144 02d0 80E0      		ldi r24,lo8(__c.3613)
 1145 02d2 90E0      		ldi r25,hi8(__c.3613)
 1146 02d4 0E94 0000 		call xputs
 1147 02d8 0F90      		pop __tmp_reg__
 1148 02da 0F90      		pop __tmp_reg__
 1149 02dc 0F90      		pop __tmp_reg__
 1150 02de 0F90      		pop __tmp_reg__
 1151               	.LCFI125:
 1152               		.cfi_def_cfa_offset 4
 1153 02e0 00C0      		rjmp .L91
 1154               	.L53:
 1155               	.LBE107:
 1156               	.LBE106:
 324:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 1157               		.loc 1 324 0
 1158 02e2 8031      		cpi r24,lo8(16)
 1159 02e4 01F4      		brne .+2
 1160 02e6 00C0      		rjmp .L59
 1161 02e8 00F4      		brsh .L60
 1162 02ea 8E30      		cpi r24,lo8(14)
 1163 02ec 01F4      		brne .+2
 1164 02ee 00C0      		rjmp .L61
 1165 02f0 00C0      		rjmp .L49
 1166               	.L60:
 1167 02f2 8631      		cpi r24,lo8(22)
 1168 02f4 01F4      		brne .+2
 1169 02f6 00C0      		rjmp .L62
 1170 02f8 8931      		cpi r24,lo8(25)
 1171 02fa 01F0      		breq .+2
 1172 02fc 00C0      		rjmp .L49
 1173               	.LBB108:
 1174               	.LBB109:
 154:tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 1175               		.loc 1 154 0
 1176 02fe 80E0      		ldi r24,lo8(__c.3483)
 1177 0300 90E0      		ldi r25,hi8(__c.3483)
 1178 0302 0E94 0000 		call xputs
 155:tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1179               		.loc 1 155 0
 1180 0306 80E0      		ldi r24,lo8(__c.3485)
 1181 0308 90E0      		ldi r25,hi8(__c.3485)
 1182 030a 0E94 0000 		call xputs
 156:tmk_core/common/command.c ****                                                        "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") 
 1183               		.loc 1 156 0
 1184 030e 80E0      		ldi r24,lo8(__c.3487)
 1185 0310 90E0      		ldi r25,hi8(__c.3487)
 1186 0312 0E94 0000 		call xputs
 162:tmk_core/common/command.c **** #endif
 1187               		.loc 1 162 0
 1188 0316 80E0      		ldi r24,lo8(__c.3489)
 1189 0318 90E0      		ldi r25,hi8(__c.3489)
 1190 031a 0E94 0000 		call xputs
 166:tmk_core/common/command.c **** 
 1191               		.loc 1 166 0
 1192 031e 80E0      		ldi r24,lo8(__c.3491)
 1193 0320 90E0      		ldi r25,hi8(__c.3491)
 1194 0322 0E94 0000 		call xputs
 201:tmk_core/common/command.c **** #if defined(__AVR__)
 1195               		.loc 1 201 0
 1196 0326 80E0      		ldi r24,lo8(__c.3493)
 1197 0328 90E0      		ldi r25,hi8(__c.3493)
 1198 032a 00C0      		rjmp .L93
 1199               	.L51:
 1200               	.LBE109:
 1201               	.LBE108:
 324:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 1202               		.loc 1 324 0
 1203 032c 8A32      		cpi r24,lo8(42)
 1204 032e 01F0      		breq .L64
 1205 0330 00F4      		brsh .L65
 1206 0332 8732      		cpi r24,lo8(39)
 1207 0334 01F4      		brne .+2
 1208 0336 00C0      		rjmp .L66
 1209 0338 00F4      		brsh .L67
 1210 033a 8E31      		cpi r24,lo8(30)
 1211 033c 00F4      		brsh .+2
 1212 033e 00C0      		rjmp .L49
 526:tmk_core/common/command.c ****             break;
 1213               		.loc 1 526 0
 1214 0340 8D51      		subi r24,lo8(-(-29))
 1215 0342 00C0      		rjmp .L94
 1216               	.L67:
 324:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 1217               		.loc 1 324 0
 1218 0344 8932      		cpi r24,lo8(41)
 1219 0346 01F0      		breq .L56
 1220 0348 00C0      		rjmp .L49
 1221               	.L65:
 1222 034a 8334      		cpi r24,lo8(67)
 1223 034c 00F4      		brsh .L69
 1224 034e 8A33      		cpi r24,lo8(58)
 1225 0350 00F0      		brlo .+2
 1226 0352 00C0      		rjmp .L70
 1227 0354 8533      		cpi r24,lo8(53)
 1228 0356 01F4      		brne .+2
 1229 0358 00C0      		rjmp .L66
 1230 035a 8833      		cpi r24,lo8(56)
 1231 035c 01F0      		breq .L52
 1232 035e 00C0      		rjmp .L49
 1233               	.L69:
 1234 0360 8334      		cpi r24,lo8(67)
 1235 0362 01F4      		brne .+2
 1236 0364 00C0      		rjmp .L66
 1237 0366 00C0      		rjmp .L49
 1238               	.L64:
 343:tmk_core/common/command.c ****             eeconfig_init();
 1239               		.loc 1 343 0
 1240 0368 80E0      		ldi r24,lo8(__c.3623)
 1241 036a 90E0      		ldi r25,hi8(__c.3623)
 1242 036c 0E94 0000 		call xputs
 344:tmk_core/common/command.c ****             break;
 1243               		.loc 1 344 0
 1244 0370 0E94 0000 		call eeconfig_init
 1245               	.L91:
 537:tmk_core/common/command.c **** }
 1246               		.loc 1 537 0
 1247 0374 C1E0      		ldi r28,lo8(1)
 345:tmk_core/common/command.c **** 
 1248               		.loc 1 345 0
 1249 0376 00C0      		rjmp .L73
 1250               	.L52:
 1251               	.LBB110:
 1252               	.LBB111:
 118:tmk_core/common/command.c **** 
 1253               		.loc 1 118 0
 1254 0378 80E0      		ldi r24,lo8(__c.3478)
 1255 037a 90E0      		ldi r25,hi8(__c.3478)
 1256 037c 00C0      		rjmp .L93
 1257               	.L54:
 1258               	.LBE111:
 1259               	.LBE110:
 371:tmk_core/common/command.c ****             debug_keyboard = false;
 1260               		.loc 1 371 0
 1261 037e 8091 0000 		lds r24,debug_config
 374:tmk_core/common/command.c ****             command_console_help();
 1262               		.loc 1 374 0
 1263 0382 817F      		andi r24,lo8(-15)
 1264 0384 8E7F      		andi r24,lo8(~(1<<0))
 1265 0386 8093 0000 		sts debug_config,r24
 1266               	.LBB112:
 1267               	.LBB113:
 544:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1268               		.loc 1 544 0
 1269 038a 80E0      		ldi r24,lo8(__c.3667)
 1270 038c 90E0      		ldi r25,hi8(__c.3667)
 1271 038e 0E94 0000 		call xputs
 1272               	.LBE113:
 1273               	.LBE112:
 376:tmk_core/common/command.c ****             command_state = CONSOLE;
 1274               		.loc 1 376 0
 1275 0392 80E0      		ldi r24,lo8(__c.3628)
 1276 0394 90E0      		ldi r25,hi8(__c.3628)
 1277 0396 0E94 0000 		call xputs
 377:tmk_core/common/command.c ****             break;
 1278               		.loc 1 377 0
 1279 039a 81E0      		ldi r24,lo8(1)
 1280 039c 8093 0000 		sts command_state,r24
 1281 03a0 00C0      		rjmp .L91
 1282               	.L56:
 383:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 1283               		.loc 1 383 0
 1284 03a2 0E94 0000 		call clear_keyboard
 384:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
 1285               		.loc 1 384 0
 1286 03a6 80E0      		ldi r24,lo8(__c.3632)
 1287 03a8 90E0      		ldi r25,hi8(__c.3632)
 1288 03aa 0E94 0000 		call xputs
 1289               	.LBB114:
 1290               	.LBB115:
 1291               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1292               		.loc 2 187 0
 1293 03ae 9FEF      		ldi r25,lo8(3199999)
 1294 03b0 23ED      		ldi r18,hi8(3199999)
 1295 03b2 80E3      		ldi r24,hlo8(3199999)
 1296 03b4 9150      	1:	subi r25,1
 1297 03b6 2040      		sbci r18,0
 1298 03b8 8040      		sbci r24,0
 1299 03ba 01F4      		brne 1b
 1300 03bc 00C0      		rjmp .
 1301 03be 0000      		nop
 1302               	.LBE115:
 1303               	.LBE114:
 391:tmk_core/common/command.c ****             break;
 1304               		.loc 1 391 0
 1305 03c0 0E94 0000 		call bootloader_jump
 1306 03c4 00C0      		rjmp .L91
 1307               	.L57:
 396:tmk_core/common/command.c ****             if (debug_enable) {
 1308               		.loc 1 396 0
 1309 03c6 8091 0000 		lds r24,debug_config
 1310 03ca C82F      		mov r28,r24
 1311 03cc C095      		com r28
 1312 03ce C170      		andi r28,lo8(1)
 1313 03d0 C0FB      		bst r28,0
 1314 03d2 80F9      		bld r24,0
 1315 03d4 8093 0000 		sts debug_config,r24
 397:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 1316               		.loc 1 397 0
 1317 03d8 CC23      		tst r28
 1318 03da 01F0      		breq .L74
 398:tmk_core/common/command.c ****             } else {
 1319               		.loc 1 398 0
 1320 03dc 80E0      		ldi r24,lo8(__c.3635)
 1321 03de 90E0      		ldi r25,hi8(__c.3635)
 1322 03e0 0E94 0000 		call xputs
 1323 03e4 00C0      		rjmp .L73
 1324               	.L74:
 400:tmk_core/common/command.c ****                 debug_matrix   = false;
 1325               		.loc 1 400 0
 1326 03e6 80E0      		ldi r24,lo8(__c.3637)
 1327 03e8 90E0      		ldi r25,hi8(__c.3637)
 1328 03ea 0E94 0000 		call xputs
 401:tmk_core/common/command.c ****                 debug_keyboard = false;
 1329               		.loc 1 401 0
 1330 03ee 8091 0000 		lds r24,debug_config
 403:tmk_core/common/command.c ****             }
 1331               		.loc 1 403 0
 1332 03f2 897F      		andi r24,lo8(-7)
 1333 03f4 877F      		andi r24,lo8(~(1<<3))
 1334 03f6 8093 0000 		sts debug_config,r24
 1335 03fa 00C0      		rjmp .L91
 1336               	.L50:
 409:tmk_core/common/command.c ****             if (debug_matrix) {
 1337               		.loc 1 409 0
 1338 03fc 9091 0000 		lds r25,debug_config
 1339 0400 91FB      		bst r25,1
 1340 0402 CC27      		clr r28
 1341 0404 C0F9      		bld r28,0
 1342 0406 81E0      		ldi r24,lo8(1)
 1343 0408 C827      		eor r28,r24
 1344 040a 892F      		mov r24,r25
 1345 040c C0FB      		bst r28,0
 1346 040e 81F9      		bld r24,1
 1347 0410 8093 0000 		sts debug_config,r24
 410:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1348               		.loc 1 410 0
 1349 0414 CC23      		tst r28
 1350 0416 01F0      		breq .L75
 411:tmk_core/common/command.c ****                 debug_enable = true;
 1351               		.loc 1 411 0
 1352 0418 80E0      		ldi r24,lo8(__c.3640)
 1353 041a 90E0      		ldi r25,hi8(__c.3640)
 1354 041c 00C0      		rjmp .L92
 1355               	.L75:
 414:tmk_core/common/command.c ****             }
 1356               		.loc 1 414 0
 1357 041e 80E0      		ldi r24,lo8(__c.3642)
 1358 0420 90E0      		ldi r25,hi8(__c.3642)
 1359 0422 00C0      		rjmp .L93
 1360               	.L61:
 420:tmk_core/common/command.c ****             if (debug_keyboard) {
 1361               		.loc 1 420 0
 1362 0424 9091 0000 		lds r25,debug_config
 1363 0428 92FB      		bst r25,2
 1364 042a CC27      		clr r28
 1365 042c C0F9      		bld r28,0
 1366 042e 81E0      		ldi r24,lo8(1)
 1367 0430 C827      		eor r28,r24
 1368 0432 892F      		mov r24,r25
 1369 0434 C0FB      		bst r28,0
 1370 0436 82F9      		bld r24,2
 1371 0438 8093 0000 		sts debug_config,r24
 421:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1372               		.loc 1 421 0
 1373 043c CC23      		tst r28
 1374 043e 01F0      		breq .L76
 422:tmk_core/common/command.c ****                 debug_enable = true;
 1375               		.loc 1 422 0
 1376 0440 80E0      		ldi r24,lo8(__c.3645)
 1377 0442 90E0      		ldi r25,hi8(__c.3645)
 1378 0444 00C0      		rjmp .L92
 1379               	.L76:
 425:tmk_core/common/command.c ****             }
 1380               		.loc 1 425 0
 1381 0446 80E0      		ldi r24,lo8(__c.3647)
 1382 0448 90E0      		ldi r25,hi8(__c.3647)
 1383               	.L93:
 1384 044a 0E94 0000 		call xputs
 1385 044e 00C0      		rjmp .L91
 1386               	.L59:
 431:tmk_core/common/command.c ****             if (debug_mouse) {
 1387               		.loc 1 431 0
 1388 0450 9091 0000 		lds r25,debug_config
 1389 0454 93FB      		bst r25,3
 1390 0456 CC27      		clr r28
 1391 0458 C0F9      		bld r28,0
 1392 045a 81E0      		ldi r24,lo8(1)
 1393 045c C827      		eor r28,r24
 1394 045e 892F      		mov r24,r25
 1395 0460 C0FB      		bst r28,0
 1396 0462 83F9      		bld r24,3
 1397 0464 8093 0000 		sts debug_config,r24
 432:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1398               		.loc 1 432 0
 1399 0468 CC23      		tst r28
 1400 046a 01F0      		breq .L77
 433:tmk_core/common/command.c ****                 debug_enable = true;
 1401               		.loc 1 433 0
 1402 046c 80E0      		ldi r24,lo8(__c.3650)
 1403 046e 90E0      		ldi r25,hi8(__c.3650)
 1404               	.L92:
 1405 0470 0E94 0000 		call xputs
 434:tmk_core/common/command.c ****             } else {
 1406               		.loc 1 434 0
 1407 0474 8091 0000 		lds r24,debug_config
 1408 0478 8160      		ori r24,lo8(1<<0)
 1409 047a 8093 0000 		sts debug_config,r24
 1410 047e 00C0      		rjmp .L73
 1411               	.L77:
 436:tmk_core/common/command.c ****             }
 1412               		.loc 1 436 0
 1413 0480 80E0      		ldi r24,lo8(__c.3652)
 1414 0482 90E0      		ldi r25,hi8(__c.3652)
 1415 0484 00C0      		rjmp .L93
 1416               	.L62:
 1417               	.LBB116:
 1418               	.LBB117:
 211:tmk_core/common/command.c **** 
 1419               		.loc 1 211 0
 1420 0486 80E0      		ldi r24,lo8(__c.3498)
 1421 0488 90E0      		ldi r25,hi8(__c.3498)
 1422 048a 0E94 0000 		call xputs
 213:tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 1423               		.loc 1 213 0
 1424 048e 0E94 0000 		call host_keyboard_leds
 1425 0492 1F92      		push __zero_reg__
 1426               	.LCFI126:
 1427               		.cfi_def_cfa_offset 5
 1428 0494 8F93      		push r24
 1429               	.LCFI127:
 1430               		.cfi_def_cfa_offset 6
 1431 0496 80E0      		ldi r24,lo8(__c.3500)
 1432 0498 90E0      		ldi r25,hi8(__c.3500)
 1433 049a 9F93      		push r25
 1434               	.LCFI128:
 1435               		.cfi_def_cfa_offset 7
 1436 049c 8F93      		push r24
 1437               	.LCFI129:
 1438               		.cfi_def_cfa_offset 8
 1439 049e 0E94 0000 		call __xprintf
 216:tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 1440               		.loc 1 216 0
 1441 04a2 8091 0000 		lds r24,keyboard_protocol
 1442 04a6 1F92      		push __zero_reg__
 1443               	.LCFI130:
 1444               		.cfi_def_cfa_offset 9
 1445 04a8 8F93      		push r24
 1446               	.LCFI131:
 1447               		.cfi_def_cfa_offset 10
 1448 04aa 80E0      		ldi r24,lo8(__c.3502)
 1449 04ac 90E0      		ldi r25,hi8(__c.3502)
 1450 04ae 9F93      		push r25
 1451               	.LCFI132:
 1452               		.cfi_def_cfa_offset 11
 1453 04b0 8F93      		push r24
 1454               	.LCFI133:
 1455               		.cfi_def_cfa_offset 12
 1456 04b2 0E94 0000 		call __xprintf
 217:tmk_core/common/command.c **** #endif
 1457               		.loc 1 217 0
 1458 04b6 8091 0000 		lds r24,keyboard_idle
 1459 04ba 1F92      		push __zero_reg__
 1460               	.LCFI134:
 1461               		.cfi_def_cfa_offset 13
 1462 04bc 8F93      		push r24
 1463               	.LCFI135:
 1464               		.cfi_def_cfa_offset 14
 1465 04be 80E0      		ldi r24,lo8(__c.3504)
 1466 04c0 90E0      		ldi r25,hi8(__c.3504)
 1467 04c2 9F93      		push r25
 1468               	.LCFI136:
 1469               		.cfi_def_cfa_offset 15
 1470 04c4 8F93      		push r24
 1471               	.LCFI137:
 1472               		.cfi_def_cfa_offset 16
 1473 04c6 0E94 0000 		call __xprintf
 222:tmk_core/common/command.c **** 
 1474               		.loc 1 222 0
 1475 04ca 0E94 0000 		call timer_read32
 1476 04ce 9F93      		push r25
 1477               	.LCFI138:
 1478               		.cfi_def_cfa_offset 17
 1479 04d0 8F93      		push r24
 1480               	.LCFI139:
 1481               		.cfi_def_cfa_offset 18
 1482 04d2 7F93      		push r23
 1483               	.LCFI140:
 1484               		.cfi_def_cfa_offset 19
 1485 04d4 6F93      		push r22
 1486               	.LCFI141:
 1487               		.cfi_def_cfa_offset 20
 1488 04d6 80E0      		ldi r24,lo8(__c.3506)
 1489 04d8 90E0      		ldi r25,hi8(__c.3506)
 1490 04da 9F93      		push r25
 1491               	.LCFI142:
 1492               		.cfi_def_cfa_offset 21
 1493 04dc 8F93      		push r24
 1494               	.LCFI143:
 1495               		.cfi_def_cfa_offset 22
 1496 04de 0E94 0000 		call __xprintf
 1497 04e2 8DB7      		in r24,__SP_L__
 1498 04e4 9EB7      		in r25,__SP_H__
 1499 04e6 4296      		adiw r24,18
 1500 04e8 0FB6      		in __tmp_reg__,__SREG__
 1501 04ea F894      		cli
 1502 04ec 9EBF      		out __SP_H__,r25
 1503 04ee 0FBE      		out __SREG__,__tmp_reg__
 1504 04f0 8DBF      		out __SP_L__,r24
 1505               	.LCFI144:
 1506               		.cfi_def_cfa_offset 4
 1507 04f2 00C0      		rjmp .L91
 1508               	.L70:
 1509               	.LBE117:
 1510               	.LBE116:
 516:tmk_core/common/command.c ****             break;
 1511               		.loc 1 516 0
 1512 04f4 8953      		subi r24,lo8(-(-57))
 1513 04f6 00C0      		rjmp .L94
 1514               	.L66:
 529:tmk_core/common/command.c ****             break;
 1515               		.loc 1 529 0
 1516 04f8 80E0      		ldi r24,0
 1517               	.L94:
 1518 04fa 0E94 0000 		call switch_default_layer
 1519 04fe 00C0      		rjmp .L91
 1520               	.L49:
 534:tmk_core/common/command.c ****             return false;
 1521               		.loc 1 534 0
 1522 0500 80E0      		ldi r24,lo8(__c.3662)
 1523 0502 90E0      		ldi r25,hi8(__c.3662)
 1524 0504 0E94 0000 		call xputs
 535:tmk_core/common/command.c ****     }
 1525               		.loc 1 535 0
 1526 0508 C0E0      		ldi r28,0
 1527               	.L73:
 538:tmk_core/common/command.c **** 
 1528               		.loc 1 538 0
 1529 050a 8C2F      		mov r24,r28
 1530               	/* epilogue start */
 1531 050c DF91      		pop r29
 1532 050e CF91      		pop r28
 1533 0510 0895      		ret
 1534               		.cfi_endproc
 1535               	.LFE26:
 1537               		.section	.text.command_console_extra,"ax",@progbits
 1538               		.weak	command_console_extra
 1540               	command_console_extra:
 1541               	.LFB21:
 109:tmk_core/common/command.c ****     (void)code;
 1542               		.loc 1 109 0
 1543               		.cfi_startproc
 1544               	.LVL52:
 1545               	/* prologue: function */
 1546               	/* frame size = 0 */
 1547               	/* stack size = 0 */
 1548               	.L__stack_usage = 0
 112:tmk_core/common/command.c **** 
 1549               		.loc 1 112 0
 1550 0000 80E0      		ldi r24,0
 1551               	.LVL53:
 1552 0002 0895      		ret
 1553               		.cfi_endproc
 1554               	.LFE21:
 1556               		.set	command_console_extra.localalias.0,command_console_extra
 1557               		.section	.text.command_extra,"ax",@progbits
 1558               		.weak	command_extra
 1560               	command_extra:
 1561               	.LFB37:
 1562               		.cfi_startproc
 1563               	/* prologue: function */
 1564               	/* frame size = 0 */
 1565               	/* stack size = 0 */
 1566               	.L__stack_usage = 0
 1567 0000 0C94 0000 		jmp command_console_extra.localalias.0
 1568               		.cfi_endproc
 1569               	.LFE37:
 1571               		.section	.text.numkey2num,"ax",@progbits
 1572               	.global	numkey2num
 1574               	numkey2num:
 1575               	.LFB34:
 791:tmk_core/common/command.c ****     switch (code) {
 1576               		.loc 1 791 0
 1577               		.cfi_startproc
 1578               	.LVL54:
 1579               	/* prologue: function */
 1580               	/* frame size = 0 */
 1581               	/* stack size = 0 */
 1582               	.L__stack_usage = 0
 1583 0000 8E51      		subi r24,lo8(-(-30))
 1584               	.LVL55:
 1585 0002 8A30      		cpi r24,lo8(10)
 1586 0004 00F4      		brsh .L99
 1587 0006 E82F      		mov r30,r24
 1588 0008 F0E0      		ldi r31,0
 1589 000a E050      		subi r30,lo8(-(CSWTCH.54))
 1590 000c F040      		sbci r31,hi8(-(CSWTCH.54))
 1591 000e 8081      		ld r24,Z
 1592               	.LVL56:
 1593 0010 0895      		ret
 1594               	.L99:
 791:tmk_core/common/command.c ****     switch (code) {
 1595               		.loc 1 791 0
 1596 0012 80E0      		ldi r24,0
 815:tmk_core/common/command.c **** 
 1597               		.loc 1 815 0
 1598 0014 0895      		ret
 1599               		.cfi_endproc
 1600               	.LFE34:
 1602               		.section	.text.command_proc,"ax",@progbits
 1603               	.global	command_proc
 1605               	command_proc:
 1606               	.LFB19:
  76:tmk_core/common/command.c ****     switch (command_state) {
 1607               		.loc 1 76 0
 1608               		.cfi_startproc
 1609 0000 CF93      		push r28
 1610               	.LCFI145:
 1611               		.cfi_def_cfa_offset 3
 1612               		.cfi_offset 28, -2
 1613               	/* prologue: function */
 1614               	/* frame size = 0 */
 1615               	/* stack size = 1 */
 1616               	.L__stack_usage = 1
 1617 0002 C82F      		mov r28,r24
  77:tmk_core/common/command.c ****         case ONESHOT:
 1618               		.loc 1 77 0
 1619 0004 8091 0000 		lds r24,command_state
 1620 0008 8130      		cpi r24,lo8(1)
 1621 000a 01F0      		breq .L102
 1622 000c 00F0      		brlo .L103
 1623 000e 8230      		cpi r24,lo8(2)
 1624 0010 01F4      		brne .+2
 1625 0012 00C0      		rjmp .L104
 1626 0014 00C0      		rjmp .L169
 1627               	.L103:
  79:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1628               		.loc 1 79 0
 1629 0016 0E94 0000 		call get_mods
 1630 001a 8232      		cpi r24,lo8(34)
 1631 001c 01F0      		breq .+2
 1632 001e 00C0      		rjmp .L133
 1633 0020 00C0      		rjmp .L168
 1634               	.L102:
  83:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1635               		.loc 1 83 0
 1636 0022 0E94 0000 		call get_mods
 1637 0026 8232      		cpi r24,lo8(34)
 1638 0028 01F4      		brne .L107
 1639               	.L168:
  84:tmk_core/common/command.c ****             else
 1640               		.loc 1 84 0
 1641 002a 8C2F      		mov r24,r28
 1642 002c 0E94 0000 		call command_extra
 1643 0030 8111      		cpse r24,__zero_reg__
 1644 0032 00C0      		rjmp .L135
  84:tmk_core/common/command.c ****             else
 1645               		.loc 1 84 0 is_stmt 0 discriminator 2
 1646 0034 8C2F      		mov r24,r28
 1647 0036 0E94 0000 		call command_common
 1648 003a 00C0      		rjmp .L132
 1649               	.L135:
  84:tmk_core/common/command.c ****             else
 1650               		.loc 1 84 0
 1651 003c 81E0      		ldi r24,lo8(1)
 1652 003e 90E0      		ldi r25,0
 1653 0040 00C0      		rjmp .L132
 1654               	.L107:
  86:tmk_core/common/command.c ****             break;
 1655               		.loc 1 86 0 is_stmt 1
 1656 0042 8C2F      		mov r24,r28
 1657 0044 0E94 0000 		call command_console_extra
 1658 0048 8111      		cpse r24,__zero_reg__
 1659 004a 00C0      		rjmp .L109
 1660               	.LBB154:
 1661               	.LBB155:
 553:tmk_core/common/command.c ****         case KC_H:
 1662               		.loc 1 553 0
 1663 004c C431      		cpi r28,lo8(20)
 1664 004e 01F0      		breq .L111
 1665 0050 00F4      		brsh .L112
 1666 0052 CB30      		cpi r28,lo8(11)
 1667 0054 01F0      		breq .L113
 1668 0056 C031      		cpi r28,lo8(16)
 1669 0058 01F4      		brne .L110
 564:tmk_core/common/command.c ****             print("M> ");
 1670               		.loc 1 564 0
 1671 005a 0E94 0000 		call mousekey_console_help
 565:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1672               		.loc 1 565 0
 1673 005e 80E0      		ldi r24,lo8(__c.3678)
 1674 0060 90E0      		ldi r25,hi8(__c.3678)
 1675 0062 0E94 0000 		call xputs
 566:tmk_core/common/command.c ****             return true;
 1676               		.loc 1 566 0
 1677 0066 82E0      		ldi r24,lo8(2)
 1678 0068 8093 0000 		sts command_state,r24
 1679 006c 00C0      		rjmp .L109
 1680               	.L112:
 553:tmk_core/common/command.c ****         case KC_H:
 1681               		.loc 1 553 0
 1682 006e C932      		cpi r28,lo8(41)
 1683 0070 01F0      		breq .L111
 1684 0072 C833      		cpi r28,lo8(56)
 1685 0074 01F4      		brne .L110
 1686               	.L113:
 1687               	.LBB156:
 1688               	.LBB157:
 544:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1689               		.loc 1 544 0
 1690 0076 80E0      		ldi r24,lo8(__c.3667)
 1691 0078 90E0      		ldi r25,hi8(__c.3667)
 1692 007a 0E94 0000 		call xputs
 1693               	.LBE157:
 1694               	.LBE156:
 573:tmk_core/common/command.c ****     return true;
 1695               		.loc 1 573 0
 1696 007e 80E0      		ldi r24,lo8(__c.3683)
 1697 0080 90E0      		ldi r25,hi8(__c.3683)
 1698 0082 0E94 0000 		call xputs
 1699 0086 00C0      		rjmp .L109
 1700               	.L111:
 560:tmk_core/common/command.c ****             return false;
 1701               		.loc 1 560 0
 1702 0088 1092 0000 		sts command_state,__zero_reg__
 1703 008c 00C0      		rjmp .L115
 1704               	.L110:
 570:tmk_core/common/command.c ****             return false;
 1705               		.loc 1 570 0
 1706 008e 80E0      		ldi r24,lo8(__c.3681)
 1707 0090 90E0      		ldi r25,hi8(__c.3681)
 1708 0092 0E94 0000 		call xputs
 1709 0096 00C0      		rjmp .L115
 1710               	.L109:
 1711               	.LBE155:
 1712               	.LBE154:
  86:tmk_core/common/command.c ****             break;
 1713               		.loc 1 86 0
 1714 0098 81E0      		ldi r24,lo8(1)
 1715               	.L132:
  86:tmk_core/common/command.c ****             break;
 1716               		.loc 1 86 0 is_stmt 0 discriminator 6
 1717 009a 8170      		andi r24,lo8(1)
 1718 009c 00C0      		rjmp .L161
 1719               	.L104:
 1720               	.LBB158:
 1721               	.LBB159:
 728:tmk_core/common/command.c ****         case KC_H:
 1722               		.loc 1 728 0 is_stmt 1
 1723 009e C432      		cpi r28,lo8(36)
 1724 00a0 00F4      		brsh .L117
 1725 00a2 CE31      		cpi r28,lo8(30)
 1726 00a4 00F0      		brlo .+2
 1727 00a6 00C0      		rjmp .L118
 1728 00a8 CB30      		cpi r28,lo8(11)
 1729 00aa 01F0      		breq .L119
 1730 00ac 00F4      		brsh .L120
 1731 00ae C730      		cpi r28,lo8(7)
 1732 00b0 01F0      		breq .+2
 1733 00b2 00C0      		rjmp .L116
 767:tmk_core/common/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1734               		.loc 1 767 0
 1735 00b4 8EE1      		ldi r24,lo8(30)
 1736 00b6 8093 0000 		sts mk_delay,r24
 768:tmk_core/common/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1737               		.loc 1 768 0
 1738 00ba 82E3      		ldi r24,lo8(50)
 1739 00bc 8093 0000 		sts mk_interval,r24
 769:tmk_core/common/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1740               		.loc 1 769 0
 1741 00c0 8AE0      		ldi r24,lo8(10)
 1742 00c2 8093 0000 		sts mk_max_speed,r24
 770:tmk_core/common/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1743               		.loc 1 770 0
 1744 00c6 84E1      		ldi r24,lo8(20)
 1745 00c8 8093 0000 		sts mk_time_to_max,r24
 771:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1746               		.loc 1 771 0
 1747 00cc 88E0      		ldi r24,lo8(8)
 1748 00ce 8093 0000 		sts mk_wheel_max_speed,r24
 772:tmk_core/common/command.c ****             print("set default\n");
 1749               		.loc 1 772 0
 1750 00d2 88E2      		ldi r24,lo8(40)
 1751 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 773:tmk_core/common/command.c ****             break;
 1752               		.loc 1 773 0
 1753 00d8 80E0      		ldi r24,lo8(__c.3802)
 1754 00da 90E0      		ldi r25,hi8(__c.3802)
 1755 00dc 0E94 0000 		call xputs
 1756 00e0 00C0      		rjmp .L129
 1757               	.L120:
 728:tmk_core/common/command.c ****         case KC_H:
 1758               		.loc 1 728 0
 1759 00e2 C331      		cpi r28,lo8(19)
 1760 00e4 01F0      		breq .L122
 1761 00e6 C431      		cpi r28,lo8(20)
 1762 00e8 01F0      		breq .L123
 1763 00ea 00C0      		rjmp .L116
 1764               	.L117:
 1765 00ec CB34      		cpi r28,lo8(75)
 1766 00ee 01F4      		brne .+2
 1767 00f0 00C0      		rjmp .L124
 1768 00f2 00F4      		brsh .L125
 1769 00f4 C932      		cpi r28,lo8(41)
 1770 00f6 01F0      		breq .L123
 1771 00f8 C833      		cpi r28,lo8(56)
 1772 00fa 01F0      		breq .L119
 1773 00fc 00C0      		rjmp .L116
 1774               	.L125:
 1775 00fe C135      		cpi r28,lo8(81)
 1776 0100 01F4      		brne .+2
 1777 0102 00C0      		rjmp .L126
 1778 0104 C235      		cpi r28,lo8(82)
 1779 0106 01F4      		brne .+2
 1780 0108 00C0      		rjmp .L127
 1781 010a CE34      		cpi r28,lo8(78)
 1782 010c 01F0      		breq .+2
 1783 010e 00C0      		rjmp .L116
 764:tmk_core/common/command.c ****             break;
 1784               		.loc 1 764 0
 1785 0110 6AE0      		ldi r22,lo8(10)
 1786 0112 00C0      		rjmp .L163
 1787               	.L119:
 731:tmk_core/common/command.c ****             break;
 1788               		.loc 1 731 0
 1789 0114 0E94 0000 		call mousekey_console_help
 1790 0118 00C0      		rjmp .L129
 1791               	.L123:
 735:tmk_core/common/command.c ****                 mousekey_param = 0;
 1792               		.loc 1 735 0
 1793 011a 8091 0000 		lds r24,mousekey_param
 1794 011e 8823      		tst r24
 1795 0120 01F0      		breq .L130
 736:tmk_core/common/command.c ****             } else {
 1796               		.loc 1 736 0
 1797 0122 1092 0000 		sts mousekey_param,__zero_reg__
 1798 0126 00C0      		rjmp .L129
 1799               	.L130:
 738:tmk_core/common/command.c ****                 command_state = CONSOLE;
 1800               		.loc 1 738 0
 1801 0128 80E0      		ldi r24,lo8(__c.3788)
 1802 012a 90E0      		ldi r25,hi8(__c.3788)
 1803 012c 0E94 0000 		call xputs
 739:tmk_core/common/command.c ****                 return false;
 1804               		.loc 1 739 0
 1805 0130 81E0      		ldi r24,lo8(1)
 1806 0132 8093 0000 		sts command_state,r24
 1807 0136 00C0      		rjmp .L161
 1808               	.L122:
 1809               	.LBB160:
 1810               	.LBB161:
 586:tmk_core/common/command.c ****     print("1: delay(*10ms): ");
 1811               		.loc 1 586 0
 1812 0138 80E0      		ldi r24,lo8(__c.3689)
 1813 013a 90E0      		ldi r25,hi8(__c.3689)
 1814 013c 0E94 0000 		call xputs
 587:tmk_core/common/command.c ****     pdec(mk_delay);
 1815               		.loc 1 587 0
 1816 0140 80E0      		ldi r24,lo8(__c.3691)
 1817 0142 90E0      		ldi r25,hi8(__c.3691)
 1818 0144 0E94 0000 		call xputs
 588:tmk_core/common/command.c ****     print("\n");
 1819               		.loc 1 588 0
 1820 0148 8091 0000 		lds r24,mk_delay
 1821 014c 1F92      		push __zero_reg__
 1822               	.LCFI146:
 1823               		.cfi_def_cfa_offset 4
 1824 014e 8F93      		push r24
 1825               	.LCFI147:
 1826               		.cfi_def_cfa_offset 5
 1827 0150 80E0      		ldi r24,lo8(__c.3693)
 1828 0152 90E0      		ldi r25,hi8(__c.3693)
 1829 0154 9F93      		push r25
 1830               	.LCFI148:
 1831               		.cfi_def_cfa_offset 6
 1832 0156 8F93      		push r24
 1833               	.LCFI149:
 1834               		.cfi_def_cfa_offset 7
 1835 0158 0E94 0000 		call __xprintf
 589:tmk_core/common/command.c ****     print("2: interval(ms): ");
 1836               		.loc 1 589 0
 1837 015c 80E0      		ldi r24,lo8(__c.3695)
 1838 015e 90E0      		ldi r25,hi8(__c.3695)
 1839 0160 0E94 0000 		call xputs
 590:tmk_core/common/command.c ****     pdec(mk_interval);
 1840               		.loc 1 590 0
 1841 0164 80E0      		ldi r24,lo8(__c.3697)
 1842 0166 90E0      		ldi r25,hi8(__c.3697)
 1843 0168 0E94 0000 		call xputs
 591:tmk_core/common/command.c ****     print("\n");
 1844               		.loc 1 591 0
 1845 016c 8091 0000 		lds r24,mk_interval
 1846 0170 1F92      		push __zero_reg__
 1847               	.LCFI150:
 1848               		.cfi_def_cfa_offset 8
 1849 0172 8F93      		push r24
 1850               	.LCFI151:
 1851               		.cfi_def_cfa_offset 9
 1852 0174 80E0      		ldi r24,lo8(__c.3699)
 1853 0176 90E0      		ldi r25,hi8(__c.3699)
 1854 0178 9F93      		push r25
 1855               	.LCFI152:
 1856               		.cfi_def_cfa_offset 10
 1857 017a 8F93      		push r24
 1858               	.LCFI153:
 1859               		.cfi_def_cfa_offset 11
 1860 017c 0E94 0000 		call __xprintf
 592:tmk_core/common/command.c ****     print("3: max_speed: ");
 1861               		.loc 1 592 0
 1862 0180 80E0      		ldi r24,lo8(__c.3701)
 1863 0182 90E0      		ldi r25,hi8(__c.3701)
 1864 0184 0E94 0000 		call xputs
 593:tmk_core/common/command.c ****     pdec(mk_max_speed);
 1865               		.loc 1 593 0
 1866 0188 80E0      		ldi r24,lo8(__c.3703)
 1867 018a 90E0      		ldi r25,hi8(__c.3703)
 1868 018c 0E94 0000 		call xputs
 594:tmk_core/common/command.c ****     print("\n");
 1869               		.loc 1 594 0
 1870 0190 8091 0000 		lds r24,mk_max_speed
 1871 0194 1F92      		push __zero_reg__
 1872               	.LCFI154:
 1873               		.cfi_def_cfa_offset 12
 1874 0196 8F93      		push r24
 1875               	.LCFI155:
 1876               		.cfi_def_cfa_offset 13
 1877 0198 80E0      		ldi r24,lo8(__c.3705)
 1878 019a 90E0      		ldi r25,hi8(__c.3705)
 1879 019c 9F93      		push r25
 1880               	.LCFI156:
 1881               		.cfi_def_cfa_offset 14
 1882 019e 8F93      		push r24
 1883               	.LCFI157:
 1884               		.cfi_def_cfa_offset 15
 1885 01a0 0E94 0000 		call __xprintf
 595:tmk_core/common/command.c ****     print("4: time_to_max: ");
 1886               		.loc 1 595 0
 1887 01a4 80E0      		ldi r24,lo8(__c.3707)
 1888 01a6 90E0      		ldi r25,hi8(__c.3707)
 1889 01a8 0E94 0000 		call xputs
 596:tmk_core/common/command.c ****     pdec(mk_time_to_max);
 1890               		.loc 1 596 0
 1891 01ac 80E0      		ldi r24,lo8(__c.3709)
 1892 01ae 90E0      		ldi r25,hi8(__c.3709)
 1893 01b0 0E94 0000 		call xputs
 597:tmk_core/common/command.c ****     print("\n");
 1894               		.loc 1 597 0
 1895 01b4 8091 0000 		lds r24,mk_time_to_max
 1896 01b8 1F92      		push __zero_reg__
 1897               	.LCFI158:
 1898               		.cfi_def_cfa_offset 16
 1899 01ba 8F93      		push r24
 1900               	.LCFI159:
 1901               		.cfi_def_cfa_offset 17
 1902 01bc 80E0      		ldi r24,lo8(__c.3711)
 1903 01be 90E0      		ldi r25,hi8(__c.3711)
 1904 01c0 9F93      		push r25
 1905               	.LCFI160:
 1906               		.cfi_def_cfa_offset 18
 1907 01c2 8F93      		push r24
 1908               	.LCFI161:
 1909               		.cfi_def_cfa_offset 19
 1910 01c4 0E94 0000 		call __xprintf
 598:tmk_core/common/command.c ****     print("5: wheel_max_speed: ");
 1911               		.loc 1 598 0
 1912 01c8 80E0      		ldi r24,lo8(__c.3713)
 1913 01ca 90E0      		ldi r25,hi8(__c.3713)
 1914 01cc 0E94 0000 		call xputs
 599:tmk_core/common/command.c ****     pdec(mk_wheel_max_speed);
 1915               		.loc 1 599 0
 1916 01d0 80E0      		ldi r24,lo8(__c.3715)
 1917 01d2 90E0      		ldi r25,hi8(__c.3715)
 1918 01d4 0E94 0000 		call xputs
 600:tmk_core/common/command.c ****     print("\n");
 1919               		.loc 1 600 0
 1920 01d8 8091 0000 		lds r24,mk_wheel_max_speed
 1921 01dc 1F92      		push __zero_reg__
 1922               	.LCFI162:
 1923               		.cfi_def_cfa_offset 20
 1924 01de 8F93      		push r24
 1925               	.LCFI163:
 1926               		.cfi_def_cfa_offset 21
 1927 01e0 80E0      		ldi r24,lo8(__c.3717)
 1928 01e2 90E0      		ldi r25,hi8(__c.3717)
 1929 01e4 9F93      		push r25
 1930               	.LCFI164:
 1931               		.cfi_def_cfa_offset 22
 1932 01e6 8F93      		push r24
 1933               	.LCFI165:
 1934               		.cfi_def_cfa_offset 23
 1935 01e8 0E94 0000 		call __xprintf
 601:tmk_core/common/command.c ****     print("6: wheel_time_to_max: ");
 1936               		.loc 1 601 0
 1937 01ec 80E0      		ldi r24,lo8(__c.3719)
 1938 01ee 90E0      		ldi r25,hi8(__c.3719)
 1939 01f0 0E94 0000 		call xputs
 602:tmk_core/common/command.c ****     pdec(mk_wheel_time_to_max);
 1940               		.loc 1 602 0
 1941 01f4 80E0      		ldi r24,lo8(__c.3721)
 1942 01f6 90E0      		ldi r25,hi8(__c.3721)
 1943 01f8 0E94 0000 		call xputs
 603:tmk_core/common/command.c ****     print("\n");
 1944               		.loc 1 603 0
 1945 01fc 8091 0000 		lds r24,mk_wheel_time_to_max
 1946 0200 1F92      		push __zero_reg__
 1947               	.LCFI166:
 1948               		.cfi_def_cfa_offset 24
 1949 0202 8F93      		push r24
 1950               	.LCFI167:
 1951               		.cfi_def_cfa_offset 25
 1952 0204 80E0      		ldi r24,lo8(__c.3723)
 1953 0206 90E0      		ldi r25,hi8(__c.3723)
 1954 0208 9F93      		push r25
 1955               	.LCFI168:
 1956               		.cfi_def_cfa_offset 26
 1957 020a 8F93      		push r24
 1958               	.LCFI169:
 1959               		.cfi_def_cfa_offset 27
 1960 020c 0E94 0000 		call __xprintf
 604:tmk_core/common/command.c **** #    endif /* !NO_PRINT */
 1961               		.loc 1 604 0
 1962 0210 80E0      		ldi r24,lo8(__c.3725)
 1963 0212 90E0      		ldi r25,hi8(__c.3725)
 1964 0214 0E94 0000 		call xputs
 1965 0218 8DB7      		in r24,__SP_L__
 1966 021a 9EB7      		in r25,__SP_H__
 1967 021c 4896      		adiw r24,24
 1968 021e 0FB6      		in __tmp_reg__,__SREG__
 1969 0220 F894      		cli
 1970 0222 9EBF      		out __SP_H__,r25
 1971 0224 0FBE      		out __SREG__,__tmp_reg__
 1972 0226 8DBF      		out __SP_L__,r24
 1973               	.LCFI170:
 1974               		.cfi_def_cfa_offset 3
 1975 0228 00C0      		rjmp .L129
 1976               	.L118:
 1977               	.LBE161:
 1978               	.LBE160:
 752:tmk_core/common/command.c ****             break;
 1979               		.loc 1 752 0
 1980 022a 8C2F      		mov r24,r28
 1981 022c 0E94 0000 		call numkey2num
 1982 0230 8093 0000 		sts mousekey_param,r24
 1983 0234 00C0      		rjmp .L129
 1984               	.L127:
 755:tmk_core/common/command.c ****             break;
 1985               		.loc 1 755 0
 1986 0236 61E0      		ldi r22,lo8(1)
 1987 0238 00C0      		rjmp .L162
 1988               	.L126:
 758:tmk_core/common/command.c ****             break;
 1989               		.loc 1 758 0
 1990 023a 61E0      		ldi r22,lo8(1)
 1991 023c 00C0      		rjmp .L163
 1992               	.L124:
 761:tmk_core/common/command.c ****             break;
 1993               		.loc 1 761 0
 1994 023e 6AE0      		ldi r22,lo8(10)
 1995               	.L162:
 1996 0240 8091 0000 		lds r24,mousekey_param
 1997 0244 0E94 0000 		call mousekey_param_inc
 1998 0248 00C0      		rjmp .L129
 1999               	.L163:
 764:tmk_core/common/command.c ****             break;
 2000               		.loc 1 764 0
 2001 024a 8091 0000 		lds r24,mousekey_param
 2002 024e 0E94 0000 		call mousekey_param_dec
 2003 0252 00C0      		rjmp .L129
 2004               	.L116:
 776:tmk_core/common/command.c ****             return false;
 2005               		.loc 1 776 0
 2006 0254 80E0      		ldi r24,lo8(__c.3805)
 2007 0256 90E0      		ldi r25,hi8(__c.3805)
 2008 0258 00C0      		rjmp .L165
 2009               	.L129:
 779:tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 2010               		.loc 1 779 0
 2011 025a 8091 0000 		lds r24,mousekey_param
 2012 025e 8823      		tst r24
 2013 0260 01F0      		breq .L131
 780:tmk_core/common/command.c ****     } else {
 2014               		.loc 1 780 0
 2015 0262 1F92      		push __zero_reg__
 2016               	.LCFI171:
 2017               		.cfi_def_cfa_offset 4
 2018 0264 8F93      		push r24
 2019               	.LCFI172:
 2020               		.cfi_def_cfa_offset 5
 2021 0266 80E0      		ldi r24,lo8(__c.3807)
 2022 0268 90E0      		ldi r25,hi8(__c.3807)
 2023 026a 9F93      		push r25
 2024               	.LCFI173:
 2025               		.cfi_def_cfa_offset 6
 2026 026c 8F93      		push r24
 2027               	.LCFI174:
 2028               		.cfi_def_cfa_offset 7
 2029 026e 0E94 0000 		call __xprintf
 2030 0272 0F90      		pop __tmp_reg__
 2031 0274 0F90      		pop __tmp_reg__
 2032 0276 0F90      		pop __tmp_reg__
 2033 0278 0F90      		pop __tmp_reg__
 2034               	.LCFI175:
 2035               		.cfi_def_cfa_offset 3
 2036 027a 00C0      		rjmp .L164
 2037               	.L131:
 782:tmk_core/common/command.c ****     }
 2038               		.loc 1 782 0
 2039 027c 80E0      		ldi r24,lo8(__c.3809)
 2040 027e 90E0      		ldi r25,hi8(__c.3809)
 2041               	.L165:
 2042 0280 0E94 0000 		call xputs
 2043               	.L164:
 2044               	.LBE159:
 2045               	.LBE158:
  97:tmk_core/common/command.c **** }
 2046               		.loc 1 97 0
 2047 0284 81E0      		ldi r24,lo8(1)
 2048 0286 00C0      		rjmp .L161
 2049               	.L169:
  94:tmk_core/common/command.c ****             return false;
 2050               		.loc 1 94 0
 2051 0288 1092 0000 		sts command_state,__zero_reg__
 2052               	.L133:
  79:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 2053               		.loc 1 79 0
 2054 028c 80E0      		ldi r24,0
 2055 028e 00C0      		rjmp .L161
 2056               	.L115:
  86:tmk_core/common/command.c ****             break;
 2057               		.loc 1 86 0
 2058 0290 80E0      		ldi r24,0
 2059 0292 00C0      		rjmp .L132
 2060               	.L161:
 2061               	/* epilogue start */
  98:tmk_core/common/command.c **** 
 2062               		.loc 1 98 0
 2063 0294 CF91      		pop r28
 2064 0296 0895      		ret
 2065               		.cfi_endproc
 2066               	.LFE19:
 2068               		.section	.rodata.CSWTCH.54,"a",@progbits
 2071               	CSWTCH.54:
 2072 0000 01        		.byte	1
 2073 0001 02        		.byte	2
 2074 0002 03        		.byte	3
 2075 0003 04        		.byte	4
 2076 0004 05        		.byte	5
 2077 0005 06        		.byte	6
 2078 0006 07        		.byte	7
 2079 0007 08        		.byte	8
 2080 0008 09        		.byte	9
 2081 0009 00        		.byte	0
 2082               		.section	.progmem.data.__c.3771,"a",@progbits
 2085               	__c.3771:
 2086 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2086      6865 656C 
 2086      5F74 696D 
 2086      655F 746F 
 2086      5F6D 6178 
 2087               		.section	.progmem.data.__c.3768,"a",@progbits
 2090               	__c.3768:
 2091 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2091      6865 656C 
 2091      5F6D 6178 
 2091      5F73 7065 
 2091      6564 203D 
 2092               		.section	.progmem.data.__c.3765,"a",@progbits
 2095               	__c.3765:
 2096 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2096      696D 655F 
 2096      746F 5F6D 
 2096      6178 203D 
 2096      2025 640A 
 2097               		.section	.progmem.data.__c.3762,"a",@progbits
 2100               	__c.3762:
 2101 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2101      6178 5F73 
 2101      7065 6564 
 2101      203D 2025 
 2101      640A 00
 2102               		.section	.progmem.data.__c.3759,"a",@progbits
 2105               	__c.3759:
 2106 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2106      6E74 6572 
 2106      7661 6C20 
 2106      3D20 2564 
 2106      0A00 
 2107               		.section	.progmem.data.__c.3755,"a",@progbits
 2110               	__c.3755:
 2111 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2111      656C 6179 
 2111      203D 2025 
 2111      640A 00
 2112               		.section	.progmem.data.__c.3748,"a",@progbits
 2115               	__c.3748:
 2116 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2116      6865 656C 
 2116      5F74 696D 
 2116      655F 746F 
 2116      5F6D 6178 
 2117               		.section	.progmem.data.__c.3745,"a",@progbits
 2120               	__c.3745:
 2121 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2121      6865 656C 
 2121      5F6D 6178 
 2121      5F73 7065 
 2121      6564 203D 
 2122               		.section	.progmem.data.__c.3742,"a",@progbits
 2125               	__c.3742:
 2126 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2126      696D 655F 
 2126      746F 5F6D 
 2126      6178 203D 
 2126      2025 640A 
 2127               		.section	.progmem.data.__c.3739,"a",@progbits
 2130               	__c.3739:
 2131 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2131      6178 5F73 
 2131      7065 6564 
 2131      203D 2025 
 2131      640A 00
 2132               		.section	.progmem.data.__c.3736,"a",@progbits
 2135               	__c.3736:
 2136 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2136      6E74 6572 
 2136      7661 6C20 
 2136      3D20 2564 
 2136      0A00 
 2137               		.section	.progmem.data.__c.3732,"a",@progbits
 2140               	__c.3732:
 2141 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2141      656C 6179 
 2141      203D 2025 
 2141      640A 00
 2142               		.section	.progmem.data.__c.3725,"a",@progbits
 2145               	__c.3725:
 2146 0000 0A00      		.string	"\n"
 2147               		.section	.progmem.data.__c.3723,"a",@progbits
 2150               	__c.3723:
 2151 0000 2575 00   		.string	"%u"
 2152               		.section	.progmem.data.__c.3721,"a",@progbits
 2155               	__c.3721:
 2156 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2156      6865 656C 
 2156      5F74 696D 
 2156      655F 746F 
 2156      5F6D 6178 
 2157               		.section	.progmem.data.__c.3719,"a",@progbits
 2160               	__c.3719:
 2161 0000 0A00      		.string	"\n"
 2162               		.section	.progmem.data.__c.3717,"a",@progbits
 2165               	__c.3717:
 2166 0000 2575 00   		.string	"%u"
 2167               		.section	.progmem.data.__c.3715,"a",@progbits
 2170               	__c.3715:
 2171 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2171      6865 656C 
 2171      5F6D 6178 
 2171      5F73 7065 
 2171      6564 3A20 
 2172               		.section	.progmem.data.__c.3713,"a",@progbits
 2175               	__c.3713:
 2176 0000 0A00      		.string	"\n"
 2177               		.section	.progmem.data.__c.3711,"a",@progbits
 2180               	__c.3711:
 2181 0000 2575 00   		.string	"%u"
 2182               		.section	.progmem.data.__c.3709,"a",@progbits
 2185               	__c.3709:
 2186 0000 343A 2074 		.string	"4: time_to_max: "
 2186      696D 655F 
 2186      746F 5F6D 
 2186      6178 3A20 
 2186      00
 2187               		.section	.progmem.data.__c.3707,"a",@progbits
 2190               	__c.3707:
 2191 0000 0A00      		.string	"\n"
 2192               		.section	.progmem.data.__c.3705,"a",@progbits
 2195               	__c.3705:
 2196 0000 2575 00   		.string	"%u"
 2197               		.section	.progmem.data.__c.3703,"a",@progbits
 2200               	__c.3703:
 2201 0000 333A 206D 		.string	"3: max_speed: "
 2201      6178 5F73 
 2201      7065 6564 
 2201      3A20 00
 2202               		.section	.progmem.data.__c.3701,"a",@progbits
 2205               	__c.3701:
 2206 0000 0A00      		.string	"\n"
 2207               		.section	.progmem.data.__c.3699,"a",@progbits
 2210               	__c.3699:
 2211 0000 2575 00   		.string	"%u"
 2212               		.section	.progmem.data.__c.3697,"a",@progbits
 2215               	__c.3697:
 2216 0000 323A 2069 		.string	"2: interval(ms): "
 2216      6E74 6572 
 2216      7661 6C28 
 2216      6D73 293A 
 2216      2000 
 2217               		.section	.progmem.data.__c.3695,"a",@progbits
 2220               	__c.3695:
 2221 0000 0A00      		.string	"\n"
 2222               		.section	.progmem.data.__c.3693,"a",@progbits
 2225               	__c.3693:
 2226 0000 2575 00   		.string	"%u"
 2227               		.section	.progmem.data.__c.3691,"a",@progbits
 2230               	__c.3691:
 2231 0000 313A 2064 		.string	"1: delay(*10ms): "
 2231      656C 6179 
 2231      282A 3130 
 2231      6D73 293A 
 2231      2000 
 2232               		.section	.progmem.data.__c.3689,"a",@progbits
 2235               	__c.3689:
 2236 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2236      5661 6C75 
 2236      6573 202D 
 2236      0A00 
 2237               		.section	.progmem.data.__c.3809,"a",@progbits
 2240               	__c.3809:
 2241 0000 4D3E 00   		.string	"M>"
 2242               		.section	.progmem.data.__c.3807,"a",@progbits
 2245               	__c.3807:
 2246 0000 4D25 643E 		.string	"M%d> "
 2246      2000 
 2247               		.section	.progmem.data.__c.3805,"a",@progbits
 2250               	__c.3805:
 2251 0000 3F00      		.string	"?"
 2252               		.section	.progmem.data.__c.3802,"a",@progbits
 2255               	__c.3802:
 2256 0000 7365 7420 		.string	"set default\n"
 2256      6465 6661 
 2256      756C 740A 
 2256      00
 2257               		.section	.progmem.data.__c.3788,"a",@progbits
 2260               	__c.3788:
 2261 0000 433E 2000 		.string	"C> "
 2262               		.section	.progmem.data.__c.3778,"a",@progbits
 2265               	__c.3778:
 2266 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2266      6520 6465 
 2266      6C74 613A 
 2266      2063 7572 
 2266      736F 723D 
 2267               		.section	.progmem.data.__c.3776,"a",@progbits
 2270               	__c.3776:
 2271 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2271      4D6F 7573 
 2271      656B 6579 
 2271      202D 0A45 
 2271      5343 2F71 
 2272               		.section	.progmem.data.__c.3681,"a",@progbits
 2275               	__c.3681:
 2276 0000 3F00      		.string	"?"
 2277               		.section	.progmem.data.__c.3678,"a",@progbits
 2280               	__c.3678:
 2281 0000 4D3E 2000 		.string	"M> "
 2282               		.section	.progmem.data.__c.3683,"a",@progbits
 2285               	__c.3683:
 2286 0000 433E 2000 		.string	"C> "
 2287               		.section	.progmem.data.__c.3827,"a",@progbits
 2290               	__c.3827:
 2291 0000 4C25 640A 		.string	"L%d\n"
 2291      00
 2292               		.section	.progmem.data.__c.3506,"a",@progbits
 2295               	__c.3506:
 2296 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2296      725F 7265 
 2296      6164 3332 
 2296      2829 3A20 
 2296      2530 346C 
 2297               		.section	.progmem.data.__c.3504,"a",@progbits
 2300               	__c.3504:
 2301 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2301      6F61 7264 
 2301      5F69 646C 
 2301      653A 2025 
 2301      580A 00
 2302               		.section	.progmem.data.__c.3502,"a",@progbits
 2305               	__c.3502:
 2306 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2306      6F61 7264 
 2306      5F70 726F 
 2306      746F 636F 
 2306      6C3A 2025 
 2307               		.section	.progmem.data.__c.3500,"a",@progbits
 2310               	__c.3500:
 2311 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2311      5F6B 6579 
 2311      626F 6172 
 2311      645F 6C65 
 2311      6473 2829 
 2312               		.section	.progmem.data.__c.3498,"a",@progbits
 2315               	__c.3498:
 2316 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2316      5374 6174 
 2316      7573 202D 
 2316      0A00 
 2317               		.section	.progmem.data.__c.3493,"a",@progbits
 2320               	__c.3493:
 2321 0000 4743 433A 		.string	"GCC: 5.4.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr35\n"
 2321      2035 2E34 
 2321      2E30 2041 
 2321      5652 2D4C 
 2321      4942 433A 
 2322               		.section	.progmem.data.__c.3491,"a",@progbits
 2325               	__c.3491:
 2326 0000 4F50 5449 		.string	"OPTIONS: LUFA MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 2326      4F4E 533A 
 2326      204C 5546 
 2326      4120 4D4F 
 2326      5553 454B 
 2327               		.section	.progmem.data.__c.3489,"a",@progbits
 2330               	__c.3489:
 2331 0000 4255 494C 		.string	"BUILD: \"2f10d0-dirty\" (17:34:50 Jun  9 2020)\n"
 2331      443A 2022 
 2331      3266 3130 
 2331      6430 2D64 
 2331      6972 7479 
 2332               		.section	.progmem.data.__c.3487,"a",@progbits
 2335               	__c.3487:
 2336 0000 5649 443A 		.string	"VID: 0xFEED(Robin) PID: 0x0000(minim) VER: 0x0001\n"
 2336      2030 7846 
 2336      4545 4428 
 2336      526F 6269 
 2336      6E29 2050 
 2337               		.section	.progmem.data.__c.3485,"a",@progbits
 2340               	__c.3485:
 2341 0000 4445 5343 		.string	"DESC: A custom keyboard\n"
 2341      3A20 4120 
 2341      6375 7374 
 2341      6F6D 206B 
 2341      6579 626F 
 2342               		.section	.progmem.data.__c.3483,"a",@progbits
 2345               	__c.3483:
 2346 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2346      5665 7273 
 2346      696F 6E20 
 2346      2D0A 00
 2347               		.section	.progmem.data.__c.3667,"a",@progbits
 2350               	__c.3667:
 2351 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2351      436F 6E73 
 2351      6F6C 6520 
 2351      2D0A 4553 
 2351      432F 713A 
 2352               		.section	.progmem.data.__c.3478,"a",@progbits
 2355               	__c.3478:
 2356 0000 0A09 2D20 		.ascii	"\n\t- Magic -\nD:\tDebug Message Toggle\nX:\tMatrix Debug Mo"
 2356      4D61 6769 
 2356      6320 2D0A 
 2356      443A 0944 
 2356      6562 7567 
 2357 0036 6465 2054 		.ascii	"de Toggle - Show keypresses in matrix grid\nK:\tKeyboard Deb"
 2357      6F67 676C 
 2357      6520 2D20 
 2357      5368 6F77 
 2357      206B 6579 
 2358 0070 7567 2054 		.ascii	"ug Toggle - Show keypress report\nM:\tDebug Mouse To"
 2358      6F67 676C 
 2358      6520 2D20 
 2358      5368 6F77 
 2358      206B 6579 
 2359 00a2 6767 6C65 		.string	"ggle\nV:\tVersion\nS:\tStatus\nC:\tActivate Console Mode\nF1-F10:\tSwitch to Layer 0-9 (F
 2359      0A56 3A09 
 2359      5665 7273 
 2359      696F 6E0A 
 2359      533A 0953 
 2360               		.section	.progmem.data.__c.3613,"a",@progbits
 2363               	__c.3613:
 2364 0000 0A00      		.string	"\n"
 2365               		.section	.progmem.data.__c.3611,"a",@progbits
 2368               	__c.3611:
 2369 0000 2575 00   		.string	"%u"
 2370               		.section	.progmem.data.__c.3609,"a",@progbits
 2373               	__c.3609:
 2374 0000 2E6E 6B72 		.string	".nkro: "
 2374      6F3A 2000 
 2375               		.section	.progmem.data.__c.3607,"a",@progbits
 2378               	__c.3607:
 2379 0000 0A00      		.string	"\n"
 2380               		.section	.progmem.data.__c.3605,"a",@progbits
 2383               	__c.3605:
 2384 0000 2575 00   		.string	"%u"
 2385               		.section	.progmem.data.__c.3603,"a",@progbits
 2388               	__c.3603:
 2389 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2389      705F 6261 
 2389      636B 736C 
 2389      6173 685F 
 2389      6261 636B 
 2390               		.section	.progmem.data.__c.3601,"a",@progbits
 2393               	__c.3601:
 2394 0000 0A00      		.string	"\n"
 2395               		.section	.progmem.data.__c.3599,"a",@progbits
 2398               	__c.3599:
 2399 0000 2575 00   		.string	"%u"
 2400               		.section	.progmem.data.__c.3597,"a",@progbits
 2403               	__c.3597:
 2404 0000 2E73 7761 		.string	".swap_grave_esc: "
 2404      705F 6772 
 2404      6176 655F 
 2404      6573 633A 
 2404      2000 
 2405               		.section	.progmem.data.__c.3595,"a",@progbits
 2408               	__c.3595:
 2409 0000 0A00      		.string	"\n"
 2410               		.section	.progmem.data.__c.3593,"a",@progbits
 2413               	__c.3593:
 2414 0000 2575 00   		.string	"%u"
 2415               		.section	.progmem.data.__c.3591,"a",@progbits
 2418               	__c.3591:
 2419 0000 2E6E 6F5F 		.string	".no_gui: "
 2419      6775 693A 
 2419      2000 
 2420               		.section	.progmem.data.__c.3589,"a",@progbits
 2423               	__c.3589:
 2424 0000 0A00      		.string	"\n"
 2425               		.section	.progmem.data.__c.3587,"a",@progbits
 2428               	__c.3587:
 2429 0000 2575 00   		.string	"%u"
 2430               		.section	.progmem.data.__c.3585,"a",@progbits
 2433               	__c.3585:
 2434 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2434      705F 7261 
 2434      6C74 5F72 
 2434      6775 693A 
 2434      2000 
 2435               		.section	.progmem.data.__c.3583,"a",@progbits
 2438               	__c.3583:
 2439 0000 0A00      		.string	"\n"
 2440               		.section	.progmem.data.__c.3581,"a",@progbits
 2443               	__c.3581:
 2444 0000 2575 00   		.string	"%u"
 2445               		.section	.progmem.data.__c.3579,"a",@progbits
 2448               	__c.3579:
 2449 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2449      705F 6C61 
 2449      6C74 5F6C 
 2449      6775 693A 
 2449      2000 
 2450               		.section	.progmem.data.__c.3577,"a",@progbits
 2453               	__c.3577:
 2454 0000 0A00      		.string	"\n"
 2455               		.section	.progmem.data.__c.3575,"a",@progbits
 2458               	__c.3575:
 2459 0000 2575 00   		.string	"%u"
 2460               		.section	.progmem.data.__c.3573,"a",@progbits
 2463               	__c.3573:
 2464 0000 2E73 7761 		.string	".swap_rctl_rgui: "
 2464      705F 7263 
 2464      746C 5F72 
 2464      6775 693A 
 2464      2000 
 2465               		.section	.progmem.data.__c.3571,"a",@progbits
 2468               	__c.3571:
 2469 0000 0A00      		.string	"\n"
 2470               		.section	.progmem.data.__c.3569,"a",@progbits
 2473               	__c.3569:
 2474 0000 2575 00   		.string	"%u"
 2475               		.section	.progmem.data.__c.3567,"a",@progbits
 2478               	__c.3567:
 2479 0000 2E73 7761 		.string	".swap_lctl_lgui: "
 2479      705F 6C63 
 2479      746C 5F6C 
 2479      6775 693A 
 2479      2000 
 2480               		.section	.progmem.data.__c.3565,"a",@progbits
 2483               	__c.3565:
 2484 0000 0A00      		.string	"\n"
 2485               		.section	.progmem.data.__c.3563,"a",@progbits
 2488               	__c.3563:
 2489 0000 2575 00   		.string	"%u"
 2490               		.section	.progmem.data.__c.3561,"a",@progbits
 2493               	__c.3561:
 2494 0000 2E63 6170 		.string	".capslock_to_control: "
 2494      736C 6F63 
 2494      6B5F 746F 
 2494      5F63 6F6E 
 2494      7472 6F6C 
 2495               		.section	.progmem.data.__c.3559,"a",@progbits
 2498               	__c.3559:
 2499 0000 0A00      		.string	"\n"
 2500               		.section	.progmem.data.__c.3557,"a",@progbits
 2503               	__c.3557:
 2504 0000 2575 00   		.string	"%u"
 2505               		.section	.progmem.data.__c.3555,"a",@progbits
 2508               	__c.3555:
 2509 0000 2E73 7761 		.string	".swap_control_capslock: "
 2509      705F 636F 
 2509      6E74 726F 
 2509      6C5F 6361 
 2509      7073 6C6F 
 2510               		.section	.progmem.data.__c.3553,"a",@progbits
 2513               	__c.3553:
 2514 0000 0A00      		.string	"\n"
 2515               		.section	.progmem.data.__c.3551,"a",@progbits
 2518               	__c.3551:
 2519 0000 2530 3258 		.string	"%02X"
 2519      00
 2520               		.section	.progmem.data.__c.3549,"a",@progbits
 2523               	__c.3549:
 2524 0000 6B65 796D 		.string	"keymap_config.raw: "
 2524      6170 5F63 
 2524      6F6E 6669 
 2524      672E 7261 
 2524      773A 2000 
 2525               		.section	.progmem.data.__c.3546,"a",@progbits
 2528               	__c.3546:
 2529 0000 0A00      		.string	"\n"
 2530               		.section	.progmem.data.__c.3544,"a",@progbits
 2533               	__c.3544:
 2534 0000 2575 00   		.string	"%u"
 2535               		.section	.progmem.data.__c.3542,"a",@progbits
 2538               	__c.3542:
 2539 0000 2E6D 6F75 		.string	".mouse: "
 2539      7365 3A20 
 2539      00
 2540               		.section	.progmem.data.__c.3540,"a",@progbits
 2543               	__c.3540:
 2544 0000 0A00      		.string	"\n"
 2545               		.section	.progmem.data.__c.3538,"a",@progbits
 2548               	__c.3538:
 2549 0000 2575 00   		.string	"%u"
 2550               		.section	.progmem.data.__c.3536,"a",@progbits
 2553               	__c.3536:
 2554 0000 2E6B 6579 		.string	".keyboard: "
 2554      626F 6172 
 2554      643A 2000 
 2555               		.section	.progmem.data.__c.3534,"a",@progbits
 2558               	__c.3534:
 2559 0000 0A00      		.string	"\n"
 2560               		.section	.progmem.data.__c.3532,"a",@progbits
 2563               	__c.3532:
 2564 0000 2575 00   		.string	"%u"
 2565               		.section	.progmem.data.__c.3530,"a",@progbits
 2568               	__c.3530:
 2569 0000 2E6D 6174 		.string	".matrix: "
 2569      7269 783A 
 2569      2000 
 2570               		.section	.progmem.data.__c.3528,"a",@progbits
 2573               	__c.3528:
 2574 0000 0A00      		.string	"\n"
 2575               		.section	.progmem.data.__c.3526,"a",@progbits
 2578               	__c.3526:
 2579 0000 2575 00   		.string	"%u"
 2580               		.section	.progmem.data.__c.3524,"a",@progbits
 2583               	__c.3524:
 2584 0000 2E65 6E61 		.string	".enable: "
 2584      626C 653A 
 2584      2000 
 2585               		.section	.progmem.data.__c.3522,"a",@progbits
 2588               	__c.3522:
 2589 0000 0A00      		.string	"\n"
 2590               		.section	.progmem.data.__c.3520,"a",@progbits
 2593               	__c.3520:
 2594 0000 2530 3258 		.string	"%02X"
 2594      00
 2595               		.section	.progmem.data.__c.3518,"a",@progbits
 2598               	__c.3518:
 2599 0000 6465 6275 		.string	"debug_config.raw: "
 2599      675F 636F 
 2599      6E66 6967 
 2599      2E72 6177 
 2599      3A20 00
 2600               		.section	.progmem.data.__c.3515,"a",@progbits
 2603               	__c.3515:
 2604 0000 0A00      		.string	"\n"
 2605               		.section	.progmem.data.__c.3513,"a",@progbits
 2608               	__c.3513:
 2609 0000 2575 00   		.string	"%u"
 2610               		.section	.progmem.data.__c.3511,"a",@progbits
 2613               	__c.3511:
 2614 0000 6465 6661 		.string	"default_layer: "
 2614      756C 745F 
 2614      6C61 7965 
 2614      723A 2000 
 2615               		.section	.progmem.data.__c.3662,"a",@progbits
 2618               	__c.3662:
 2619 0000 3F00      		.string	"?"
 2620               		.section	.progmem.data.__c.3652,"a",@progbits
 2623               	__c.3652:
 2624 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2624      7365 3A20 
 2624      6F66 660A 
 2624      00
 2625               		.section	.progmem.data.__c.3650,"a",@progbits
 2628               	__c.3650:
 2629 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2629      7365 3A20 
 2629      6F6E 0A00 
 2630               		.section	.progmem.data.__c.3647,"a",@progbits
 2633               	__c.3647:
 2634 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2634      626F 6172 
 2634      643A 206F 
 2634      6666 0A00 
 2635               		.section	.progmem.data.__c.3645,"a",@progbits
 2638               	__c.3645:
 2639 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2639      626F 6172 
 2639      643A 206F 
 2639      6E0A 00
 2640               		.section	.progmem.data.__c.3642,"a",@progbits
 2643               	__c.3642:
 2644 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2644      7269 783A 
 2644      206F 6666 
 2644      0A00 
 2645               		.section	.progmem.data.__c.3640,"a",@progbits
 2648               	__c.3640:
 2649 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2649      7269 783A 
 2649      206F 6E0A 
 2649      00
 2650               		.section	.progmem.data.__c.3637,"a",@progbits
 2653               	__c.3637:
 2654 0000 0A64 6562 		.string	"\ndebug: off\n"
 2654      7567 3A20 
 2654      6F66 660A 
 2654      00
 2655               		.section	.progmem.data.__c.3635,"a",@progbits
 2658               	__c.3635:
 2659 0000 0A64 6562 		.string	"\ndebug: on\n"
 2659      7567 3A20 
 2659      6F6E 0A00 
 2660               		.section	.progmem.data.__c.3632,"a",@progbits
 2663               	__c.3632:
 2664 0000 0A0A 4A75 		.string	"\n\nJumping to bootloader... "
 2664      6D70 696E 
 2664      6720 746F 
 2664      2062 6F6F 
 2664      746C 6F61 
 2665               		.section	.progmem.data.__c.3628,"a",@progbits
 2668               	__c.3628:
 2669 0000 433E 2000 		.string	"C> "
 2670               		.section	.progmem.data.__c.3623,"a",@progbits
 2673               	__c.3623:
 2674 0000 436C 6561 		.string	"Clearing EEPROM\n"
 2674      7269 6E67 
 2674      2045 4550 
 2674      524F 4D0A 
 2674      00
 2675               		.section	.progmem.data.__c.3619,"a",@progbits
 2678               	__c.3619:
 2679 0000 6565 636F 		.string	"eeconfig:\n"
 2679      6E66 6967 
 2679      3A0A 00
 2680               		.section	.bss.mousekey_param,"aw",@nobits
 2683               	mousekey_param:
 2684 0000 00        		.zero	1
 2685               	.global	command_state
 2686               		.section	.bss.command_state,"aw",@nobits
 2689               	command_state:
 2690 0000 00        		.zero	1
 2691               		.text
 2692               	.Letext0:
 2693               		.file 3 "/usr/lib/avr/include/stdint.h"
 2694               		.file 4 "tmk_core/common/report.h"
 2695               		.file 5 "tmk_core/common/debug.h"
 2696               		.file 6 "quantum/keycode_config.h"
 2697               		.file 7 "tmk_core/common/command.h"
 2698               		.file 8 "tmk_core/common/host.h"
 2699               		.file 9 "tmk_core/common/action_util.h"
 2700               		.file 10 "tmk_core/common/mousekey.h"
 2701               		.file 11 "tmk_core/common/avr/xprintf.h"
 2702               		.file 12 "tmk_core/common/action_layer.h"
 2703               		.file 13 "tmk_core/common/action.h"
 2704               		.file 14 "tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccNEG0iR.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNEG0iR.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNEG0iR.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNEG0iR.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNEG0iR.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNEG0iR.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccNEG0iR.s:2270   .progmem.data.__c.3776:0000000000000000 __c.3776
     /tmp/ccNEG0iR.s:2265   .progmem.data.__c.3778:0000000000000000 __c.3778
     /tmp/ccNEG0iR.s:66     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccNEG0iR.s:2140   .progmem.data.__c.3732:0000000000000000 __c.3732
     /tmp/ccNEG0iR.s:2135   .progmem.data.__c.3736:0000000000000000 __c.3736
     /tmp/ccNEG0iR.s:2130   .progmem.data.__c.3739:0000000000000000 __c.3739
     /tmp/ccNEG0iR.s:2125   .progmem.data.__c.3742:0000000000000000 __c.3742
     /tmp/ccNEG0iR.s:2120   .progmem.data.__c.3745:0000000000000000 __c.3745
     /tmp/ccNEG0iR.s:2115   .progmem.data.__c.3748:0000000000000000 __c.3748
     /tmp/ccNEG0iR.s:339    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccNEG0iR.s:2110   .progmem.data.__c.3755:0000000000000000 __c.3755
     /tmp/ccNEG0iR.s:2105   .progmem.data.__c.3759:0000000000000000 __c.3759
     /tmp/ccNEG0iR.s:2100   .progmem.data.__c.3762:0000000000000000 __c.3762
     /tmp/ccNEG0iR.s:2095   .progmem.data.__c.3765:0000000000000000 __c.3765
     /tmp/ccNEG0iR.s:2090   .progmem.data.__c.3768:0000000000000000 __c.3768
     /tmp/ccNEG0iR.s:2085   .progmem.data.__c.3771:0000000000000000 __c.3771
     /tmp/ccNEG0iR.s:557    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccNEG0iR.s:2290   .progmem.data.__c.3827:0000000000000000 __c.3827
     /tmp/ccNEG0iR.s:626    .text.command_common:0000000000000000 command_common
     /tmp/ccNEG0iR.s:2678   .progmem.data.__c.3619:0000000000000000 __c.3619
     /tmp/ccNEG0iR.s:2613   .progmem.data.__c.3511:0000000000000000 __c.3511
     /tmp/ccNEG0iR.s:2608   .progmem.data.__c.3513:0000000000000000 __c.3513
     /tmp/ccNEG0iR.s:2603   .progmem.data.__c.3515:0000000000000000 __c.3515
     /tmp/ccNEG0iR.s:2598   .progmem.data.__c.3518:0000000000000000 __c.3518
     /tmp/ccNEG0iR.s:2593   .progmem.data.__c.3520:0000000000000000 __c.3520
     /tmp/ccNEG0iR.s:2588   .progmem.data.__c.3522:0000000000000000 __c.3522
     /tmp/ccNEG0iR.s:2583   .progmem.data.__c.3524:0000000000000000 __c.3524
     /tmp/ccNEG0iR.s:2578   .progmem.data.__c.3526:0000000000000000 __c.3526
     /tmp/ccNEG0iR.s:2573   .progmem.data.__c.3528:0000000000000000 __c.3528
     /tmp/ccNEG0iR.s:2568   .progmem.data.__c.3530:0000000000000000 __c.3530
     /tmp/ccNEG0iR.s:2563   .progmem.data.__c.3532:0000000000000000 __c.3532
     /tmp/ccNEG0iR.s:2558   .progmem.data.__c.3534:0000000000000000 __c.3534
     /tmp/ccNEG0iR.s:2553   .progmem.data.__c.3536:0000000000000000 __c.3536
     /tmp/ccNEG0iR.s:2548   .progmem.data.__c.3538:0000000000000000 __c.3538
     /tmp/ccNEG0iR.s:2543   .progmem.data.__c.3540:0000000000000000 __c.3540
     /tmp/ccNEG0iR.s:2538   .progmem.data.__c.3542:0000000000000000 __c.3542
     /tmp/ccNEG0iR.s:2533   .progmem.data.__c.3544:0000000000000000 __c.3544
     /tmp/ccNEG0iR.s:2528   .progmem.data.__c.3546:0000000000000000 __c.3546
     /tmp/ccNEG0iR.s:2523   .progmem.data.__c.3549:0000000000000000 __c.3549
     /tmp/ccNEG0iR.s:2518   .progmem.data.__c.3551:0000000000000000 __c.3551
     /tmp/ccNEG0iR.s:2513   .progmem.data.__c.3553:0000000000000000 __c.3553
     /tmp/ccNEG0iR.s:2508   .progmem.data.__c.3555:0000000000000000 __c.3555
     /tmp/ccNEG0iR.s:2503   .progmem.data.__c.3557:0000000000000000 __c.3557
     /tmp/ccNEG0iR.s:2498   .progmem.data.__c.3559:0000000000000000 __c.3559
     /tmp/ccNEG0iR.s:2493   .progmem.data.__c.3561:0000000000000000 __c.3561
     /tmp/ccNEG0iR.s:2488   .progmem.data.__c.3563:0000000000000000 __c.3563
     /tmp/ccNEG0iR.s:2483   .progmem.data.__c.3565:0000000000000000 __c.3565
     /tmp/ccNEG0iR.s:2478   .progmem.data.__c.3567:0000000000000000 __c.3567
     /tmp/ccNEG0iR.s:2473   .progmem.data.__c.3569:0000000000000000 __c.3569
     /tmp/ccNEG0iR.s:2468   .progmem.data.__c.3571:0000000000000000 __c.3571
     /tmp/ccNEG0iR.s:2463   .progmem.data.__c.3573:0000000000000000 __c.3573
     /tmp/ccNEG0iR.s:2458   .progmem.data.__c.3575:0000000000000000 __c.3575
     /tmp/ccNEG0iR.s:2453   .progmem.data.__c.3577:0000000000000000 __c.3577
     /tmp/ccNEG0iR.s:2448   .progmem.data.__c.3579:0000000000000000 __c.3579
     /tmp/ccNEG0iR.s:2443   .progmem.data.__c.3581:0000000000000000 __c.3581
     /tmp/ccNEG0iR.s:2438   .progmem.data.__c.3583:0000000000000000 __c.3583
     /tmp/ccNEG0iR.s:2433   .progmem.data.__c.3585:0000000000000000 __c.3585
     /tmp/ccNEG0iR.s:2428   .progmem.data.__c.3587:0000000000000000 __c.3587
     /tmp/ccNEG0iR.s:2423   .progmem.data.__c.3589:0000000000000000 __c.3589
     /tmp/ccNEG0iR.s:2418   .progmem.data.__c.3591:0000000000000000 __c.3591
     /tmp/ccNEG0iR.s:2413   .progmem.data.__c.3593:0000000000000000 __c.3593
     /tmp/ccNEG0iR.s:2408   .progmem.data.__c.3595:0000000000000000 __c.3595
     /tmp/ccNEG0iR.s:2403   .progmem.data.__c.3597:0000000000000000 __c.3597
     /tmp/ccNEG0iR.s:2398   .progmem.data.__c.3599:0000000000000000 __c.3599
     /tmp/ccNEG0iR.s:2393   .progmem.data.__c.3601:0000000000000000 __c.3601
     /tmp/ccNEG0iR.s:2388   .progmem.data.__c.3603:0000000000000000 __c.3603
     /tmp/ccNEG0iR.s:2383   .progmem.data.__c.3605:0000000000000000 __c.3605
     /tmp/ccNEG0iR.s:2378   .progmem.data.__c.3607:0000000000000000 __c.3607
     /tmp/ccNEG0iR.s:2373   .progmem.data.__c.3609:0000000000000000 __c.3609
     /tmp/ccNEG0iR.s:2368   .progmem.data.__c.3611:0000000000000000 __c.3611
     /tmp/ccNEG0iR.s:2363   .progmem.data.__c.3613:0000000000000000 __c.3613
     /tmp/ccNEG0iR.s:2345   .progmem.data.__c.3483:0000000000000000 __c.3483
     /tmp/ccNEG0iR.s:2340   .progmem.data.__c.3485:0000000000000000 __c.3485
     /tmp/ccNEG0iR.s:2335   .progmem.data.__c.3487:0000000000000000 __c.3487
     /tmp/ccNEG0iR.s:2330   .progmem.data.__c.3489:0000000000000000 __c.3489
     /tmp/ccNEG0iR.s:2325   .progmem.data.__c.3491:0000000000000000 __c.3491
     /tmp/ccNEG0iR.s:2320   .progmem.data.__c.3493:0000000000000000 __c.3493
     /tmp/ccNEG0iR.s:2673   .progmem.data.__c.3623:0000000000000000 __c.3623
     /tmp/ccNEG0iR.s:2355   .progmem.data.__c.3478:0000000000000000 __c.3478
     /tmp/ccNEG0iR.s:2350   .progmem.data.__c.3667:0000000000000000 __c.3667
     /tmp/ccNEG0iR.s:2668   .progmem.data.__c.3628:0000000000000000 __c.3628
     /tmp/ccNEG0iR.s:2689   .bss.command_state:0000000000000000 command_state
     /tmp/ccNEG0iR.s:2663   .progmem.data.__c.3632:0000000000000000 __c.3632
     /tmp/ccNEG0iR.s:2658   .progmem.data.__c.3635:0000000000000000 __c.3635
     /tmp/ccNEG0iR.s:2653   .progmem.data.__c.3637:0000000000000000 __c.3637
     /tmp/ccNEG0iR.s:2648   .progmem.data.__c.3640:0000000000000000 __c.3640
     /tmp/ccNEG0iR.s:2643   .progmem.data.__c.3642:0000000000000000 __c.3642
     /tmp/ccNEG0iR.s:2638   .progmem.data.__c.3645:0000000000000000 __c.3645
     /tmp/ccNEG0iR.s:2633   .progmem.data.__c.3647:0000000000000000 __c.3647
     /tmp/ccNEG0iR.s:2628   .progmem.data.__c.3650:0000000000000000 __c.3650
     /tmp/ccNEG0iR.s:2623   .progmem.data.__c.3652:0000000000000000 __c.3652
     /tmp/ccNEG0iR.s:2315   .progmem.data.__c.3498:0000000000000000 __c.3498
     /tmp/ccNEG0iR.s:2310   .progmem.data.__c.3500:0000000000000000 __c.3500
     /tmp/ccNEG0iR.s:2305   .progmem.data.__c.3502:0000000000000000 __c.3502
     /tmp/ccNEG0iR.s:2300   .progmem.data.__c.3504:0000000000000000 __c.3504
     /tmp/ccNEG0iR.s:2295   .progmem.data.__c.3506:0000000000000000 __c.3506
     /tmp/ccNEG0iR.s:2618   .progmem.data.__c.3662:0000000000000000 __c.3662
     /tmp/ccNEG0iR.s:1540   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccNEG0iR.s:1540   .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccNEG0iR.s:1560   .text.command_extra:0000000000000000 command_extra
     /tmp/ccNEG0iR.s:1574   .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccNEG0iR.s:2071   .rodata.CSWTCH.54:0000000000000000 CSWTCH.54
     /tmp/ccNEG0iR.s:1605   .text.command_proc:0000000000000000 command_proc
     /tmp/ccNEG0iR.s:2280   .progmem.data.__c.3678:0000000000000000 __c.3678
     /tmp/ccNEG0iR.s:2285   .progmem.data.__c.3683:0000000000000000 __c.3683
     /tmp/ccNEG0iR.s:2275   .progmem.data.__c.3681:0000000000000000 __c.3681
     /tmp/ccNEG0iR.s:2255   .progmem.data.__c.3802:0000000000000000 __c.3802
     /tmp/ccNEG0iR.s:2683   .bss.mousekey_param:0000000000000000 mousekey_param
     /tmp/ccNEG0iR.s:2260   .progmem.data.__c.3788:0000000000000000 __c.3788
     /tmp/ccNEG0iR.s:2235   .progmem.data.__c.3689:0000000000000000 __c.3689
     /tmp/ccNEG0iR.s:2230   .progmem.data.__c.3691:0000000000000000 __c.3691
     /tmp/ccNEG0iR.s:2225   .progmem.data.__c.3693:0000000000000000 __c.3693
     /tmp/ccNEG0iR.s:2220   .progmem.data.__c.3695:0000000000000000 __c.3695
     /tmp/ccNEG0iR.s:2215   .progmem.data.__c.3697:0000000000000000 __c.3697
     /tmp/ccNEG0iR.s:2210   .progmem.data.__c.3699:0000000000000000 __c.3699
     /tmp/ccNEG0iR.s:2205   .progmem.data.__c.3701:0000000000000000 __c.3701
     /tmp/ccNEG0iR.s:2200   .progmem.data.__c.3703:0000000000000000 __c.3703
     /tmp/ccNEG0iR.s:2195   .progmem.data.__c.3705:0000000000000000 __c.3705
     /tmp/ccNEG0iR.s:2190   .progmem.data.__c.3707:0000000000000000 __c.3707
     /tmp/ccNEG0iR.s:2185   .progmem.data.__c.3709:0000000000000000 __c.3709
     /tmp/ccNEG0iR.s:2180   .progmem.data.__c.3711:0000000000000000 __c.3711
     /tmp/ccNEG0iR.s:2175   .progmem.data.__c.3713:0000000000000000 __c.3713
     /tmp/ccNEG0iR.s:2170   .progmem.data.__c.3715:0000000000000000 __c.3715
     /tmp/ccNEG0iR.s:2165   .progmem.data.__c.3717:0000000000000000 __c.3717
     /tmp/ccNEG0iR.s:2160   .progmem.data.__c.3719:0000000000000000 __c.3719
     /tmp/ccNEG0iR.s:2155   .progmem.data.__c.3721:0000000000000000 __c.3721
     /tmp/ccNEG0iR.s:2150   .progmem.data.__c.3723:0000000000000000 __c.3723
     /tmp/ccNEG0iR.s:2145   .progmem.data.__c.3725:0000000000000000 __c.3725
     /tmp/ccNEG0iR.s:2250   .progmem.data.__c.3805:0000000000000000 __c.3805
     /tmp/ccNEG0iR.s:2245   .progmem.data.__c.3807:0000000000000000 __c.3807
     /tmp/ccNEG0iR.s:2240   .progmem.data.__c.3809:0000000000000000 __c.3809

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
eeconfig_init
debug_config
bootloader_jump
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
get_mods
__do_copy_data
__do_clear_bss
