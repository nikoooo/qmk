   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB6:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  34:tmk_core/common/keyboard.c **** #    include "backlight.h"
  35:tmk_core/common/keyboard.c **** #endif
  36:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  37:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  38:tmk_core/common/keyboard.c **** #else
  39:tmk_core/common/keyboard.c **** #    include "magic.h"
  40:tmk_core/common/keyboard.c **** #endif
  41:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  42:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  43:tmk_core/common/keyboard.c **** #endif
  44:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  45:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  46:tmk_core/common/keyboard.c **** #endif
  47:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  48:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  49:tmk_core/common/keyboard.c **** #endif
  50:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  51:tmk_core/common/keyboard.c **** #    include "adb.h"
  52:tmk_core/common/keyboard.c **** #endif
  53:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  54:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  55:tmk_core/common/keyboard.c **** #endif
  56:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  57:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  58:tmk_core/common/keyboard.c **** #endif
  59:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  60:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  61:tmk_core/common/keyboard.c **** #endif
  62:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  63:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  64:tmk_core/common/keyboard.c **** #endif
  65:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  66:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  67:tmk_core/common/keyboard.c **** #endif
  68:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  69:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  70:tmk_core/common/keyboard.c **** #endif
  71:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  72:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  73:tmk_core/common/keyboard.c **** #endif
  74:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  75:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  76:tmk_core/common/keyboard.c **** #endif
  77:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  78:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  79:tmk_core/common/keyboard.c **** #endif
  80:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  81:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  82:tmk_core/common/keyboard.c **** #endif
  83:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  84:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  85:tmk_core/common/keyboard.c **** #endif
  86:tmk_core/common/keyboard.c **** 
  87:tmk_core/common/keyboard.c **** // Only enable this if console is enabled to print to
  88:tmk_core/common/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
  89:tmk_core/common/keyboard.c **** static uint32_t matrix_timer      = 0;
  90:tmk_core/common/keyboard.c **** static uint32_t matrix_scan_count = 0;
  91:tmk_core/common/keyboard.c **** 
  92:tmk_core/common/keyboard.c **** void matrix_scan_perf_task(void) {
  93:tmk_core/common/keyboard.c ****     matrix_scan_count++;
  94:tmk_core/common/keyboard.c **** 
  95:tmk_core/common/keyboard.c ****     uint32_t timer_now = timer_read32();
  96:tmk_core/common/keyboard.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer) > 1000) {
  97:tmk_core/common/keyboard.c ****         dprintf("matrix scan frequency: %d\n", matrix_scan_count);
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c ****         matrix_timer      = timer_now;
 100:tmk_core/common/keyboard.c ****         matrix_scan_count = 0;
 101:tmk_core/common/keyboard.c ****     }
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** #else
 104:tmk_core/common/keyboard.c **** #    define matrix_scan_perf_task()
 105:tmk_core/common/keyboard.c **** #endif
 106:tmk_core/common/keyboard.c **** 
 107:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 108:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 109:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
 110:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
 111:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 112:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
 113:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
 114:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
 115:tmk_core/common/keyboard.c ****             out |= 1 << col;
 116:tmk_core/common/keyboard.c ****         }
 117:tmk_core/common/keyboard.c ****     }
 118:tmk_core/common/keyboard.c ****     return out;
 119:tmk_core/common/keyboard.c **** }
 120:tmk_core/common/keyboard.c **** 
 121:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 122:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 123:tmk_core/common/keyboard.c ****     return rowdata;
 124:tmk_core/common/keyboard.c **** }
 125:tmk_core/common/keyboard.c **** 
 126:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 127:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 128:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 129:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 130:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 131:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 132:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 133:tmk_core/common/keyboard.c ****         return false;
 134:tmk_core/common/keyboard.c ****     }
 135:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 136:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 137:tmk_core/common/keyboard.c ****     so they are filtered out.
 138:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 139:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 140:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 141:tmk_core/common/keyboard.c ****     */
 142:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 143:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 144:tmk_core/common/keyboard.c ****             return true;
 145:tmk_core/common/keyboard.c ****         }
 146:tmk_core/common/keyboard.c ****     }
 147:tmk_core/common/keyboard.c ****     return false;
 148:tmk_core/common/keyboard.c **** }
 149:tmk_core/common/keyboard.c **** 
 150:tmk_core/common/keyboard.c **** #endif
 151:tmk_core/common/keyboard.c **** 
 152:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 152 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE6:
  26               		.section	.text.keyboard_post_init_user,"ax",@progbits
  27               		.weak	keyboard_post_init_user
  29               	keyboard_post_init_user:
  30               	.LFB10:
 153:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 154:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 155:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 156:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 157:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 158:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 159:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 160:tmk_core/common/keyboard.c **** #endif
 161:tmk_core/common/keyboard.c **** }
 162:tmk_core/common/keyboard.c **** 
 163:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 164:tmk_core/common/keyboard.c ****  *
 165:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 166:tmk_core/common/keyboard.c ****  */
 167:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 168:tmk_core/common/keyboard.c **** 
 169:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 170:tmk_core/common/keyboard.c ****  *
 171:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 172:tmk_core/common/keyboard.c ****  */
 173:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
 174:tmk_core/common/keyboard.c **** 
 175:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 176:tmk_core/common/keyboard.c ****  *
 177:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 178:tmk_core/common/keyboard.c ****  */
 179:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
 180:tmk_core/common/keyboard.c **** 
 181:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 182:tmk_core/common/keyboard.c ****  *
 183:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 184:tmk_core/common/keyboard.c ****  */
 185:tmk_core/common/keyboard.c **** 
 186:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
  31               		.loc 1 186 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE10:
  41               		.set	keyboard_post_init_user.localalias.0,keyboard_post_init_user
  42               		.section	.text.keyboard_pre_init_user,"ax",@progbits
  43               		.weak	keyboard_pre_init_user
  45               	keyboard_pre_init_user:
  46               	.LFB18:
  47               		.cfi_startproc
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 0 */
  51               	.L__stack_usage = 0
  52 0000 0C94 0000 		jmp keyboard_post_init_user.localalias.0
  53               		.cfi_endproc
  54               	.LFE18:
  56               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
  57               		.weak	keyboard_pre_init_kb
  59               	keyboard_pre_init_kb:
  60               	.LFB9:
 179:tmk_core/common/keyboard.c **** 
  61               		.loc 1 179 0
  62               		.cfi_startproc
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 0 */
  66               	.L__stack_usage = 0
 179:tmk_core/common/keyboard.c **** 
  67               		.loc 1 179 0
  68 0000 0C94 0000 		jmp keyboard_pre_init_user
  69               	.LVL0:
  70               		.cfi_endproc
  71               	.LFE9:
  73               		.section	.text.matrix_setup,"ax",@progbits
  74               		.weak	matrix_setup
  76               	matrix_setup:
  77               	.LFB20:
  78               		.cfi_startproc
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  83 0000 0C94 0000 		jmp keyboard_post_init_user.localalias.0
  84               		.cfi_endproc
  85               	.LFE20:
  87               		.section	.text.keyboard_post_init_kb,"ax",@progbits
  88               		.weak	keyboard_post_init_kb
  90               	keyboard_post_init_kb:
  91               	.LFB11:
 187:tmk_core/common/keyboard.c **** 
 188:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 189:tmk_core/common/keyboard.c ****  *
 190:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 191:tmk_core/common/keyboard.c ****  */
 192:tmk_core/common/keyboard.c **** 
 193:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
  92               		.loc 1 193 0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  98               		.loc 1 193 0
  99 0000 0C94 0000 		jmp keyboard_post_init_user
 100               	.LVL1:
 101               		.cfi_endproc
 102               	.LFE11:
 104               		.section	.text.keyboard_setup,"ax",@progbits
 105               	.global	keyboard_setup
 107               	keyboard_setup:
 108               	.LFB12:
 194:tmk_core/common/keyboard.c **** 
 195:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 196:tmk_core/common/keyboard.c ****  *
 197:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 198:tmk_core/common/keyboard.c ****  */
 199:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 109               		.loc 1 199 0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
 200:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 201:tmk_core/common/keyboard.c ****     disable_jtag();
 202:tmk_core/common/keyboard.c **** #endif
 203:tmk_core/common/keyboard.c ****     matrix_setup();
 115               		.loc 1 203 0
 116 0000 0E94 0000 		call matrix_setup
 117               	.LVL2:
 204:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 118               		.loc 1 204 0
 119 0004 0C94 0000 		jmp keyboard_pre_init_kb
 120               	.LVL3:
 121               		.cfi_endproc
 122               	.LFE12:
 124               		.section	.text.is_keyboard_master,"ax",@progbits
 125               		.weak	is_keyboard_master
 127               	is_keyboard_master:
 128               	.LFB13:
 205:tmk_core/common/keyboard.c **** }
 206:tmk_core/common/keyboard.c **** 
 207:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 208:tmk_core/common/keyboard.c ****  *
 209:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 210:tmk_core/common/keyboard.c ****  */
 211:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 129               		.loc 1 211 0
 130               		.cfi_startproc
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 0 */
 134               	.L__stack_usage = 0
 135               		.loc 1 211 0
 136 0000 81E0      		ldi r24,lo8(1)
 137 0002 0895      		ret
 138               		.cfi_endproc
 139               	.LFE13:
 141               		.section	.text.keyboard_init,"ax",@progbits
 142               	.global	keyboard_init
 144               	keyboard_init:
 145               	.LFB14:
 212:tmk_core/common/keyboard.c **** 
 213:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 214:tmk_core/common/keyboard.c ****  *
 215:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 216:tmk_core/common/keyboard.c ****  */
 217:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 146               		.loc 1 217 0
 147               		.cfi_startproc
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
 218:tmk_core/common/keyboard.c ****     timer_init();
 152               		.loc 1 218 0
 153 0000 0E94 0000 		call timer_init
 154               	.LVL4:
 219:tmk_core/common/keyboard.c ****     matrix_init();
 155               		.loc 1 219 0
 156 0004 0E94 0000 		call matrix_init
 157               	.LVL5:
 220:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 221:tmk_core/common/keyboard.c ****     qwiic_init();
 222:tmk_core/common/keyboard.c **** #endif
 223:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 224:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 225:tmk_core/common/keyboard.c **** #endif
 226:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 227:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 228:tmk_core/common/keyboard.c **** #endif
 229:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 230:tmk_core/common/keyboard.c ****     serial_mouse_init();
 231:tmk_core/common/keyboard.c **** #endif
 232:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 233:tmk_core/common/keyboard.c ****     adb_mouse_init();
 234:tmk_core/common/keyboard.c **** #endif
 235:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 236:tmk_core/common/keyboard.c ****     bootmagic();
 237:tmk_core/common/keyboard.c **** #else
 238:tmk_core/common/keyboard.c ****     magic();
 158               		.loc 1 238 0
 159 0008 0E94 0000 		call magic
 160               	.LVL6:
 239:tmk_core/common/keyboard.c **** #endif
 240:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 241:tmk_core/common/keyboard.c ****     backlight_init();
 242:tmk_core/common/keyboard.c **** #endif
 243:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 244:tmk_core/common/keyboard.c ****     rgblight_init();
 245:tmk_core/common/keyboard.c **** #endif
 246:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 247:tmk_core/common/keyboard.c ****     steno_init();
 248:tmk_core/common/keyboard.c **** #endif
 249:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 250:tmk_core/common/keyboard.c ****     fauxclicky_init();
 251:tmk_core/common/keyboard.c **** #endif
 252:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 253:tmk_core/common/keyboard.c ****     pointing_device_init();
 254:tmk_core/common/keyboard.c **** #endif
 255:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 256:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 257:tmk_core/common/keyboard.c **** #endif
 258:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 161               		.loc 1 258 0
 162 000c 0C94 0000 		jmp keyboard_post_init_kb
 163               	.LVL7:
 164               		.cfi_endproc
 165               	.LFE14:
 167               		.section	.text.keyboard_set_leds,"ax",@progbits
 168               	.global	keyboard_set_leds
 170               	keyboard_set_leds:
 171               	.LFB16:
 259:tmk_core/common/keyboard.c **** }
 260:tmk_core/common/keyboard.c **** 
 261:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 262:tmk_core/common/keyboard.c ****  *
 263:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 264:tmk_core/common/keyboard.c ****  *
 265:tmk_core/common/keyboard.c ****  * * scan matrix
 266:tmk_core/common/keyboard.c ****  * * handle mouse movements
 267:tmk_core/common/keyboard.c ****  * * run visualizer code
 268:tmk_core/common/keyboard.c ****  * * handle midi commands
 269:tmk_core/common/keyboard.c ****  * * light LEDs
 270:tmk_core/common/keyboard.c ****  *
 271:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 272:tmk_core/common/keyboard.c ****  */
 273:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 274:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 275:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 276:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 277:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 278:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 279:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 280:tmk_core/common/keyboard.c **** #endif
 281:tmk_core/common/keyboard.c **** 
 282:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 283:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 284:tmk_core/common/keyboard.c **** #else
 285:tmk_core/common/keyboard.c ****     matrix_scan();
 286:tmk_core/common/keyboard.c **** #endif
 287:tmk_core/common/keyboard.c **** 
 288:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 289:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 290:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 291:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 292:tmk_core/common/keyboard.c ****             if (matrix_change) {
 293:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 294:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 295:tmk_core/common/keyboard.c ****                     continue;
 296:tmk_core/common/keyboard.c ****                 }
 297:tmk_core/common/keyboard.c **** #endif
 298:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 299:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 300:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 301:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 302:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 303:tmk_core/common/keyboard.c ****                         });
 304:tmk_core/common/keyboard.c ****                         // record a processed key
 305:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 306:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 307:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 308:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 309:tmk_core/common/keyboard.c **** #endif
 310:tmk_core/common/keyboard.c ****                             // process a key per task call
 311:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 312:tmk_core/common/keyboard.c ****                     }
 313:tmk_core/common/keyboard.c ****                 }
 314:tmk_core/common/keyboard.c ****             }
 315:tmk_core/common/keyboard.c ****         }
 316:tmk_core/common/keyboard.c ****     }
 317:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 318:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 319:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 320:tmk_core/common/keyboard.c ****     if (!keys_processed)
 321:tmk_core/common/keyboard.c **** #endif
 322:tmk_core/common/keyboard.c ****         action_exec(TICK);
 323:tmk_core/common/keyboard.c **** 
 324:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 325:tmk_core/common/keyboard.c **** 
 326:tmk_core/common/keyboard.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 327:tmk_core/common/keyboard.c ****     matrix_scan_perf_task();
 328:tmk_core/common/keyboard.c **** #endif
 329:tmk_core/common/keyboard.c **** 
 330:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 331:tmk_core/common/keyboard.c ****     qwiic_task();
 332:tmk_core/common/keyboard.c **** #endif
 333:tmk_core/common/keyboard.c **** 
 334:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 335:tmk_core/common/keyboard.c ****     oled_task();
 336:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 337:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 338:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 339:tmk_core/common/keyboard.c **** #    endif
 340:tmk_core/common/keyboard.c **** #endif
 341:tmk_core/common/keyboard.c **** 
 342:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 343:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 344:tmk_core/common/keyboard.c ****     mousekey_task();
 345:tmk_core/common/keyboard.c **** #endif
 346:tmk_core/common/keyboard.c **** 
 347:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 348:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 349:tmk_core/common/keyboard.c **** #endif
 350:tmk_core/common/keyboard.c **** 
 351:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 352:tmk_core/common/keyboard.c ****     serial_mouse_task();
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 356:tmk_core/common/keyboard.c ****     adb_mouse_task();
 357:tmk_core/common/keyboard.c **** #endif
 358:tmk_core/common/keyboard.c **** 
 359:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 360:tmk_core/common/keyboard.c ****     serial_link_update();
 361:tmk_core/common/keyboard.c **** #endif
 362:tmk_core/common/keyboard.c **** 
 363:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 364:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 365:tmk_core/common/keyboard.c **** #endif
 366:tmk_core/common/keyboard.c **** 
 367:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 368:tmk_core/common/keyboard.c ****     pointing_device_task();
 369:tmk_core/common/keyboard.c **** #endif
 370:tmk_core/common/keyboard.c **** 
 371:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 372:tmk_core/common/keyboard.c ****     midi_task();
 373:tmk_core/common/keyboard.c **** #endif
 374:tmk_core/common/keyboard.c **** 
 375:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 376:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 377:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 378:tmk_core/common/keyboard.c ****     }
 379:tmk_core/common/keyboard.c **** #endif
 380:tmk_core/common/keyboard.c **** 
 381:tmk_core/common/keyboard.c ****     // update LED
 382:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 383:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 384:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 385:tmk_core/common/keyboard.c ****     }
 386:tmk_core/common/keyboard.c **** }
 387:tmk_core/common/keyboard.c **** 
 388:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 389:tmk_core/common/keyboard.c ****  *
 390:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 391:tmk_core/common/keyboard.c ****  */
 392:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 172               		.loc 1 392 0
 173               		.cfi_startproc
 174               	.LVL8:
 175 0000 CF93      		push r28
 176               	.LCFI0:
 177               		.cfi_def_cfa_offset 3
 178               		.cfi_offset 28, -2
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 1 */
 182               	.L__stack_usage = 1
 183 0002 C82F      		mov r28,r24
 393:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 184               		.loc 1 393 0
 185 0004 8091 0000 		lds r24,debug_config
 186               	.LVL9:
 187 0008 82FF      		sbrs r24,2
 188 000a 00C0      		rjmp .L12
 394:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 189               		.loc 1 394 0
 190 000c 80FF      		sbrs r24,0
 191 000e 00C0      		rjmp .L13
 192               		.loc 1 394 0 is_stmt 0 discriminator 1
 193 0010 80E0      		ldi r24,lo8(__c.2997)
 194 0012 90E0      		ldi r25,hi8(__c.2997)
 195 0014 0E94 0000 		call xputs
 196               	.LVL10:
 197               	.L13:
 395:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 198               		.loc 1 395 0 is_stmt 1
 199 0018 8091 0000 		lds r24,debug_config
 200 001c 80FF      		sbrs r24,0
 201 001e 00C0      		rjmp .L14
 202               		.loc 1 395 0 is_stmt 0 discriminator 1
 203 0020 1F92      		push __zero_reg__
 204               	.LCFI1:
 205               		.cfi_def_cfa_offset 4
 206 0022 CF93      		push r28
 207               	.LCFI2:
 208               		.cfi_def_cfa_offset 5
 209 0024 80E0      		ldi r24,lo8(__c.2999)
 210 0026 90E0      		ldi r25,hi8(__c.2999)
 211 0028 9F93      		push r25
 212               	.LCFI3:
 213               		.cfi_def_cfa_offset 6
 214 002a 8F93      		push r24
 215               	.LCFI4:
 216               		.cfi_def_cfa_offset 7
 217 002c 0E94 0000 		call __xprintf
 218               	.LVL11:
 219 0030 0F90      		pop __tmp_reg__
 220 0032 0F90      		pop __tmp_reg__
 221 0034 0F90      		pop __tmp_reg__
 222 0036 0F90      		pop __tmp_reg__
 223               	.LCFI5:
 224               		.cfi_def_cfa_offset 3
 225               	.L14:
 396:tmk_core/common/keyboard.c ****         debug("\n");
 226               		.loc 1 396 0 is_stmt 1
 227 0038 8091 0000 		lds r24,debug_config
 228 003c 80FF      		sbrs r24,0
 229 003e 00C0      		rjmp .L12
 230               		.loc 1 396 0 is_stmt 0 discriminator 1
 231 0040 80E0      		ldi r24,lo8(__c.3001)
 232 0042 90E0      		ldi r25,hi8(__c.3001)
 233 0044 0E94 0000 		call xputs
 234               	.LVL12:
 235               	.L12:
 397:tmk_core/common/keyboard.c ****     }
 398:tmk_core/common/keyboard.c ****     led_set(leds);
 236               		.loc 1 398 0 is_stmt 1
 237 0048 8C2F      		mov r24,r28
 238               	/* epilogue start */
 399:tmk_core/common/keyboard.c **** }
 239               		.loc 1 399 0
 240 004a CF91      		pop r28
 241               	.LVL13:
 398:tmk_core/common/keyboard.c **** }
 242               		.loc 1 398 0
 243 004c 0C94 0000 		jmp led_set
 244               	.LVL14:
 245               		.cfi_endproc
 246               	.LFE16:
 248               		.section	.text.keyboard_task,"ax",@progbits
 249               	.global	keyboard_task
 251               	keyboard_task:
 252               	.LFB15:
 273:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 253               		.loc 1 273 0
 254               		.cfi_startproc
 255 0000 5F92      		push r5
 256               	.LCFI6:
 257               		.cfi_def_cfa_offset 3
 258               		.cfi_offset 5, -2
 259 0002 6F92      		push r6
 260               	.LCFI7:
 261               		.cfi_def_cfa_offset 4
 262               		.cfi_offset 6, -3
 263 0004 7F92      		push r7
 264               	.LCFI8:
 265               		.cfi_def_cfa_offset 5
 266               		.cfi_offset 7, -4
 267 0006 8F92      		push r8
 268               	.LCFI9:
 269               		.cfi_def_cfa_offset 6
 270               		.cfi_offset 8, -5
 271 0008 9F92      		push r9
 272               	.LCFI10:
 273               		.cfi_def_cfa_offset 7
 274               		.cfi_offset 9, -6
 275 000a AF92      		push r10
 276               	.LCFI11:
 277               		.cfi_def_cfa_offset 8
 278               		.cfi_offset 10, -7
 279 000c BF92      		push r11
 280               	.LCFI12:
 281               		.cfi_def_cfa_offset 9
 282               		.cfi_offset 11, -8
 283 000e CF92      		push r12
 284               	.LCFI13:
 285               		.cfi_def_cfa_offset 10
 286               		.cfi_offset 12, -9
 287 0010 DF92      		push r13
 288               	.LCFI14:
 289               		.cfi_def_cfa_offset 11
 290               		.cfi_offset 13, -10
 291 0012 EF92      		push r14
 292               	.LCFI15:
 293               		.cfi_def_cfa_offset 12
 294               		.cfi_offset 14, -11
 295 0014 FF92      		push r15
 296               	.LCFI16:
 297               		.cfi_def_cfa_offset 13
 298               		.cfi_offset 15, -12
 299 0016 0F93      		push r16
 300               	.LCFI17:
 301               		.cfi_def_cfa_offset 14
 302               		.cfi_offset 16, -13
 303 0018 1F93      		push r17
 304               	.LCFI18:
 305               		.cfi_def_cfa_offset 15
 306               		.cfi_offset 17, -14
 307 001a CF93      		push r28
 308               	.LCFI19:
 309               		.cfi_def_cfa_offset 16
 310               		.cfi_offset 28, -15
 311 001c DF93      		push r29
 312               	.LCFI20:
 313               		.cfi_def_cfa_offset 17
 314               		.cfi_offset 29, -16
 315 001e CDB7      		in r28,__SP_L__
 316 0020 DEB7      		in r29,__SP_H__
 317               	.LCFI21:
 318               		.cfi_def_cfa_register 28
 319 0022 2A97      		sbiw r28,10
 320               	.LCFI22:
 321               		.cfi_def_cfa_offset 27
 322 0024 0FB6      		in __tmp_reg__,__SREG__
 323 0026 F894      		cli
 324 0028 DEBF      		out __SP_H__,r29
 325 002a 0FBE      		out __SREG__,__tmp_reg__
 326 002c CDBF      		out __SP_L__,r28
 327               	/* prologue: function */
 328               	/* frame size = 10 */
 329               	/* stack size = 25 */
 330               	.L__stack_usage = 25
 331               	.LVL15:
 285:tmk_core/common/keyboard.c **** #endif
 332               		.loc 1 285 0
 333 002e 0E94 0000 		call matrix_scan
 334               	.LVL16:
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 335               		.loc 1 288 0
 336 0032 0E94 0000 		call is_keyboard_master
 337               	.LVL17:
 338 0036 8111      		cpse r24,__zero_reg__
 339 0038 00C0      		rjmp .L27
 340               	.LVL18:
 341               	.L31:
 322:tmk_core/common/keyboard.c **** 
 342               		.loc 1 322 0
 343 003a 8FEF      		ldi r24,lo8(-1)
 344 003c 8983      		std Y+1,r24
 345 003e 8A83      		std Y+2,r24
 346 0040 1B82      		std Y+3,__zero_reg__
 347 0042 0E94 0000 		call timer_read
 348               	.LVL19:
 349 0046 8160      		ori r24,1
 350 0048 782F      		mov r23,r24
 351 004a 9D83      		std Y+5,r25
 352 004c 8C83      		std Y+4,r24
 353 004e 4981      		ldd r20,Y+1
 354 0050 5A81      		ldd r21,Y+2
 355 0052 6B81      		ldd r22,Y+3
 356 0054 8D81      		ldd r24,Y+5
 357 0056 0E94 0000 		call action_exec
 358               	.LVL20:
 359 005a 00C0      		rjmp .L28
 360               	.LVL21:
 361               	.L27:
 362 005c 90E0      		ldi r25,lo8(matrix_prev.2977)
 363 005e 692E      		mov r6,r25
 364 0060 90E0      		ldi r25,hi8(matrix_prev.2977)
 365 0062 792E      		mov r7,r25
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 366               		.loc 1 288 0
 367 0064 00E0      		ldi r16,0
 368 0066 10E0      		ldi r17,0
 369               	.LBB2:
 370               	.LBB3:
 300:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 371               		.loc 1 300 0
 372 0068 8824      		clr r8
 373 006a 8394      		inc r8
 374 006c 912C      		mov r9,__zero_reg__
 375               	.LVL22:
 376               	.L30:
 377 006e 502E      		mov r5,r16
 378               	.LVL23:
 379               	.LBE3:
 290:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 380               		.loc 1 290 0
 381 0070 802F      		mov r24,r16
 382 0072 0E94 0000 		call matrix_get_row
 383               	.LVL24:
 384 0076 6C01      		movw r12,r24
 385               	.LVL25:
 291:tmk_core/common/keyboard.c ****             if (matrix_change) {
 386               		.loc 1 291 0
 387 0078 F301      		movw r30,r6
 388 007a A190      		ld r10,Z+
 389 007c B190      		ld r11,Z+
 390 007e 3F01      		movw r6,r30
 391 0080 A826      		eor r10,r24
 392 0082 B926      		eor r11,r25
 393               	.LVL26:
 292:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 394               		.loc 1 292 0
 395 0084 A114      		cp r10,__zero_reg__
 396 0086 B104      		cpc r11,__zero_reg__
 397 0088 01F4      		brne .L29
 398               	.L36:
 399               	.LVL27:
 400 008a 0F5F      		subi r16,-1
 401 008c 1F4F      		sbci r17,-1
 402               	.LVL28:
 289:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 403               		.loc 1 289 0
 404 008e 0430      		cpi r16,4
 405 0090 1105      		cpc r17,__zero_reg__
 406 0092 01F4      		brne .L30
 407 0094 00C0      		rjmp .L31
 408               	.L29:
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 409               		.loc 1 298 0
 410 0096 8091 0000 		lds r24,debug_config
 411 009a 81FD      		sbrc r24,1
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 412               		.loc 1 298 0 is_stmt 0 discriminator 1
 413 009c 0E94 0000 		call matrix_print
 414               	.LVL29:
 415               	.L32:
 416               	.LBE2:
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 417               		.loc 1 288 0 is_stmt 1
 418 00a0 80E0      		ldi r24,0
 419 00a2 90E0      		ldi r25,0
 420               	.LVL30:
 421               	.L35:
 422               	.LBB5:
 423               	.LBB4:
 300:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 424               		.loc 1 300 0
 425 00a4 7401      		movw r14,r8
 426 00a6 082E      		mov r0,r24
 427 00a8 00C0      		rjmp 2f
 428               		1:
 429 00aa EE0C      		lsl r14
 430 00ac FF1C      		rol r15
 431               		2:
 432 00ae 0A94      		dec r0
 433 00b0 02F4      		brpl 1b
 434 00b2 9501      		movw r18,r10
 435 00b4 2E21      		and r18,r14
 436 00b6 3F21      		and r19,r15
 437 00b8 232B      		or r18,r19
 438 00ba 01F0      		breq .L33
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 439               		.loc 1 301 0
 440 00bc 8E83      		std Y+6,r24
 441 00be 5F82      		std Y+7,r5
 442 00c0 CE20      		and r12,r14
 443 00c2 DF20      		and r13,r15
 444               	.LVL31:
 445 00c4 81E0      		ldi r24,lo8(1)
 446               	.LVL32:
 447 00c6 CD28      		or r12,r13
 448 00c8 01F4      		brne .L34
 449 00ca 80E0      		ldi r24,0
 450               	.L34:
 451 00cc 8887      		std Y+8,r24
 302:tmk_core/common/keyboard.c ****                         });
 452               		.loc 1 302 0
 453 00ce 0E94 0000 		call timer_read
 454               	.LVL33:
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 455               		.loc 1 301 0
 456 00d2 8160      		ori r24,1
 457 00d4 782F      		mov r23,r24
 458 00d6 9A87      		std Y+10,r25
 459 00d8 8987      		std Y+9,r24
 460 00da 4E81      		ldd r20,Y+6
 461 00dc 5F81      		ldd r21,Y+7
 462 00de 6885      		ldd r22,Y+8
 463 00e0 8A85      		ldd r24,Y+10
 464 00e2 0E94 0000 		call action_exec
 465               	.LVL34:
 305:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 466               		.loc 1 305 0
 467 00e6 000F      		lsl r16
 468 00e8 111F      		rol r17
 469               	.LVL35:
 470 00ea F801      		movw r30,r16
 471 00ec E050      		subi r30,lo8(-(matrix_prev.2977))
 472 00ee F040      		sbci r31,hi8(-(matrix_prev.2977))
 473 00f0 8081      		ld r24,Z
 474 00f2 9181      		ldd r25,Z+1
 475 00f4 E826      		eor r14,r24
 476 00f6 F926      		eor r15,r25
 477 00f8 F182      		std Z+1,r15
 478 00fa E082      		st Z,r14
 311:tmk_core/common/keyboard.c ****                     }
 479               		.loc 1 311 0
 480 00fc 00C0      		rjmp .L28
 481               	.LVL36:
 482               	.L33:
 483 00fe 0196      		adiw r24,1
 484               	.LVL37:
 299:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 485               		.loc 1 299 0 discriminator 2
 486 0100 8D30      		cpi r24,13
 487 0102 9105      		cpc r25,__zero_reg__
 488 0104 01F4      		brne .L35
 489 0106 00C0      		rjmp .L36
 490               	.LVL38:
 491               	.L28:
 492               	.LBE4:
 493               	.LBE5:
 344:tmk_core/common/keyboard.c **** #endif
 494               		.loc 1 344 0
 495 0108 0E94 0000 		call mousekey_task
 496               	.LVL39:
 382:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 497               		.loc 1 382 0
 498 010c 0E94 0000 		call host_keyboard_leds
 499               	.LVL40:
 500 0110 9091 0000 		lds r25,led_status.2978
 501 0114 8917      		cp r24,r25
 502 0116 01F0      		breq .L26
 383:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 503               		.loc 1 383 0
 504 0118 0E94 0000 		call host_keyboard_leds
 505               	.LVL41:
 506 011c 8093 0000 		sts led_status.2978,r24
 507               	/* epilogue start */
 386:tmk_core/common/keyboard.c **** 
 508               		.loc 1 386 0
 509 0120 2A96      		adiw r28,10
 510 0122 0FB6      		in __tmp_reg__,__SREG__
 511 0124 F894      		cli
 512 0126 DEBF      		out __SP_H__,r29
 513 0128 0FBE      		out __SREG__,__tmp_reg__
 514 012a CDBF      		out __SP_L__,r28
 515 012c DF91      		pop r29
 516 012e CF91      		pop r28
 517 0130 1F91      		pop r17
 518 0132 0F91      		pop r16
 519 0134 FF90      		pop r15
 520 0136 EF90      		pop r14
 521 0138 DF90      		pop r13
 522 013a CF90      		pop r12
 523 013c BF90      		pop r11
 524 013e AF90      		pop r10
 525 0140 9F90      		pop r9
 526 0142 8F90      		pop r8
 527 0144 7F90      		pop r7
 528 0146 6F90      		pop r6
 529 0148 5F90      		pop r5
 384:tmk_core/common/keyboard.c ****     }
 530               		.loc 1 384 0
 531 014a 0C94 0000 		jmp keyboard_set_leds
 532               	.LVL42:
 533               	.L26:
 534               	/* epilogue start */
 386:tmk_core/common/keyboard.c **** 
 535               		.loc 1 386 0
 536 014e 2A96      		adiw r28,10
 537 0150 0FB6      		in __tmp_reg__,__SREG__
 538 0152 F894      		cli
 539 0154 DEBF      		out __SP_H__,r29
 540 0156 0FBE      		out __SREG__,__tmp_reg__
 541 0158 CDBF      		out __SP_L__,r28
 542 015a DF91      		pop r29
 543 015c CF91      		pop r28
 544 015e 1F91      		pop r17
 545 0160 0F91      		pop r16
 546 0162 FF90      		pop r15
 547 0164 EF90      		pop r14
 548 0166 DF90      		pop r13
 549 0168 CF90      		pop r12
 550 016a BF90      		pop r11
 551 016c AF90      		pop r10
 552 016e 9F90      		pop r9
 553 0170 8F90      		pop r8
 554 0172 7F90      		pop r7
 555 0174 6F90      		pop r6
 556 0176 5F90      		pop r5
 557 0178 0895      		ret
 558               		.cfi_endproc
 559               	.LFE15:
 561               		.section	.progmem.data.__c.3001,"a",@progbits
 564               	__c.3001:
 565 0000 0A00      		.string	"\n"
 566               		.section	.progmem.data.__c.2999,"a",@progbits
 569               	__c.2999:
 570 0000 2530 3258 		.string	"%02X"
 570      00
 571               		.section	.progmem.data.__c.2997,"a",@progbits
 574               	__c.2997:
 575 0000 6B65 7962 		.string	"keyboard_set_led: "
 575      6F61 7264 
 575      5F73 6574 
 575      5F6C 6564 
 575      3A20 00
 576               		.section	.bss.led_status.2978,"aw",@nobits
 579               	led_status.2978:
 580 0000 00        		.zero	1
 581               		.section	.bss.matrix_prev.2977,"aw",@nobits
 584               	matrix_prev.2977:
 585 0000 0000 0000 		.zero	8
 585      0000 0000 
 586               		.text
 587               	.Letext0:
 588               		.file 2 "/usr/lib/avr/include/stdint.h"
 589               		.file 3 "tmk_core/common/keyboard.h"
 590               		.file 4 "tmk_core/common/matrix.h"
 591               		.file 5 "tmk_core/common/debug.h"
 592               		.file 6 "tmk_core/common/timer.h"
 593               		.file 7 "tmk_core/common/magic.h"
 594               		.file 8 "tmk_core/common/avr/xprintf.h"
 595               		.file 9 "tmk_core/common/led.h"
 596               		.file 10 "tmk_core/common/action.h"
 597               		.file 11 "tmk_core/common/mousekey.h"
 598               		.file 12 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/cc2nHOnN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2nHOnN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2nHOnN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2nHOnN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2nHOnN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2nHOnN.s:13     .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/cc2nHOnN.s:29     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/cc2nHOnN.s:29     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user.localalias.0
     /tmp/cc2nHOnN.s:45     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/cc2nHOnN.s:59     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/cc2nHOnN.s:76     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/cc2nHOnN.s:90     .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/cc2nHOnN.s:107    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/cc2nHOnN.s:127    .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/cc2nHOnN.s:144    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/cc2nHOnN.s:170    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds
     /tmp/cc2nHOnN.s:574    .progmem.data.__c.2997:0000000000000000 __c.2997
     /tmp/cc2nHOnN.s:569    .progmem.data.__c.2999:0000000000000000 __c.2999
     /tmp/cc2nHOnN.s:564    .progmem.data.__c.3001:0000000000000000 __c.3001
     /tmp/cc2nHOnN.s:251    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/cc2nHOnN.s:584    .bss.matrix_prev.2977:0000000000000000 matrix_prev.2977
     /tmp/cc2nHOnN.s:579    .bss.led_status.2978:0000000000000000 led_status.2978

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
debug_config
xputs
__xprintf
led_set
matrix_scan
timer_read
action_exec
matrix_get_row
matrix_print
mousekey_task
host_keyboard_leds
__do_clear_bss
