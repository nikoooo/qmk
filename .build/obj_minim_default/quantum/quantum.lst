   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB30:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** #    include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #    include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
  28:quantum/quantum.c **** #    include "backlight.h"
  29:quantum/quantum.c **** extern backlight_config_t backlight_config;
  30:quantum/quantum.c **** #endif
  31:quantum/quantum.c **** 
  32:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  33:quantum/quantum.c **** #    include "fauxclicky.h"
  34:quantum/quantum.c **** #endif
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** #ifdef API_ENABLE
  37:quantum/quantum.c **** #    include "api.h"
  38:quantum/quantum.c **** #endif
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** #ifdef MIDI_ENABLE
  41:quantum/quantum.c **** #    include "process_midi.h"
  42:quantum/quantum.c **** #endif
  43:quantum/quantum.c **** 
  44:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  45:quantum/quantum.c **** #    include "velocikey.h"
  46:quantum/quantum.c **** #endif
  47:quantum/quantum.c **** 
  48:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  49:quantum/quantum.c **** #    include "haptic.h"
  50:quantum/quantum.c **** #endif
  51:quantum/quantum.c **** 
  52:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  53:quantum/quantum.c **** #    include "encoder.h"
  54:quantum/quantum.c **** #endif
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  57:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  58:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  59:quantum/quantum.c **** #    endif
  60:quantum/quantum.c **** #    ifndef AG_NORM_SONG
  61:quantum/quantum.c **** #        define AG_NORM_SONG SONG(AG_NORM_SOUND)
  62:quantum/quantum.c **** #    endif
  63:quantum/quantum.c **** #    ifndef AG_SWAP_SONG
  64:quantum/quantum.c **** #        define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  65:quantum/quantum.c **** #    endif
  66:quantum/quantum.c **** #    ifndef CG_NORM_SONG
  67:quantum/quantum.c **** #        define CG_NORM_SONG SONG(AG_NORM_SOUND)
  68:quantum/quantum.c **** #    endif
  69:quantum/quantum.c **** #    ifndef CG_SWAP_SONG
  70:quantum/quantum.c **** #        define CG_SWAP_SONG SONG(AG_SWAP_SOUND)
  71:quantum/quantum.c **** #    endif
  72:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  73:quantum/quantum.c **** float ag_norm_song[][2] = AG_NORM_SONG;
  74:quantum/quantum.c **** float ag_swap_song[][2] = AG_SWAP_SONG;
  75:quantum/quantum.c **** float cg_norm_song[][2] = CG_NORM_SONG;
  76:quantum/quantum.c **** float cg_swap_song[][2] = CG_SWAP_SONG;
  77:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  78:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  79:quantum/quantum.c **** #    endif
  80:quantum/quantum.c **** #endif
  81:quantum/quantum.c **** 
  82:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  15               		.loc 1 82 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  83:quantum/quantum.c ****     switch (code) {
  22               		.loc 1 83 0
  23 0000 9C01      		movw r18,r24
  24 0002 3A95      		dec r19
  25 0004 2115      		cp r18,__zero_reg__
  26 0006 3F41      		sbci r19,31
  27 0008 00F4      		brsh .L1
  28               	.LVL1:
  29 000a DC01      		movw r26,r24
  30 000c AA27      		clr r26
  31 000e B270      		andi r27,2
  32 0010 AC01      		movw r20,r24
  33 0012 4427      		clr r20
  34 0014 5470      		andi r21,4
  35 0016 9C01      		movw r18,r24
  36 0018 2227      		clr r18
  37 001a 3870      		andi r19,8
  84:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  85:quantum/quantum.c ****             break;
  86:quantum/quantum.c ****         default:
  87:quantum/quantum.c ****             return;
  88:quantum/quantum.c ****     }
  89:quantum/quantum.c **** 
  90:quantum/quantum.c ****     uint8_t mods_to_send = 0;
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****     if (code & QK_RMODS_MIN) {  // Right mod flag is set
  38               		.loc 1 92 0
  39 001c 94FF      		sbrs r25,4
  40 001e 00C0      		rjmp .L4
  93:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_RCTL);
  41               		.loc 1 93 0
  42 0020 90FF      		sbrs r25,0
  43 0022 00C0      		rjmp .L11
  44 0024 80E1      		ldi r24,lo8(16)
  45               	.LVL2:
  46 0026 00C0      		rjmp .L5
  47               	.LVL3:
  48               	.L11:
  90:quantum/quantum.c **** 
  49               		.loc 1 90 0
  50 0028 80E0      		ldi r24,0
  51               	.LVL4:
  52               	.L5:
  94:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_RSFT);
  53               		.loc 1 94 0
  54 002a AB2B      		or r26,r27
  55 002c 01F0      		breq .L6
  56               		.loc 1 94 0 is_stmt 0 discriminator 1
  57 002e 8062      		ori r24,lo8(32)
  58               	.LVL5:
  59               	.L6:
  95:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_RALT);
  60               		.loc 1 95 0 is_stmt 1
  61 0030 452B      		or r20,r21
  62 0032 01F0      		breq .L7
  63               		.loc 1 95 0 is_stmt 0 discriminator 1
  64 0034 8064      		ori r24,lo8(64)
  65               	.LVL6:
  66               	.L7:
  96:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_RGUI);
  67               		.loc 1 96 0 is_stmt 1
  68 0036 232B      		or r18,r19
  69 0038 01F0      		breq .L8
  70               		.loc 1 96 0 is_stmt 0 discriminator 1
  71 003a 8068      		ori r24,lo8(-128)
  72               	.LVL7:
  73 003c 00C0      		rjmp .L8
  74               	.LVL8:
  75               	.L4:
  90:quantum/quantum.c **** 
  76               		.loc 1 90 0 is_stmt 1
  77 003e 892F      		mov r24,r25
  78               	.LVL9:
  79 0040 8170      		andi r24,lo8(1)
  80               	.LVL10:
  97:quantum/quantum.c ****     } else {
  98:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_LCTL);
  99:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
  81               		.loc 1 99 0
  82 0042 AB2B      		or r26,r27
  83 0044 01F0      		breq .L9
  84               		.loc 1 99 0 is_stmt 0 discriminator 1
  85 0046 8260      		ori r24,lo8(2)
  86               	.LVL11:
  87               	.L9:
 100:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
  88               		.loc 1 100 0 is_stmt 1
  89 0048 452B      		or r20,r21
  90 004a 01F0      		breq .L10
  91               		.loc 1 100 0 is_stmt 0 discriminator 1
  92 004c 8460      		ori r24,lo8(4)
  93               	.LVL12:
  94               	.L10:
 101:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
  95               		.loc 1 101 0 is_stmt 1
  96 004e 232B      		or r18,r19
  97 0050 01F0      		breq .L8
  98               		.loc 1 101 0 is_stmt 0 discriminator 1
  99 0052 8860      		ori r24,lo8(8)
 100               	.LVL13:
 101               	.L8:
 102:quantum/quantum.c ****     }
 103:quantum/quantum.c **** 
 104:quantum/quantum.c ****     f(mods_to_send);
 102               		.loc 1 104 0 is_stmt 1
 103 0054 FB01      		movw r30,r22
 104 0056 0994      		ijmp
 105               	.LVL14:
 106               	.L1:
 107 0058 0895      		ret
 108               		.cfi_endproc
 109               	.LFE30:
 111               		.section	.text.register_code16,"ax",@progbits
 112               	.global	register_code16
 114               	register_code16:
 115               	.LFB31:
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** void register_code16(uint16_t code) {
 116               		.loc 1 107 0
 117               		.cfi_startproc
 118               	.LVL15:
 119 0000 CF93      		push r28
 120               	.LCFI0:
 121               		.cfi_def_cfa_offset 3
 122               		.cfi_offset 28, -2
 123 0002 DF93      		push r29
 124               	.LCFI1:
 125               		.cfi_def_cfa_offset 4
 126               		.cfi_offset 29, -3
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 2 */
 130               	.L__stack_usage = 2
 131 0004 EC01      		movw r28,r24
 108:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 132               		.loc 1 108 0
 133 0006 805E      		subi r24,-32
 134 0008 9109      		sbc r25,__zero_reg__
 135               	.LVL16:
 136 000a 0897      		sbiw r24,8
 137 000c 00F0      		brlo .L32
 138               		.loc 1 108 0 is_stmt 0 discriminator 1
 139 000e 2097      		sbiw r28,0
 140 0010 01F4      		brne .L33
 141               	.L32:
 109:quantum/quantum.c ****         do_code16(code, register_mods);
 142               		.loc 1 109 0 is_stmt 1
 143 0012 60E0      		ldi r22,lo8(gs(register_mods))
 144 0014 70E0      		ldi r23,hi8(gs(register_mods))
 145 0016 00C0      		rjmp .L35
 146               	.L33:
 110:quantum/quantum.c ****     } else {
 111:quantum/quantum.c ****         do_code16(code, register_weak_mods);
 147               		.loc 1 111 0
 148 0018 60E0      		ldi r22,lo8(gs(register_weak_mods))
 149 001a 70E0      		ldi r23,hi8(gs(register_weak_mods))
 150               	.L35:
 151 001c CE01      		movw r24,r28
 152 001e 0E94 0000 		call do_code16
 153               	.LVL17:
 112:quantum/quantum.c ****     }
 113:quantum/quantum.c ****     register_code(code);
 154               		.loc 1 113 0
 155 0022 8C2F      		mov r24,r28
 156               	/* epilogue start */
 114:quantum/quantum.c **** }
 157               		.loc 1 114 0
 158 0024 DF91      		pop r29
 159 0026 CF91      		pop r28
 160               	.LVL18:
 113:quantum/quantum.c **** }
 161               		.loc 1 113 0
 162 0028 0C94 0000 		jmp register_code
 163               	.LVL19:
 164               		.cfi_endproc
 165               	.LFE31:
 167               		.section	.text.unregister_code16,"ax",@progbits
 168               	.global	unregister_code16
 170               	unregister_code16:
 171               	.LFB32:
 115:quantum/quantum.c **** 
 116:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 172               		.loc 1 116 0
 173               		.cfi_startproc
 174               	.LVL20:
 175 0000 CF93      		push r28
 176               	.LCFI2:
 177               		.cfi_def_cfa_offset 3
 178               		.cfi_offset 28, -2
 179 0002 DF93      		push r29
 180               	.LCFI3:
 181               		.cfi_def_cfa_offset 4
 182               		.cfi_offset 29, -3
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 2 */
 186               	.L__stack_usage = 2
 187 0004 EC01      		movw r28,r24
 117:quantum/quantum.c ****     unregister_code(code);
 188               		.loc 1 117 0
 189 0006 0E94 0000 		call unregister_code
 190               	.LVL21:
 118:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 191               		.loc 1 118 0
 192 000a CE01      		movw r24,r28
 193 000c 805E      		subi r24,-32
 194 000e 9109      		sbc r25,__zero_reg__
 195 0010 0897      		sbiw r24,8
 196 0012 00F0      		brlo .L37
 197               		.loc 1 118 0 is_stmt 0 discriminator 1
 198 0014 2097      		sbiw r28,0
 199 0016 01F4      		brne .L38
 200               	.L37:
 119:quantum/quantum.c ****         do_code16(code, unregister_mods);
 201               		.loc 1 119 0 is_stmt 1
 202 0018 60E0      		ldi r22,lo8(gs(unregister_mods))
 203 001a 70E0      		ldi r23,hi8(gs(unregister_mods))
 204 001c 00C0      		rjmp .L39
 205               	.L38:
 120:quantum/quantum.c ****     } else {
 121:quantum/quantum.c ****         do_code16(code, unregister_weak_mods);
 206               		.loc 1 121 0
 207 001e 60E0      		ldi r22,lo8(gs(unregister_weak_mods))
 208 0020 70E0      		ldi r23,hi8(gs(unregister_weak_mods))
 209               	.L39:
 210 0022 CE01      		movw r24,r28
 211               	/* epilogue start */
 122:quantum/quantum.c ****     }
 123:quantum/quantum.c **** }
 212               		.loc 1 123 0
 213 0024 DF91      		pop r29
 214 0026 CF91      		pop r28
 215               	.LVL22:
 121:quantum/quantum.c ****     }
 216               		.loc 1 121 0
 217 0028 0C94 0000 		jmp do_code16
 218               	.LVL23:
 219               		.cfi_endproc
 220               	.LFE32:
 222               		.section	.text.tap_code16,"ax",@progbits
 223               	.global	tap_code16
 225               	tap_code16:
 226               	.LFB33:
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void tap_code16(uint16_t code) {
 227               		.loc 1 125 0
 228               		.cfi_startproc
 229               	.LVL24:
 230 0000 CF93      		push r28
 231               	.LCFI4:
 232               		.cfi_def_cfa_offset 3
 233               		.cfi_offset 28, -2
 234 0002 DF93      		push r29
 235               	.LCFI5:
 236               		.cfi_def_cfa_offset 4
 237               		.cfi_offset 29, -3
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 2 */
 241               	.L__stack_usage = 2
 242 0004 EC01      		movw r28,r24
 126:quantum/quantum.c ****     register_code16(code);
 243               		.loc 1 126 0
 244 0006 0E94 0000 		call register_code16
 245               	.LVL25:
 127:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 128:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 129:quantum/quantum.c **** #endif
 130:quantum/quantum.c ****     unregister_code16(code);
 246               		.loc 1 130 0
 247 000a CE01      		movw r24,r28
 248               	/* epilogue start */
 131:quantum/quantum.c **** }
 249               		.loc 1 131 0
 250 000c DF91      		pop r29
 251 000e CF91      		pop r28
 252               	.LVL26:
 130:quantum/quantum.c **** }
 253               		.loc 1 130 0
 254 0010 0C94 0000 		jmp unregister_code16
 255               	.LVL27:
 256               		.cfi_endproc
 257               	.LFE33:
 259               		.section	.text.process_action_kb,"ax",@progbits
 260               		.weak	process_action_kb
 262               	process_action_kb:
 263               	.LFB34:
 132:quantum/quantum.c **** 
 133:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 264               		.loc 1 133 0
 265               		.cfi_startproc
 266               	.LVL28:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
 271               		.loc 1 133 0
 272 0000 81E0      		ldi r24,lo8(1)
 273               	.LVL29:
 274 0002 0895      		ret
 275               		.cfi_endproc
 276               	.LFE34:
 278               		.section	.text.process_record_user,"ax",@progbits
 279               		.weak	process_record_user
 281               	process_record_user:
 282               	.LFB36:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 136:quantum/quantum.c **** 
 137:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 283               		.loc 1 137 0
 284               		.cfi_startproc
 285               	.LVL30:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 290               		.loc 1 137 0
 291 0000 81E0      		ldi r24,lo8(1)
 292               	.LVL31:
 293 0002 0895      		ret
 294               		.cfi_endproc
 295               	.LFE36:
 297               		.section	.text.process_record_kb,"ax",@progbits
 298               		.weak	process_record_kb
 300               	process_record_kb:
 301               	.LFB35:
 135:quantum/quantum.c **** 
 302               		.loc 1 135 0
 303               		.cfi_startproc
 304               	.LVL32:
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 0 */
 308               	.L__stack_usage = 0
 135:quantum/quantum.c **** 
 309               		.loc 1 135 0
 310 0000 0C94 0000 		jmp process_record_user
 311               	.LVL33:
 312               		.cfi_endproc
 313               	.LFE35:
 315               		.section	.text.get_event_keycode,"ax",@progbits
 316               	.global	get_event_keycode
 318               	get_event_keycode:
 319               	.LFB39:
 138:quantum/quantum.c **** 
 139:quantum/quantum.c **** void reset_keyboard(void) {
 140:quantum/quantum.c ****     clear_keyboard();
 141:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 142:quantum/quantum.c ****     process_midi_all_notes_off();
 143:quantum/quantum.c **** #endif
 144:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 145:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 146:quantum/quantum.c ****     music_all_notes_off();
 147:quantum/quantum.c **** #    endif
 148:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 149:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 150:quantum/quantum.c ****     shutdown_user();
 151:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 152:quantum/quantum.c ****     stop_all_notes();
 153:quantum/quantum.c **** #else
 154:quantum/quantum.c ****     shutdown_user();
 155:quantum/quantum.c ****     wait_ms(250);
 156:quantum/quantum.c **** #endif
 157:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 158:quantum/quantum.c ****     haptic_shutdown();
 159:quantum/quantum.c **** #endif
 160:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 161:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 162:quantum/quantum.c ****     *(uint16_t *)0x0800 = 0x7777;  // these two are a-star-specific
 163:quantum/quantum.c **** #endif
 164:quantum/quantum.c ****     bootloader_jump();
 165:quantum/quantum.c **** }
 166:quantum/quantum.c **** 
 167:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 168:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 169:quantum/quantum.c ****  */
 170:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 171:quantum/quantum.c **** 
 172:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 173:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 174:quantum/quantum.c **** 
 175:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 176:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 177:quantum/quantum.c ****  */
 178:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 320               		.loc 1 178 0
 321               		.cfi_startproc
 322 0000 1F93      		push r17
 323               	.LCFI6:
 324               		.cfi_def_cfa_offset 3
 325               		.cfi_offset 17, -2
 326 0002 CF93      		push r28
 327               	.LCFI7:
 328               		.cfi_def_cfa_offset 4
 329               		.cfi_offset 28, -3
 330 0004 DF93      		push r29
 331               	.LCFI8:
 332               		.cfi_def_cfa_offset 5
 333               		.cfi_offset 29, -4
 334 0006 00D0      		rcall .
 335 0008 00D0      		rcall .
 336 000a 1F92      		push __zero_reg__
 337               	.LCFI9:
 338               		.cfi_def_cfa_offset 10
 339 000c CDB7      		in r28,__SP_L__
 340 000e DEB7      		in r29,__SP_H__
 341               	.LCFI10:
 342               		.cfi_def_cfa_register 28
 343               	/* prologue: function */
 344               	/* frame size = 5 */
 345               	/* stack size = 8 */
 346               	.L__stack_usage = 8
 347 0010 4983      		std Y+1,r20
 348 0012 5A83      		std Y+2,r21
 349 0014 6B83      		std Y+3,r22
 179:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 180:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 181:quantum/quantum.c ****     if (!disable_action_cache) {
 350               		.loc 1 181 0
 351 0016 2091 0000 		lds r18,disable_action_cache
 352 001a 8981      		ldd r24,Y+1
 353 001c 9A81      		ldd r25,Y+2
 354 001e 2111      		cpse r18,__zero_reg__
 355 0020 00C0      		rjmp .L45
 356               	.LBB31:
 182:quantum/quantum.c ****         uint8_t layer;
 183:quantum/quantum.c **** 
 184:quantum/quantum.c ****         if (event.pressed) {
 357               		.loc 1 184 0
 358 0022 6623      		tst r22
 359 0024 01F0      		breq .L46
 185:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 360               		.loc 1 185 0
 361 0026 0E94 0000 		call layer_switch_get_layer
 362               	.LVL34:
 363 002a 182F      		mov r17,r24
 364               	.LVL35:
 186:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 365               		.loc 1 186 0
 366 002c 682F      		mov r22,r24
 367 002e 8981      		ldd r24,Y+1
 368 0030 9A81      		ldd r25,Y+2
 369 0032 0E94 0000 		call update_source_layers_cache
 370               	.LVL36:
 371 0036 00C0      		rjmp .L47
 372               	.LVL37:
 373               	.L46:
 187:quantum/quantum.c ****         } else {
 188:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 374               		.loc 1 188 0
 375 0038 0E94 0000 		call read_source_layers_cache
 376               	.LVL38:
 377 003c 182F      		mov r17,r24
 378               	.LVL39:
 379               	.L47:
 189:quantum/quantum.c ****         }
 190:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 380               		.loc 1 190 0
 381 003e 6981      		ldd r22,Y+1
 382 0040 7A81      		ldd r23,Y+2
 383 0042 812F      		mov r24,r17
 384 0044 00C0      		rjmp .L48
 385               	.LVL40:
 386               	.L45:
 387               	.LBE31:
 191:quantum/quantum.c ****     } else
 192:quantum/quantum.c **** #endif
 193:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 388               		.loc 1 193 0
 389 0046 0E94 0000 		call layer_switch_get_layer
 390               	.LVL41:
 391 004a 6981      		ldd r22,Y+1
 392 004c 7A81      		ldd r23,Y+2
 393               	.L48:
 394               	/* epilogue start */
 194:quantum/quantum.c **** }
 395               		.loc 1 194 0
 396 004e 0F90      		pop __tmp_reg__
 397 0050 0F90      		pop __tmp_reg__
 398 0052 0F90      		pop __tmp_reg__
 399 0054 0F90      		pop __tmp_reg__
 400 0056 0F90      		pop __tmp_reg__
 401 0058 DF91      		pop r29
 402 005a CF91      		pop r28
 403 005c 1F91      		pop r17
 193:quantum/quantum.c **** }
 404               		.loc 1 193 0
 405 005e 0C94 0000 		jmp keymap_key_to_keycode
 406               	.LVL42:
 407               		.cfi_endproc
 408               	.LFE39:
 410               		.section	.text.get_record_keycode,"ax",@progbits
 411               	.global	get_record_keycode
 413               	get_record_keycode:
 414               	.LFB38:
 173:quantum/quantum.c **** 
 415               		.loc 1 173 0
 416               		.cfi_startproc
 417               	.LVL43:
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 422 0000 FC01      		movw r30,r24
 173:quantum/quantum.c **** 
 423               		.loc 1 173 0
 424 0002 4081      		ld r20,Z
 425 0004 5181      		ldd r21,Z+1
 426 0006 6281      		ldd r22,Z+2
 427 0008 7381      		ldd r23,Z+3
 428 000a 8481      		ldd r24,Z+4
 429               	.LVL44:
 430 000c 0C94 0000 		jmp get_event_keycode
 431               	.LVL45:
 432               		.cfi_endproc
 433               	.LFE38:
 435               		.section	.text.send_char,"ax",@progbits
 436               	.global	send_char
 438               	send_char:
 439               	.LFB45:
 195:quantum/quantum.c **** 
 196:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 197:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 198:quantum/quantum.c ****  */
 199:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 200:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 201:quantum/quantum.c **** 
 202:quantum/quantum.c ****     // This is how you use actions here
 203:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 204:quantum/quantum.c ****     //   action_t action;
 205:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 206:quantum/quantum.c ****     //   process_action(record, action);
 207:quantum/quantum.c ****     //   return false;
 208:quantum/quantum.c ****     // }
 209:quantum/quantum.c **** 
 210:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 211:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 212:quantum/quantum.c ****         velocikey_accelerate();
 213:quantum/quantum.c ****     }
 214:quantum/quantum.c **** #endif
 215:quantum/quantum.c **** 
 216:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 217:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 218:quantum/quantum.c **** #endif
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****     if (!(
 221:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 222:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 223:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 224:quantum/quantum.c **** #endif
 225:quantum/quantum.c **** #if defined(DYNAMIC_MACRO_ENABLE) && !defined(DYNAMIC_MACRO_USER_CALL)
 226:quantum/quantum.c ****             // Must run asap to ensure all keypresses are recorded.
 227:quantum/quantum.c ****             process_dynamic_macro(keycode, record) &&
 228:quantum/quantum.c **** #endif
 229:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****             process_clicky(keycode, record) &&
 231:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 232:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 233:quantum/quantum.c ****             process_haptic(keycode, record) &&
 234:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 235:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 236:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 237:quantum/quantum.c **** #endif
 238:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 239:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 240:quantum/quantum.c ****             process_midi(keycode, record) &&
 241:quantum/quantum.c **** #endif
 242:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 243:quantum/quantum.c ****             process_audio(keycode, record) &&
 244:quantum/quantum.c **** #endif
 245:quantum/quantum.c **** #ifdef STENO_ENABLE
 246:quantum/quantum.c ****             process_steno(keycode, record) &&
 247:quantum/quantum.c **** #endif
 248:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 249:quantum/quantum.c ****             process_music(keycode, record) &&
 250:quantum/quantum.c **** #endif
 251:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 252:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 253:quantum/quantum.c **** #endif
 254:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 255:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 256:quantum/quantum.c **** #endif
 257:quantum/quantum.c **** #ifdef LEADER_ENABLE
 258:quantum/quantum.c ****             process_leader(keycode, record) &&
 259:quantum/quantum.c **** #endif
 260:quantum/quantum.c **** #ifdef COMBO_ENABLE
 261:quantum/quantum.c ****             process_combo(keycode, record) &&
 262:quantum/quantum.c **** #endif
 263:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 264:quantum/quantum.c ****             process_printer(keycode, record) &&
 265:quantum/quantum.c **** #endif
 266:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 267:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 268:quantum/quantum.c **** #endif
 269:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 270:quantum/quantum.c ****             process_terminal(keycode, record) &&
 271:quantum/quantum.c **** #endif
 272:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 273:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 274:quantum/quantum.c **** #endif
 275:quantum/quantum.c ****             true)) {
 276:quantum/quantum.c ****         return false;
 277:quantum/quantum.c ****     }
 278:quantum/quantum.c **** 
 279:quantum/quantum.c ****     // Shift / paren setup
 280:quantum/quantum.c **** 
 281:quantum/quantum.c ****     switch (keycode) {
 282:quantum/quantum.c ****         case RESET:
 283:quantum/quantum.c ****             if (record->event.pressed) {
 284:quantum/quantum.c ****                 reset_keyboard();
 285:quantum/quantum.c ****             }
 286:quantum/quantum.c ****             return false;
 287:quantum/quantum.c ****         case DEBUG:
 288:quantum/quantum.c ****             if (record->event.pressed) {
 289:quantum/quantum.c ****                 debug_enable ^= 1;
 290:quantum/quantum.c ****                 if (debug_enable) {
 291:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 292:quantum/quantum.c ****                 } else {
 293:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 294:quantum/quantum.c ****                 }
 295:quantum/quantum.c ****             }
 296:quantum/quantum.c ****             return false;
 297:quantum/quantum.c ****         case EEPROM_RESET:
 298:quantum/quantum.c ****             if (record->event.pressed) {
 299:quantum/quantum.c ****                 eeconfig_init();
 300:quantum/quantum.c ****             }
 301:quantum/quantum.c ****             return false;
 302:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 303:quantum/quantum.c ****         case FC_TOG:
 304:quantum/quantum.c ****             if (record->event.pressed) {
 305:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 306:quantum/quantum.c ****             }
 307:quantum/quantum.c ****             return false;
 308:quantum/quantum.c ****         case FC_ON:
 309:quantum/quantum.c ****             if (record->event.pressed) {
 310:quantum/quantum.c ****                 FAUXCLICKY_ON;
 311:quantum/quantum.c ****             }
 312:quantum/quantum.c ****             return false;
 313:quantum/quantum.c ****         case FC_OFF:
 314:quantum/quantum.c ****             if (record->event.pressed) {
 315:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 316:quantum/quantum.c ****             }
 317:quantum/quantum.c ****             return false;
 318:quantum/quantum.c **** #endif
 319:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 320:quantum/quantum.c ****         case RGB_TOG:
 321:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 322:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 323:quantum/quantum.c ****             if (record->event.pressed) {
 324:quantum/quantum.c **** #    else
 325:quantum/quantum.c ****             if (!record->event.pressed) {
 326:quantum/quantum.c **** #    endif
 327:quantum/quantum.c ****                 rgblight_toggle();
 328:quantum/quantum.c ****             }
 329:quantum/quantum.c ****             return false;
 330:quantum/quantum.c ****         case RGB_MODE_FORWARD:
 331:quantum/quantum.c ****             if (record->event.pressed) {
 332:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****                 if (shifted) {
 334:quantum/quantum.c ****                     rgblight_step_reverse();
 335:quantum/quantum.c ****                 } else {
 336:quantum/quantum.c ****                     rgblight_step();
 337:quantum/quantum.c ****                 }
 338:quantum/quantum.c ****             }
 339:quantum/quantum.c ****             return false;
 340:quantum/quantum.c ****         case RGB_MODE_REVERSE:
 341:quantum/quantum.c ****             if (record->event.pressed) {
 342:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 343:quantum/quantum.c ****                 if (shifted) {
 344:quantum/quantum.c ****                     rgblight_step();
 345:quantum/quantum.c ****                 } else {
 346:quantum/quantum.c ****                     rgblight_step_reverse();
 347:quantum/quantum.c ****                 }
 348:quantum/quantum.c ****             }
 349:quantum/quantum.c ****             return false;
 350:quantum/quantum.c ****         case RGB_HUI:
 351:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 352:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 353:quantum/quantum.c ****             if (record->event.pressed) {
 354:quantum/quantum.c **** #    else
 355:quantum/quantum.c ****             if (!record->event.pressed) {
 356:quantum/quantum.c **** #    endif
 357:quantum/quantum.c ****                 rgblight_increase_hue();
 358:quantum/quantum.c ****             }
 359:quantum/quantum.c ****             return false;
 360:quantum/quantum.c ****         case RGB_HUD:
 361:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 362:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 363:quantum/quantum.c ****             if (record->event.pressed) {
 364:quantum/quantum.c **** #    else
 365:quantum/quantum.c ****             if (!record->event.pressed) {
 366:quantum/quantum.c **** #    endif
 367:quantum/quantum.c ****                 rgblight_decrease_hue();
 368:quantum/quantum.c ****             }
 369:quantum/quantum.c ****             return false;
 370:quantum/quantum.c ****         case RGB_SAI:
 371:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 372:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 373:quantum/quantum.c ****             if (record->event.pressed) {
 374:quantum/quantum.c **** #    else
 375:quantum/quantum.c ****             if (!record->event.pressed) {
 376:quantum/quantum.c **** #    endif
 377:quantum/quantum.c ****                 rgblight_increase_sat();
 378:quantum/quantum.c ****             }
 379:quantum/quantum.c ****             return false;
 380:quantum/quantum.c ****         case RGB_SAD:
 381:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 382:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 383:quantum/quantum.c ****             if (record->event.pressed) {
 384:quantum/quantum.c **** #    else
 385:quantum/quantum.c ****             if (!record->event.pressed) {
 386:quantum/quantum.c **** #    endif
 387:quantum/quantum.c ****                 rgblight_decrease_sat();
 388:quantum/quantum.c ****             }
 389:quantum/quantum.c ****             return false;
 390:quantum/quantum.c ****         case RGB_VAI:
 391:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 392:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 393:quantum/quantum.c ****             if (record->event.pressed) {
 394:quantum/quantum.c **** #    else
 395:quantum/quantum.c ****             if (!record->event.pressed) {
 396:quantum/quantum.c **** #    endif
 397:quantum/quantum.c ****                 rgblight_increase_val();
 398:quantum/quantum.c ****             }
 399:quantum/quantum.c ****             return false;
 400:quantum/quantum.c ****         case RGB_VAD:
 401:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 402:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 403:quantum/quantum.c ****             if (record->event.pressed) {
 404:quantum/quantum.c **** #    else
 405:quantum/quantum.c ****             if (!record->event.pressed) {
 406:quantum/quantum.c **** #    endif
 407:quantum/quantum.c ****                 rgblight_decrease_val();
 408:quantum/quantum.c ****             }
 409:quantum/quantum.c ****             return false;
 410:quantum/quantum.c ****         case RGB_SPI:
 411:quantum/quantum.c ****             if (record->event.pressed) {
 412:quantum/quantum.c ****                 rgblight_increase_speed();
 413:quantum/quantum.c ****             }
 414:quantum/quantum.c ****             return false;
 415:quantum/quantum.c ****         case RGB_SPD:
 416:quantum/quantum.c ****             if (record->event.pressed) {
 417:quantum/quantum.c ****                 rgblight_decrease_speed();
 418:quantum/quantum.c ****             }
 419:quantum/quantum.c ****             return false;
 420:quantum/quantum.c ****         case RGB_MODE_PLAIN:
 421:quantum/quantum.c ****             if (record->event.pressed) {
 422:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 423:quantum/quantum.c ****             }
 424:quantum/quantum.c ****             return false;
 425:quantum/quantum.c ****         case RGB_MODE_BREATHE:
 426:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_BREATHING
 427:quantum/quantum.c ****             if (record->event.pressed) {
 428:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) && (rgblight_get_mode() < RGBL
 429:quantum/quantum.c ****                     rgblight_step();
 430:quantum/quantum.c ****                 } else {
 431:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_BREATHING);
 432:quantum/quantum.c ****                 }
 433:quantum/quantum.c ****             }
 434:quantum/quantum.c **** #    endif
 435:quantum/quantum.c ****             return false;
 436:quantum/quantum.c ****         case RGB_MODE_RAINBOW:
 437:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 438:quantum/quantum.c ****             if (record->event.pressed) {
 439:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) && (rgblight_get_mode() < R
 440:quantum/quantum.c ****                     rgblight_step();
 441:quantum/quantum.c ****                 } else {
 442:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 443:quantum/quantum.c ****                 }
 444:quantum/quantum.c ****             }
 445:quantum/quantum.c **** #    endif
 446:quantum/quantum.c ****             return false;
 447:quantum/quantum.c ****         case RGB_MODE_SWIRL:
 448:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 449:quantum/quantum.c ****             if (record->event.pressed) {
 450:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) && (rgblight_get_mode() < 
 451:quantum/quantum.c ****                     rgblight_step();
 452:quantum/quantum.c ****                 } else {
 453:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 454:quantum/quantum.c ****                 }
 455:quantum/quantum.c ****             }
 456:quantum/quantum.c **** #    endif
 457:quantum/quantum.c ****             return false;
 458:quantum/quantum.c ****         case RGB_MODE_SNAKE:
 459:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_SNAKE
 460:quantum/quantum.c ****             if (record->event.pressed) {
 461:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGHT
 462:quantum/quantum.c ****                     rgblight_step();
 463:quantum/quantum.c ****                 } else {
 464:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_SNAKE);
 465:quantum/quantum.c ****                 }
 466:quantum/quantum.c ****             }
 467:quantum/quantum.c **** #    endif
 468:quantum/quantum.c ****             return false;
 469:quantum/quantum.c ****         case RGB_MODE_KNIGHT:
 470:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_KNIGHT
 471:quantum/quantum.c ****             if (record->event.pressed) {
 472:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGH
 473:quantum/quantum.c ****                     rgblight_step();
 474:quantum/quantum.c ****                 } else {
 475:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 476:quantum/quantum.c ****                 }
 477:quantum/quantum.c ****             }
 478:quantum/quantum.c **** #    endif
 479:quantum/quantum.c ****             return false;
 480:quantum/quantum.c ****         case RGB_MODE_XMAS:
 481:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_CHRISTMAS
 482:quantum/quantum.c ****             if (record->event.pressed) {
 483:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 484:quantum/quantum.c ****             }
 485:quantum/quantum.c **** #    endif
 486:quantum/quantum.c ****             return false;
 487:quantum/quantum.c ****         case RGB_MODE_GRADIENT:
 488:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 489:quantum/quantum.c ****             if (record->event.pressed) {
 490:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) && (rgblight_get_mode() 
 491:quantum/quantum.c ****                     rgblight_step();
 492:quantum/quantum.c ****                 } else {
 493:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 494:quantum/quantum.c ****                 }
 495:quantum/quantum.c ****             }
 496:quantum/quantum.c **** #    endif
 497:quantum/quantum.c ****             return false;
 498:quantum/quantum.c ****         case RGB_MODE_RGBTEST:
 499:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RGB_TEST
 500:quantum/quantum.c ****             if (record->event.pressed) {
 501:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 502:quantum/quantum.c ****             }
 503:quantum/quantum.c **** #    endif
 504:quantum/quantum.c ****             return false;
 505:quantum/quantum.c **** #endif  // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 506:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 507:quantum/quantum.c ****         case VLK_TOG:
 508:quantum/quantum.c ****             if (record->event.pressed) {
 509:quantum/quantum.c ****                 velocikey_toggle();
 510:quantum/quantum.c ****             }
 511:quantum/quantum.c ****             return false;
 512:quantum/quantum.c **** #endif
 513:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
 514:quantum/quantum.c ****         case OUT_AUTO:
 515:quantum/quantum.c ****             if (record->event.pressed) {
 516:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 517:quantum/quantum.c ****             }
 518:quantum/quantum.c ****             return false;
 519:quantum/quantum.c ****         case OUT_USB:
 520:quantum/quantum.c ****             if (record->event.pressed) {
 521:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 522:quantum/quantum.c ****             }
 523:quantum/quantum.c ****             return false;
 524:quantum/quantum.c **** #    ifdef BLUETOOTH_ENABLE
 525:quantum/quantum.c ****         case OUT_BT:
 526:quantum/quantum.c ****             if (record->event.pressed) {
 527:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 528:quantum/quantum.c ****             }
 529:quantum/quantum.c ****             return false;
 530:quantum/quantum.c **** #    endif
 531:quantum/quantum.c **** #endif
 532:quantum/quantum.c ****         case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_ALT_GUI:
 533:quantum/quantum.c ****         case MAGIC_SWAP_LCTL_LGUI ... MAGIC_EE_HANDS_RIGHT:
 534:quantum/quantum.c ****             if (record->event.pressed) {
 535:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 536:quantum/quantum.c ****                 if (!eeconfig_is_enabled()) {
 537:quantum/quantum.c ****                     eeconfig_init();
 538:quantum/quantum.c ****                 }
 539:quantum/quantum.c ****                 /* keymap config */
 540:quantum/quantum.c ****                 keymap_config.raw = eeconfig_read_keymap();
 541:quantum/quantum.c ****                 switch (keycode) {
 542:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 543:quantum/quantum.c ****                         keymap_config.swap_control_capslock = true;
 544:quantum/quantum.c ****                         break;
 545:quantum/quantum.c ****                     case MAGIC_CAPSLOCK_TO_CONTROL:
 546:quantum/quantum.c ****                         keymap_config.capslock_to_control = true;
 547:quantum/quantum.c ****                         break;
 548:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 549:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = true;
 550:quantum/quantum.c ****                         break;
 551:quantum/quantum.c ****                     case MAGIC_SWAP_RALT_RGUI:
 552:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = true;
 553:quantum/quantum.c ****                         break;
 554:quantum/quantum.c ****                     case MAGIC_SWAP_LCTL_LGUI:
 555:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = true;
 556:quantum/quantum.c ****                         break;
 557:quantum/quantum.c ****                     case MAGIC_SWAP_RCTL_RGUI:
 558:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = true;
 559:quantum/quantum.c ****                         break;
 560:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 561:quantum/quantum.c ****                         keymap_config.no_gui = true;
 562:quantum/quantum.c ****                         break;
 563:quantum/quantum.c ****                     case MAGIC_SWAP_GRAVE_ESC:
 564:quantum/quantum.c ****                         keymap_config.swap_grave_esc = true;
 565:quantum/quantum.c ****                         break;
 566:quantum/quantum.c ****                     case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 567:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = true;
 568:quantum/quantum.c ****                         break;
 569:quantum/quantum.c ****                     case MAGIC_HOST_NKRO:
 570:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 571:quantum/quantum.c ****                         keymap_config.nkro = true;
 572:quantum/quantum.c ****                         break;
 573:quantum/quantum.c ****                     case MAGIC_SWAP_ALT_GUI:
 574:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = true;
 575:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 576:quantum/quantum.c ****                         PLAY_SONG(ag_swap_song);
 577:quantum/quantum.c **** #endif
 578:quantum/quantum.c ****                         break;
 579:quantum/quantum.c ****                     case MAGIC_SWAP_CTL_GUI:
 580:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = true;
 581:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 582:quantum/quantum.c ****                         PLAY_SONG(cg_swap_song);
 583:quantum/quantum.c **** #endif
 584:quantum/quantum.c ****                         break;
 585:quantum/quantum.c ****                     case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 586:quantum/quantum.c ****                         keymap_config.swap_control_capslock = false;
 587:quantum/quantum.c ****                         break;
 588:quantum/quantum.c ****                     case MAGIC_UNCAPSLOCK_TO_CONTROL:
 589:quantum/quantum.c ****                         keymap_config.capslock_to_control = false;
 590:quantum/quantum.c ****                         break;
 591:quantum/quantum.c ****                     case MAGIC_UNSWAP_LALT_LGUI:
 592:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = false;
 593:quantum/quantum.c ****                         break;
 594:quantum/quantum.c ****                     case MAGIC_UNSWAP_RALT_RGUI:
 595:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = false;
 596:quantum/quantum.c ****                         break;
 597:quantum/quantum.c ****                     case MAGIC_UNSWAP_LCTL_LGUI:
 598:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = false;
 599:quantum/quantum.c ****                         break;
 600:quantum/quantum.c ****                     case MAGIC_UNSWAP_RCTL_RGUI:
 601:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = false;
 602:quantum/quantum.c ****                         break;
 603:quantum/quantum.c ****                     case MAGIC_UNNO_GUI:
 604:quantum/quantum.c ****                         keymap_config.no_gui = false;
 605:quantum/quantum.c ****                         break;
 606:quantum/quantum.c ****                     case MAGIC_UNSWAP_GRAVE_ESC:
 607:quantum/quantum.c ****                         keymap_config.swap_grave_esc = false;
 608:quantum/quantum.c ****                         break;
 609:quantum/quantum.c ****                     case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 610:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = false;
 611:quantum/quantum.c ****                         break;
 612:quantum/quantum.c ****                     case MAGIC_UNHOST_NKRO:
 613:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 614:quantum/quantum.c ****                         keymap_config.nkro = false;
 615:quantum/quantum.c ****                         break;
 616:quantum/quantum.c ****                     case MAGIC_UNSWAP_ALT_GUI:
 617:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = false;
 618:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 619:quantum/quantum.c ****                         PLAY_SONG(ag_norm_song);
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c ****                         break;
 622:quantum/quantum.c ****                     case MAGIC_UNSWAP_CTL_GUI:
 623:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = false;
 624:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 625:quantum/quantum.c ****                         PLAY_SONG(cg_norm_song);
 626:quantum/quantum.c **** #endif
 627:quantum/quantum.c ****                         break;
 628:quantum/quantum.c ****                     case MAGIC_TOGGLE_ALT_GUI:
 629:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 630:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 631:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 632:quantum/quantum.c ****                         if (keymap_config.swap_ralt_rgui) {
 633:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 634:quantum/quantum.c ****                         } else {
 635:quantum/quantum.c ****                             PLAY_SONG(ag_norm_song);
 636:quantum/quantum.c ****                         }
 637:quantum/quantum.c **** #endif
 638:quantum/quantum.c ****                         break;
 639:quantum/quantum.c ****                     case MAGIC_TOGGLE_CTL_GUI:
 640:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = !keymap_config.swap_lctl_lgui;
 641:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 642:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 643:quantum/quantum.c ****                         if (keymap_config.swap_rctl_rgui) {
 644:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 645:quantum/quantum.c ****                         } else {
 646:quantum/quantum.c ****                             PLAY_SONG(cg_norm_song);
 647:quantum/quantum.c ****                         }
 648:quantum/quantum.c **** #endif
 649:quantum/quantum.c ****                         break;
 650:quantum/quantum.c ****                     case MAGIC_TOGGLE_NKRO:
 651:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 652:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 653:quantum/quantum.c ****                         break;
 654:quantum/quantum.c ****                     case MAGIC_EE_HANDS_LEFT:
 655:quantum/quantum.c ****                         eeconfig_update_handedness(true);
 656:quantum/quantum.c ****                         break;
 657:quantum/quantum.c ****                     case MAGIC_EE_HANDS_RIGHT:
 658:quantum/quantum.c ****                         eeconfig_update_handedness(false);
 659:quantum/quantum.c ****                         break;
 660:quantum/quantum.c ****                     default:
 661:quantum/quantum.c ****                         break;
 662:quantum/quantum.c ****                 }
 663:quantum/quantum.c ****                 eeconfig_update_keymap(keymap_config.raw);
 664:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 665:quantum/quantum.c **** 
 666:quantum/quantum.c ****                 return false;
 667:quantum/quantum.c ****             }
 668:quantum/quantum.c ****             break;
 669:quantum/quantum.c **** 
 670:quantum/quantum.c ****         case GRAVE_ESC: {
 671:quantum/quantum.c ****             uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT) | MOD_BIT(KC_L
 672:quantum/quantum.c **** 
 673:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 674:quantum/quantum.c ****             // if ALT is pressed, ESC is always sent
 675:quantum/quantum.c ****             // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 676:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 677:quantum/quantum.c ****                 shifted = 0;
 678:quantum/quantum.c ****             }
 679:quantum/quantum.c **** #endif
 680:quantum/quantum.c **** 
 681:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 682:quantum/quantum.c ****             // if CTRL is pressed, ESC is always sent
 683:quantum/quantum.c ****             // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 684:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 685:quantum/quantum.c ****                 shifted = 0;
 686:quantum/quantum.c ****             }
 687:quantum/quantum.c **** #endif
 688:quantum/quantum.c **** 
 689:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 690:quantum/quantum.c ****             // if GUI is pressed, ESC is always sent
 691:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 692:quantum/quantum.c ****                 shifted = 0;
 693:quantum/quantum.c ****             }
 694:quantum/quantum.c **** #endif
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 697:quantum/quantum.c ****             // if SHIFT is pressed, ESC is always sent
 698:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 699:quantum/quantum.c ****                 shifted = 0;
 700:quantum/quantum.c ****             }
 701:quantum/quantum.c **** #endif
 702:quantum/quantum.c **** 
 703:quantum/quantum.c ****             if (record->event.pressed) {
 704:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 705:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 706:quantum/quantum.c ****             } else {
 707:quantum/quantum.c ****                 del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 708:quantum/quantum.c ****             }
 709:quantum/quantum.c **** 
 710:quantum/quantum.c ****             send_keyboard_report();
 711:quantum/quantum.c ****             return false;
 712:quantum/quantum.c ****         }
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 715:quantum/quantum.c ****         case BL_BRTG: {
 716:quantum/quantum.c ****             if (record->event.pressed) {
 717:quantum/quantum.c ****                 backlight_toggle_breathing();
 718:quantum/quantum.c ****             }
 719:quantum/quantum.c ****             return false;
 720:quantum/quantum.c ****         }
 721:quantum/quantum.c **** #endif
 722:quantum/quantum.c ****     }
 723:quantum/quantum.c **** 
 724:quantum/quantum.c ****     return process_action_kb(record);
 725:quantum/quantum.c **** }
 726:quantum/quantum.c **** 
 727:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_shift_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 728:quantum/quantum.c **** 
 729:quantum/quantum.c ****                                                                     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1
 730:quantum/quantum.c **** 
 731:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_altgr_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 732:quantum/quantum.c **** 
 733:quantum/quantum.c ****                                                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 734:quantum/quantum.c **** 
 735:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {// NUL   SOH      STX     
 736:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 737:quantum/quantum.c ****                                                                          // BS    TAB      LF      
 738:quantum/quantum.c ****                                                                          KC_BSPC, KC_TAB, KC_ENT, X
 739:quantum/quantum.c ****                                                                          // DLE   DC1      DC2     
 740:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 741:quantum/quantum.c ****                                                                          // CAN   EM       SUB     
 742:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 743:quantum/quantum.c **** 
 744:quantum/quantum.c ****                                                                          //       !        "       
 745:quantum/quantum.c ****                                                                          KC_SPC, KC_1, KC_QUOT, KC_
 746:quantum/quantum.c ****                                                                          // (     )        *       
 747:quantum/quantum.c ****                                                                          KC_9, KC_0, KC_8, KC_EQL, 
 748:quantum/quantum.c ****                                                                          // 0     1        2       
 749:quantum/quantum.c ****                                                                          KC_0, KC_1, KC_2, KC_3, KC
 750:quantum/quantum.c ****                                                                          // 8     9        :       
 751:quantum/quantum.c ****                                                                          KC_8, KC_9, KC_SCLN, KC_SC
 752:quantum/quantum.c ****                                                                          // @     A        B       
 753:quantum/quantum.c ****                                                                          KC_2, KC_A, KC_B, KC_C, KC
 754:quantum/quantum.c ****                                                                          // H     I        J       
 755:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 756:quantum/quantum.c ****                                                                          // P     Q        R       
 757:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 758:quantum/quantum.c ****                                                                          // X     Y        Z       
 759:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 760:quantum/quantum.c ****                                                                          // `     a        b       
 761:quantum/quantum.c ****                                                                          KC_GRV, KC_A, KC_B, KC_C, 
 762:quantum/quantum.c ****                                                                          // h     i        j       
 763:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 764:quantum/quantum.c ****                                                                          // p     q        r       
 765:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 766:quantum/quantum.c ****                                                                          // x     y        z       
 767:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 768:quantum/quantum.c **** 
 769:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 770:quantum/quantum.c **** 
 771:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 772:quantum/quantum.c **** 
 773:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 774:quantum/quantum.c ****     while (1) {
 775:quantum/quantum.c ****         char ascii_code = *str;
 776:quantum/quantum.c ****         if (!ascii_code) break;
 777:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 778:quantum/quantum.c ****             // tap
 779:quantum/quantum.c ****             uint8_t keycode = *(++str);
 780:quantum/quantum.c ****             register_code(keycode);
 781:quantum/quantum.c ****             unregister_code(keycode);
 782:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 783:quantum/quantum.c ****             // down
 784:quantum/quantum.c ****             uint8_t keycode = *(++str);
 785:quantum/quantum.c ****             register_code(keycode);
 786:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 787:quantum/quantum.c ****             // up
 788:quantum/quantum.c ****             uint8_t keycode = *(++str);
 789:quantum/quantum.c ****             unregister_code(keycode);
 790:quantum/quantum.c ****         } else {
 791:quantum/quantum.c ****             send_char(ascii_code);
 792:quantum/quantum.c ****         }
 793:quantum/quantum.c ****         ++str;
 794:quantum/quantum.c ****         // interval
 795:quantum/quantum.c ****         {
 796:quantum/quantum.c ****             uint8_t ms = interval;
 797:quantum/quantum.c ****             while (ms--) wait_ms(1);
 798:quantum/quantum.c ****         }
 799:quantum/quantum.c ****     }
 800:quantum/quantum.c **** }
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 803:quantum/quantum.c ****     while (1) {
 804:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 805:quantum/quantum.c ****         if (!ascii_code) break;
 806:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 807:quantum/quantum.c ****             // tap
 808:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 809:quantum/quantum.c ****             register_code(keycode);
 810:quantum/quantum.c ****             unregister_code(keycode);
 811:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 812:quantum/quantum.c ****             // down
 813:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 814:quantum/quantum.c ****             register_code(keycode);
 815:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 816:quantum/quantum.c ****             // up
 817:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 818:quantum/quantum.c ****             unregister_code(keycode);
 819:quantum/quantum.c ****         } else {
 820:quantum/quantum.c ****             send_char(ascii_code);
 821:quantum/quantum.c ****         }
 822:quantum/quantum.c ****         ++str;
 823:quantum/quantum.c ****         // interval
 824:quantum/quantum.c ****         {
 825:quantum/quantum.c ****             uint8_t ms = interval;
 826:quantum/quantum.c ****             while (ms--) wait_ms(1);
 827:quantum/quantum.c ****         }
 828:quantum/quantum.c ****     }
 829:quantum/quantum.c **** }
 830:quantum/quantum.c **** 
 831:quantum/quantum.c **** void send_char(char ascii_code) {
 440               		.loc 1 831 0
 441               		.cfi_startproc
 442               	.LVL46:
 443 0000 1F93      		push r17
 444               	.LCFI11:
 445               		.cfi_def_cfa_offset 3
 446               		.cfi_offset 17, -2
 447 0002 CF93      		push r28
 448               	.LCFI12:
 449               		.cfi_def_cfa_offset 4
 450               		.cfi_offset 28, -3
 451 0004 DF93      		push r29
 452               	.LCFI13:
 453               		.cfi_def_cfa_offset 5
 454               		.cfi_offset 29, -4
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 3 */
 458               	.L__stack_usage = 3
 459               	.LBB32:
 832:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 460               		.loc 1 832 0
 461 0006 90E0      		ldi r25,0
 462               	.LVL47:
 463 0008 FC01      		movw r30,r24
 464 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 465 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 466               	.LVL48:
 467               	/* #APP */
 468               	 ;  832 "quantum/quantum.c" 1
 469 000e 1491      		lpm r17, Z
 470               		
 471               	 ;  0 "" 2
 472               	.LVL49:
 473               	/* #NOAPP */
 474               	.LBE32:
 475               	.LBB33:
 833:quantum/quantum.c ****     bool    is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 476               		.loc 1 833 0
 477 0010 FC01      		movw r30,r24
 478               	.LVL50:
 479 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 480 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 481               	.LVL51:
 482               	/* #APP */
 483               	 ;  833 "quantum/quantum.c" 1
 484 0016 D491      		lpm r29, Z
 485               		
 486               	 ;  0 "" 2
 487               	.LVL52:
 488               	/* #NOAPP */
 489               	.LBE33:
 490               	.LBB34:
 834:quantum/quantum.c ****     bool    is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 491               		.loc 1 834 0
 492 0018 FC01      		movw r30,r24
 493               	.LVL53:
 494 001a E050      		subi r30,lo8(-(ascii_to_altgr_lut))
 495 001c F040      		sbci r31,hi8(-(ascii_to_altgr_lut))
 496               	.LVL54:
 497               	/* #APP */
 498               	 ;  834 "quantum/quantum.c" 1
 499 001e C491      		lpm r28, Z
 500               		
 501               	 ;  0 "" 2
 502               	.LVL55:
 503               	/* #NOAPP */
 504               	.LBE34:
 835:quantum/quantum.c **** 
 836:quantum/quantum.c ****     if (is_shifted) {
 505               		.loc 1 836 0
 506 0020 DD23      		tst r29
 507 0022 01F0      		breq .L51
 837:quantum/quantum.c ****         register_code(KC_LSFT);
 508               		.loc 1 837 0
 509 0024 81EE      		ldi r24,lo8(-31)
 510               	.LVL56:
 511 0026 0E94 0000 		call register_code
 512               	.LVL57:
 513               	.L51:
 838:quantum/quantum.c ****     }
 839:quantum/quantum.c ****     if (is_altgred) {
 514               		.loc 1 839 0
 515 002a CC23      		tst r28
 516 002c 01F0      		breq .L52
 840:quantum/quantum.c ****         register_code(KC_RALT);
 517               		.loc 1 840 0
 518 002e 86EE      		ldi r24,lo8(-26)
 519 0030 0E94 0000 		call register_code
 520               	.LVL58:
 521               	.L52:
 841:quantum/quantum.c ****     }
 842:quantum/quantum.c ****     tap_code(keycode);
 522               		.loc 1 842 0
 523 0034 812F      		mov r24,r17
 524 0036 0E94 0000 		call tap_code
 525               	.LVL59:
 843:quantum/quantum.c ****     if (is_altgred) {
 526               		.loc 1 843 0
 527 003a CC23      		tst r28
 528 003c 01F0      		breq .L53
 844:quantum/quantum.c ****         unregister_code(KC_RALT);
 529               		.loc 1 844 0
 530 003e 86EE      		ldi r24,lo8(-26)
 531 0040 0E94 0000 		call unregister_code
 532               	.LVL60:
 533               	.L53:
 845:quantum/quantum.c ****     }
 846:quantum/quantum.c ****     if (is_shifted) {
 534               		.loc 1 846 0
 535 0044 DD23      		tst r29
 536 0046 01F0      		breq .L50
 847:quantum/quantum.c ****         unregister_code(KC_LSFT);
 537               		.loc 1 847 0
 538 0048 81EE      		ldi r24,lo8(-31)
 539               	/* epilogue start */
 848:quantum/quantum.c ****     }
 849:quantum/quantum.c **** }
 540               		.loc 1 849 0
 541 004a DF91      		pop r29
 542               	.LVL61:
 543 004c CF91      		pop r28
 544               	.LVL62:
 545 004e 1F91      		pop r17
 546               	.LVL63:
 847:quantum/quantum.c ****         unregister_code(KC_LSFT);
 547               		.loc 1 847 0
 548 0050 0C94 0000 		jmp unregister_code
 549               	.LVL64:
 550               	.L50:
 551               	/* epilogue start */
 552               		.loc 1 849 0
 553 0054 DF91      		pop r29
 554               	.LVL65:
 555 0056 CF91      		pop r28
 556               	.LVL66:
 557 0058 1F91      		pop r17
 558               	.LVL67:
 559 005a 0895      		ret
 560               		.cfi_endproc
 561               	.LFE45:
 563               		.section	.text.send_string_with_delay,"ax",@progbits
 564               	.global	send_string_with_delay
 566               	send_string_with_delay:
 567               	.LFB43:
 773:quantum/quantum.c ****     while (1) {
 568               		.loc 1 773 0
 569               		.cfi_startproc
 570               	.LVL68:
 571 0000 FF92      		push r15
 572               	.LCFI14:
 573               		.cfi_def_cfa_offset 3
 574               		.cfi_offset 15, -2
 575 0002 0F93      		push r16
 576               	.LCFI15:
 577               		.cfi_def_cfa_offset 4
 578               		.cfi_offset 16, -3
 579 0004 1F93      		push r17
 580               	.LCFI16:
 581               		.cfi_def_cfa_offset 5
 582               		.cfi_offset 17, -4
 583 0006 CF93      		push r28
 584               	.LCFI17:
 585               		.cfi_def_cfa_offset 6
 586               		.cfi_offset 28, -5
 587 0008 DF93      		push r29
 588               	.LCFI18:
 589               		.cfi_def_cfa_offset 7
 590               		.cfi_offset 29, -6
 591               	/* prologue: function */
 592               	/* frame size = 0 */
 593               	/* stack size = 5 */
 594               	.L__stack_usage = 5
 595 000a EC01      		movw r28,r24
 596 000c F62E      		mov r15,r22
 597               	.LVL69:
 598               	.L72:
 599               	.LBB35:
 775:quantum/quantum.c ****         if (!ascii_code) break;
 600               		.loc 1 775 0
 601 000e 8881      		ld r24,Y
 602               	.LVL70:
 776:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 603               		.loc 1 776 0
 604 0010 8823      		tst r24
 605 0012 01F0      		breq .L64
 606 0014 8E01      		movw r16,r28
 607 0016 0F5F      		subi r16,-1
 608 0018 1F4F      		sbci r17,-1
 777:quantum/quantum.c ****             // tap
 609               		.loc 1 777 0
 610 001a 8130      		cpi r24,lo8(1)
 611 001c 01F4      		brne .L66
 612               	.LVL71:
 613               	.LBB36:
 779:quantum/quantum.c ****             register_code(keycode);
 614               		.loc 1 779 0
 615 001e C981      		ldd r28,Y+1
 616               	.LVL72:
 780:quantum/quantum.c ****             unregister_code(keycode);
 617               		.loc 1 780 0
 618 0020 8C2F      		mov r24,r28
 619               	.LVL73:
 620 0022 0E94 0000 		call register_code
 621               	.LVL74:
 781:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 622               		.loc 1 781 0
 623 0026 8C2F      		mov r24,r28
 624 0028 00C0      		rjmp .L74
 625               	.LVL75:
 626               	.L66:
 627               	.LBE36:
 782:quantum/quantum.c ****             // down
 628               		.loc 1 782 0
 629 002a 8230      		cpi r24,lo8(2)
 630 002c 01F4      		brne .L68
 631               	.LVL76:
 632               	.LBB37:
 785:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 633               		.loc 1 785 0
 634 002e 8981      		ldd r24,Y+1
 635               	.LVL77:
 636 0030 0E94 0000 		call register_code
 637               	.LVL78:
 638               	.L73:
 784:quantum/quantum.c ****             register_code(keycode);
 639               		.loc 1 784 0
 640 0034 E801      		movw r28,r16
 641               	.LBE37:
 642 0036 00C0      		rjmp .L67
 643               	.LVL79:
 644               	.L68:
 786:quantum/quantum.c ****             // up
 645               		.loc 1 786 0
 646 0038 8330      		cpi r24,lo8(3)
 647 003a 01F4      		brne .L69
 648               	.LVL80:
 649               	.LBB38:
 789:quantum/quantum.c ****         } else {
 650               		.loc 1 789 0
 651 003c 8981      		ldd r24,Y+1
 652               	.LVL81:
 653               	.L74:
 654 003e 0E94 0000 		call unregister_code
 655               	.LVL82:
 656 0042 00C0      		rjmp .L73
 657               	.LVL83:
 658               	.L69:
 659               	.LBE38:
 791:quantum/quantum.c ****         }
 660               		.loc 1 791 0
 661 0044 0E94 0000 		call send_char
 662               	.LVL84:
 663               	.L67:
 793:quantum/quantum.c ****         // interval
 664               		.loc 1 793 0
 665 0048 2196      		adiw r28,1
 666               	.LVL85:
 667               	.LBB39:
 797:quantum/quantum.c ****         }
 668               		.loc 1 797 0
 669 004a 8F2D      		mov r24,r15
 670               	.LVL86:
 671               	.L70:
 797:quantum/quantum.c ****         }
 672               		.loc 1 797 0 is_stmt 0 discriminator 1
 673 004c 8823      		tst r24
 674 004e 01F0      		breq .L72
 675               	.LVL87:
 676               	.LBB40:
 677               	.LBB41:
 678               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 679               		.loc 2 187 0 is_stmt 1
 680 0050 EFE9      		ldi r30,lo8(3999)
 681 0052 FFE0      		ldi r31,hi8(3999)
 682 0054 3197      	1:	sbiw r30,1
 683 0056 01F4      		brne 1b
 684 0058 00C0      		rjmp .
 685 005a 0000      		nop
 686 005c 8150      		subi r24,lo8(-(-1))
 687               	.LVL88:
 688 005e 00C0      		rjmp .L70
 689               	.LVL89:
 690               	.L64:
 691               	/* epilogue start */
 692               	.LBE41:
 693               	.LBE40:
 694               	.LBE39:
 695               	.LBE35:
 800:quantum/quantum.c **** 
 696               		.loc 1 800 0
 697 0060 DF91      		pop r29
 698 0062 CF91      		pop r28
 699               	.LVL90:
 700 0064 1F91      		pop r17
 701 0066 0F91      		pop r16
 702 0068 FF90      		pop r15
 703               	.LVL91:
 704 006a 0895      		ret
 705               		.cfi_endproc
 706               	.LFE43:
 708               		.section	.text.send_string,"ax",@progbits
 709               	.global	send_string
 711               	send_string:
 712               	.LFB41:
 769:quantum/quantum.c **** 
 713               		.loc 1 769 0
 714               		.cfi_startproc
 715               	.LVL92:
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 769:quantum/quantum.c **** 
 720               		.loc 1 769 0
 721 0000 60E0      		ldi r22,0
 722 0002 0C94 0000 		jmp send_string_with_delay
 723               	.LVL93:
 724               		.cfi_endproc
 725               	.LFE41:
 727               		.section	.text.send_string_with_delay_P,"ax",@progbits
 728               	.global	send_string_with_delay_P
 730               	send_string_with_delay_P:
 731               	.LFB44:
 802:quantum/quantum.c ****     while (1) {
 732               		.loc 1 802 0
 733               		.cfi_startproc
 734               	.LVL94:
 735 0000 0F93      		push r16
 736               	.LCFI19:
 737               		.cfi_def_cfa_offset 3
 738               		.cfi_offset 16, -2
 739 0002 1F93      		push r17
 740               	.LCFI20:
 741               		.cfi_def_cfa_offset 4
 742               		.cfi_offset 17, -3
 743 0004 CF93      		push r28
 744               	.LCFI21:
 745               		.cfi_def_cfa_offset 5
 746               		.cfi_offset 28, -4
 747 0006 DF93      		push r29
 748               	.LCFI22:
 749               		.cfi_def_cfa_offset 6
 750               		.cfi_offset 29, -5
 751               	/* prologue: function */
 752               	/* frame size = 0 */
 753               	/* stack size = 4 */
 754               	.L__stack_usage = 4
 755 0008 EC01      		movw r28,r24
 756 000a 062F      		mov r16,r22
 757               	.LVL95:
 758               	.L84:
 759               	.LBB42:
 760               	.LBB43:
 804:quantum/quantum.c ****         if (!ascii_code) break;
 761               		.loc 1 804 0
 762 000c FE01      		movw r30,r28
 763               	/* #APP */
 764               	 ;  804 "quantum/quantum.c" 1
 765 000e 8491      		lpm r24, Z
 766               		
 767               	 ;  0 "" 2
 768               	.LVL96:
 769               	/* #NOAPP */
 770               	.LBE43:
 805:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 771               		.loc 1 805 0
 772 0010 8823      		tst r24
 773 0012 01F0      		breq .L76
 774 0014 9E01      		movw r18,r28
 775 0016 2F5F      		subi r18,-1
 776 0018 3F4F      		sbci r19,-1
 806:quantum/quantum.c ****             // tap
 777               		.loc 1 806 0
 778 001a 8130      		cpi r24,lo8(1)
 779 001c 01F4      		brne .L78
 780               	.LBB44:
 781               	.LBB45:
 808:quantum/quantum.c ****             register_code(keycode);
 782               		.loc 1 808 0
 783 001e E901      		movw r28,r18
 784               	.LVL97:
 785 0020 F901      		movw r30,r18
 786               	.LVL98:
 787               	/* #APP */
 788               	 ;  808 "quantum/quantum.c" 1
 789 0022 1491      		lpm r17, Z
 790               		
 791               	 ;  0 "" 2
 792               	.LVL99:
 793               	/* #NOAPP */
 794               	.LBE45:
 809:quantum/quantum.c ****             unregister_code(keycode);
 795               		.loc 1 809 0
 796 0024 812F      		mov r24,r17
 797               	.LVL100:
 798 0026 0E94 0000 		call register_code
 799               	.LVL101:
 810:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 800               		.loc 1 810 0
 801 002a 812F      		mov r24,r17
 802 002c 00C0      		rjmp .L85
 803               	.LVL102:
 804               	.L78:
 805               	.LBE44:
 811:quantum/quantum.c ****             // down
 806               		.loc 1 811 0
 807 002e 8230      		cpi r24,lo8(2)
 808 0030 01F4      		brne .L80
 809               	.LBB46:
 810               	.LBB47:
 813:quantum/quantum.c ****             register_code(keycode);
 811               		.loc 1 813 0
 812 0032 E901      		movw r28,r18
 813               	.LVL103:
 814 0034 F901      		movw r30,r18
 815               	.LVL104:
 816               	/* #APP */
 817               	 ;  813 "quantum/quantum.c" 1
 818 0036 8491      		lpm r24, Z
 819               		
 820               	 ;  0 "" 2
 821               	.LVL105:
 822               	/* #NOAPP */
 823               	.LBE47:
 814:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 824               		.loc 1 814 0
 825 0038 0E94 0000 		call register_code
 826               	.LVL106:
 827               	.LBE46:
 828 003c 00C0      		rjmp .L79
 829               	.LVL107:
 830               	.L80:
 815:quantum/quantum.c ****             // up
 831               		.loc 1 815 0
 832 003e 8330      		cpi r24,lo8(3)
 833 0040 01F4      		brne .L81
 834               	.LBB48:
 835               	.LBB49:
 817:quantum/quantum.c ****             unregister_code(keycode);
 836               		.loc 1 817 0
 837 0042 E901      		movw r28,r18
 838               	.LVL108:
 839 0044 F901      		movw r30,r18
 840               	.LVL109:
 841               	/* #APP */
 842               	 ;  817 "quantum/quantum.c" 1
 843 0046 8491      		lpm r24, Z
 844               		
 845               	 ;  0 "" 2
 846               	.LVL110:
 847               	/* #NOAPP */
 848               	.L85:
 849               	.LBE49:
 818:quantum/quantum.c ****         } else {
 850               		.loc 1 818 0
 851 0048 0E94 0000 		call unregister_code
 852               	.LVL111:
 853               	.LBE48:
 854 004c 00C0      		rjmp .L79
 855               	.LVL112:
 856               	.L81:
 820:quantum/quantum.c ****         }
 857               		.loc 1 820 0
 858 004e 0E94 0000 		call send_char
 859               	.LVL113:
 860               	.L79:
 822:quantum/quantum.c ****         // interval
 861               		.loc 1 822 0
 862 0052 2196      		adiw r28,1
 863               	.LVL114:
 864               	.LBB50:
 826:quantum/quantum.c ****         }
 865               		.loc 1 826 0
 866 0054 802F      		mov r24,r16
 867               	.LVL115:
 868               	.L82:
 826:quantum/quantum.c ****         }
 869               		.loc 1 826 0 is_stmt 0 discriminator 1
 870 0056 8823      		tst r24
 871 0058 01F0      		breq .L84
 872               	.LVL116:
 873               	.LBB51:
 874               	.LBB52:
 875               		.loc 2 187 0 is_stmt 1
 876 005a EFE9      		ldi r30,lo8(3999)
 877 005c FFE0      		ldi r31,hi8(3999)
 878 005e 3197      	1:	sbiw r30,1
 879 0060 01F4      		brne 1b
 880 0062 00C0      		rjmp .
 881 0064 0000      		nop
 882 0066 8150      		subi r24,lo8(-(-1))
 883               	.LVL117:
 884 0068 00C0      		rjmp .L82
 885               	.LVL118:
 886               	.L76:
 887               	/* epilogue start */
 888               	.LBE52:
 889               	.LBE51:
 890               	.LBE50:
 891               	.LBE42:
 829:quantum/quantum.c **** 
 892               		.loc 1 829 0
 893 006a DF91      		pop r29
 894 006c CF91      		pop r28
 895               	.LVL119:
 896 006e 1F91      		pop r17
 897 0070 0F91      		pop r16
 898               	.LVL120:
 899 0072 0895      		ret
 900               		.cfi_endproc
 901               	.LFE44:
 903               		.section	.text.send_string_P,"ax",@progbits
 904               	.global	send_string_P
 906               	send_string_P:
 907               	.LFB42:
 771:quantum/quantum.c **** 
 908               		.loc 1 771 0
 909               		.cfi_startproc
 910               	.LVL121:
 911               	/* prologue: function */
 912               	/* frame size = 0 */
 913               	/* stack size = 0 */
 914               	.L__stack_usage = 0
 771:quantum/quantum.c **** 
 915               		.loc 1 771 0
 916 0000 60E0      		ldi r22,0
 917 0002 0C94 0000 		jmp send_string_with_delay_P
 918               	.LVL122:
 919               		.cfi_endproc
 920               	.LFE42:
 922               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 923               	.global	set_single_persistent_default_layer
 925               	set_single_persistent_default_layer:
 926               	.LFB46:
 850:quantum/quantum.c **** 
 851:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 927               		.loc 1 851 0
 928               		.cfi_startproc
 929               	.LVL123:
 930 0000 CF93      		push r28
 931               	.LCFI23:
 932               		.cfi_def_cfa_offset 3
 933               		.cfi_offset 28, -2
 934 0002 DF93      		push r29
 935               	.LCFI24:
 936               		.cfi_def_cfa_offset 4
 937               		.cfi_offset 29, -3
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 2 */
 941               	.L__stack_usage = 2
 852:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 853:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 854:quantum/quantum.c **** #endif
 855:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 942               		.loc 1 855 0
 943 0004 61E0      		ldi r22,lo8(1)
 944 0006 70E0      		ldi r23,0
 945 0008 EB01      		movw r28,r22
 946 000a 00C0      		rjmp 2f
 947               		1:
 948 000c CC0F      		lsl r28
 949 000e DD1F      		rol r29
 950               		2:
 951 0010 8A95      		dec r24
 952 0012 02F4      		brpl 1b
 953 0014 8C2F      		mov r24,r28
 954               	.LVL124:
 955 0016 0E94 0000 		call eeconfig_update_default_layer
 956               	.LVL125:
 856:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 957               		.loc 1 856 0
 958 001a BE01      		movw r22,r28
 959 001c 80E0      		ldi r24,0
 960 001e 90E0      		ldi r25,0
 961               	/* epilogue start */
 857:quantum/quantum.c **** }
 962               		.loc 1 857 0
 963 0020 DF91      		pop r29
 964 0022 CF91      		pop r28
 856:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 965               		.loc 1 856 0
 966 0024 0C94 0000 		jmp default_layer_set
 967               	.LVL126:
 968               		.cfi_endproc
 969               	.LFE46:
 971               		.section	.text.update_tri_layer_state,"ax",@progbits
 972               	.global	update_tri_layer_state
 974               	update_tri_layer_state:
 975               	.LFB47:
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 976               		.loc 1 859 0
 977               		.cfi_startproc
 978               	.LVL127:
 979 0000 8F92      		push r8
 980               	.LCFI25:
 981               		.cfi_def_cfa_offset 3
 982               		.cfi_offset 8, -2
 983 0002 9F92      		push r9
 984               	.LCFI26:
 985               		.cfi_def_cfa_offset 4
 986               		.cfi_offset 9, -3
 987 0004 AF92      		push r10
 988               	.LCFI27:
 989               		.cfi_def_cfa_offset 5
 990               		.cfi_offset 10, -4
 991 0006 BF92      		push r11
 992               	.LCFI28:
 993               		.cfi_def_cfa_offset 6
 994               		.cfi_offset 11, -5
 995 0008 CF92      		push r12
 996               	.LCFI29:
 997               		.cfi_def_cfa_offset 7
 998               		.cfi_offset 12, -6
 999 000a DF92      		push r13
 1000               	.LCFI30:
 1001               		.cfi_def_cfa_offset 8
 1002               		.cfi_offset 13, -7
 1003 000c EF92      		push r14
 1004               	.LCFI31:
 1005               		.cfi_def_cfa_offset 9
 1006               		.cfi_offset 14, -8
 1007 000e FF92      		push r15
 1008               	.LCFI32:
 1009               		.cfi_def_cfa_offset 10
 1010               		.cfi_offset 15, -9
 1011 0010 0F93      		push r16
 1012               	.LCFI33:
 1013               		.cfi_def_cfa_offset 11
 1014               		.cfi_offset 16, -10
 1015 0012 1F93      		push r17
 1016               	.LCFI34:
 1017               		.cfi_def_cfa_offset 12
 1018               		.cfi_offset 17, -11
 1019               	/* prologue: function */
 1020               	/* frame size = 0 */
 1021               	/* stack size = 10 */
 1022               	.L__stack_usage = 10
 1023 0014 6B01      		movw r12,r22
 1024 0016 7C01      		movw r14,r24
 860:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1025               		.loc 1 860 0
 1026 0018 81E0      		ldi r24,lo8(1)
 1027 001a 90E0      		ldi r25,0
 1028 001c A0E0      		ldi r26,0
 1029 001e B0E0      		ldi r27,0
 1030 0020 4C01      		movw r8,r24
 1031 0022 5D01      		movw r10,r26
 1032 0024 00C0      		rjmp 2f
 1033               		1:
 1034 0026 880C      		lsl r8
 1035 0028 991C      		rol r9
 1036 002a AA1C      		rol r10
 1037 002c BB1C      		rol r11
 1038               		2:
 1039 002e 4A95      		dec r20
 1040 0030 02F4      		brpl 1b
 1041 0032 AC01      		movw r20,r24
 1042 0034 BD01      		movw r22,r26
 1043               	.LVL128:
 1044 0036 00C0      		rjmp 2f
 1045               		1:
 1046 0038 440F      		lsl r20
 1047 003a 551F      		rol r21
 1048 003c 661F      		rol r22
 1049 003e 771F      		rol r23
 1050               		2:
 1051 0040 2A95      		dec r18
 1052 0042 02F4      		brpl 1b
 1053 0044 4829      		or r20,r8
 1054 0046 5929      		or r21,r9
 1055 0048 6A29      		or r22,r10
 1056 004a 7B29      		or r23,r11
 1057               	.LVL129:
 861:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 1058               		.loc 1 861 0
 1059 004c 00C0      		rjmp 2f
 1060               		1:
 1061 004e 880F      		lsl r24
 1062 0050 991F      		rol r25
 1063 0052 AA1F      		rol r26
 1064 0054 BB1F      		rol r27
 1065               		2:
 1066 0056 0A95      		dec r16
 1067 0058 02F4      		brpl 1b
 1068               	.LVL130:
 862:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1069               		.loc 1 862 0
 1070 005a 8A01      		movw r16,r20
 1071 005c 9B01      		movw r18,r22
 1072               	.LVL131:
 1073 005e 0C21      		and r16,r12
 1074 0060 1D21      		and r17,r13
 1075 0062 2E21      		and r18,r14
 1076 0064 3F21      		and r19,r15
 1077 0066 4017      		cp r20,r16
 1078 0068 5107      		cpc r21,r17
 1079 006a 6207      		cpc r22,r18
 1080 006c 7307      		cpc r23,r19
 1081 006e 01F4      		brne .L89
 1082               		.loc 1 862 0 is_stmt 0 discriminator 1
 1083 0070 BC01      		movw r22,r24
 1084 0072 CD01      		movw r24,r26
 1085               	.LVL132:
 1086 0074 6C29      		or r22,r12
 1087 0076 7D29      		or r23,r13
 1088 0078 8E29      		or r24,r14
 1089 007a 9F29      		or r25,r15
 1090 007c 00C0      		rjmp .L90
 1091               	.L89:
 1092               		.loc 1 862 0 discriminator 2
 1093 007e 8095      		com r24
 1094 0080 9095      		com r25
 1095 0082 A095      		com r26
 1096 0084 B095      		com r27
 1097               	.LVL133:
 1098 0086 BC01      		movw r22,r24
 1099 0088 CD01      		movw r24,r26
 1100 008a 6C21      		and r22,r12
 1101 008c 7D21      		and r23,r13
 1102 008e 8E21      		and r24,r14
 1103 0090 9F21      		and r25,r15
 1104               	.LVL134:
 1105               	.L90:
 1106               	/* epilogue start */
 863:quantum/quantum.c **** }
 1107               		.loc 1 863 0 is_stmt 1 discriminator 4
 1108 0092 1F91      		pop r17
 1109               	.LVL135:
 1110 0094 0F91      		pop r16
 1111               	.LVL136:
 1112 0096 FF90      		pop r15
 1113 0098 EF90      		pop r14
 1114 009a DF90      		pop r13
 1115 009c CF90      		pop r12
 1116               	.LVL137:
 1117 009e BF90      		pop r11
 1118 00a0 AF90      		pop r10
 1119 00a2 9F90      		pop r9
 1120 00a4 8F90      		pop r8
 1121               	.LVL138:
 1122 00a6 0895      		ret
 1123               		.cfi_endproc
 1124               	.LFE47:
 1126               		.section	.text.update_tri_layer,"ax",@progbits
 1127               	.global	update_tri_layer
 1129               	update_tri_layer:
 1130               	.LFB48:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 1131               		.loc 1 865 0
 1132               		.cfi_startproc
 1133               	.LVL139:
 1134 0000 0F93      		push r16
 1135               	.LCFI35:
 1136               		.cfi_def_cfa_offset 3
 1137               		.cfi_offset 16, -2
 1138               	/* prologue: function */
 1139               	/* frame size = 0 */
 1140               	/* stack size = 1 */
 1141               	.L__stack_usage = 1
 1142 0002 382F      		mov r19,r24
 1143 0004 262F      		mov r18,r22
 1144               		.loc 1 865 0
 1145 0006 6091 0000 		lds r22,layer_state
 1146 000a 7091 0000 		lds r23,layer_state+1
 1147 000e 8091 0000 		lds r24,layer_state+2
 1148 0012 9091 0000 		lds r25,layer_state+3
 1149               	.LVL140:
 1150 0016 042F      		mov r16,r20
 1151 0018 432F      		mov r20,r19
 1152               	.LVL141:
 1153 001a 0E94 0000 		call update_tri_layer_state
 1154               	.LVL142:
 1155               	/* epilogue start */
 1156 001e 0F91      		pop r16
 1157               	.LVL143:
 1158 0020 0C94 0000 		jmp layer_state_set
 1159               	.LVL144:
 1160               		.cfi_endproc
 1161               	.LFE48:
 1163               		.section	.text.tap_random_base64,"ax",@progbits
 1164               	.global	tap_random_base64
 1166               	tap_random_base64:
 1167               	.LFB49:
 866:quantum/quantum.c **** 
 867:quantum/quantum.c **** void tap_random_base64(void) {
 1168               		.loc 1 867 0
 1169               		.cfi_startproc
 1170 0000 CF93      		push r28
 1171               	.LCFI36:
 1172               		.cfi_def_cfa_offset 3
 1173               		.cfi_offset 28, -2
 1174 0002 DF93      		push r29
 1175               	.LCFI37:
 1176               		.cfi_def_cfa_offset 4
 1177               		.cfi_offset 29, -3
 1178               	/* prologue: function */
 1179               	/* frame size = 0 */
 1180               	/* stack size = 2 */
 1181               	.L__stack_usage = 2
 868:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 869:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 870:quantum/quantum.c **** #else
 871:quantum/quantum.c ****     uint8_t key = rand() % 64;
 1182               		.loc 1 871 0
 1183 0004 0E94 0000 		call rand
 1184               	.LVL145:
 1185 0008 60E4      		ldi r22,lo8(64)
 1186 000a 70E0      		ldi r23,0
 1187 000c 0E94 0000 		call __divmodhi4
 1188 0010 EC01      		movw r28,r24
 1189               	.LVL146:
 872:quantum/quantum.c **** #endif
 873:quantum/quantum.c ****     switch (key) {
 1190               		.loc 1 873 0
 1191 0012 9927      		clr r25
 1192               	.LVL147:
 1193 0014 8433      		cpi r24,52
 1194 0016 9105      		cpc r25,__zero_reg__
 1195 0018 01F0      		breq .L94
 1196 001a 04F4      		brge .L95
 1197 001c 4A97      		sbiw r24,26
 1198 001e 04F4      		brge .L101
 874:quantum/quantum.c ****         case 0 ... 25:
 875:quantum/quantum.c ****             register_code(KC_LSFT);
 1199               		.loc 1 875 0
 1200 0020 81EE      		ldi r24,lo8(-31)
 1201 0022 0E94 0000 		call register_code
 1202               	.LVL148:
 876:quantum/quantum.c ****             register_code(key + KC_A);
 1203               		.loc 1 876 0
 1204 0026 CC5F      		subi r28,lo8(-(4))
 1205               	.LVL149:
 1206 0028 8C2F      		mov r24,r28
 1207 002a 0E94 0000 		call register_code
 1208               	.LVL150:
 877:quantum/quantum.c ****             unregister_code(key + KC_A);
 1209               		.loc 1 877 0
 1210 002e 8C2F      		mov r24,r28
 1211 0030 00C0      		rjmp .L104
 1212               	.LVL151:
 1213               	.L95:
 873:quantum/quantum.c ****         case 0 ... 25:
 1214               		.loc 1 873 0
 1215 0032 8E33      		cpi r24,62
 1216 0034 9105      		cpc r25,__zero_reg__
 1217 0036 01F0      		breq .L98
 1218 0038 04F0      		brlt .L99
 1219 003a CF97      		sbiw r24,63
 1220 003c 01F4      		brne .L106
 878:quantum/quantum.c ****             unregister_code(KC_LSFT);
 879:quantum/quantum.c ****             break;
 880:quantum/quantum.c ****         case 26 ... 51:
 881:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 882:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 883:quantum/quantum.c ****             break;
 884:quantum/quantum.c ****         case 52:
 885:quantum/quantum.c ****             register_code(KC_0);
 886:quantum/quantum.c ****             unregister_code(KC_0);
 887:quantum/quantum.c ****             break;
 888:quantum/quantum.c ****         case 53 ... 61:
 889:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 890:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 891:quantum/quantum.c ****             break;
 892:quantum/quantum.c ****         case 62:
 893:quantum/quantum.c ****             register_code(KC_LSFT);
 894:quantum/quantum.c ****             register_code(KC_EQL);
 895:quantum/quantum.c ****             unregister_code(KC_EQL);
 896:quantum/quantum.c ****             unregister_code(KC_LSFT);
 897:quantum/quantum.c ****             break;
 898:quantum/quantum.c ****         case 63:
 899:quantum/quantum.c ****             register_code(KC_SLSH);
 1221               		.loc 1 899 0
 1222 003e 88E3      		ldi r24,lo8(56)
 1223 0040 0E94 0000 		call register_code
 1224               	.LVL152:
 900:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1225               		.loc 1 900 0
 1226 0044 88E3      		ldi r24,lo8(56)
 1227 0046 00C0      		rjmp .L103
 1228               	.L101:
 881:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 1229               		.loc 1 881 0
 1230 0048 C651      		subi r28,lo8(-(-22))
 1231               	.LVL153:
 1232 004a 00C0      		rjmp .L105
 1233               	.LVL154:
 1234               	.L94:
 885:quantum/quantum.c ****             unregister_code(KC_0);
 1235               		.loc 1 885 0
 1236 004c 87E2      		ldi r24,lo8(39)
 1237 004e 0E94 0000 		call register_code
 1238               	.LVL155:
 886:quantum/quantum.c ****             break;
 1239               		.loc 1 886 0
 1240 0052 87E2      		ldi r24,lo8(39)
 1241 0054 00C0      		rjmp .L103
 1242               	.L99:
 889:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1243               		.loc 1 889 0
 1244 0056 C751      		subi r28,lo8(-(-23))
 1245               	.LVL156:
 1246               	.L105:
 1247 0058 8C2F      		mov r24,r28
 1248 005a 0E94 0000 		call register_code
 1249               	.LVL157:
 890:quantum/quantum.c ****             break;
 1250               		.loc 1 890 0
 1251 005e 8C2F      		mov r24,r28
 1252 0060 00C0      		rjmp .L103
 1253               	.LVL158:
 1254               	.L98:
 893:quantum/quantum.c ****             register_code(KC_EQL);
 1255               		.loc 1 893 0
 1256 0062 81EE      		ldi r24,lo8(-31)
 1257 0064 0E94 0000 		call register_code
 1258               	.LVL159:
 894:quantum/quantum.c ****             unregister_code(KC_EQL);
 1259               		.loc 1 894 0
 1260 0068 8EE2      		ldi r24,lo8(46)
 1261 006a 0E94 0000 		call register_code
 1262               	.LVL160:
 895:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1263               		.loc 1 895 0
 1264 006e 8EE2      		ldi r24,lo8(46)
 1265               	.LVL161:
 1266               	.L104:
 1267 0070 0E94 0000 		call unregister_code
 1268               	.LVL162:
 896:quantum/quantum.c ****             break;
 1269               		.loc 1 896 0
 1270 0074 81EE      		ldi r24,lo8(-31)
 1271               	.L103:
 1272               	/* epilogue start */
 901:quantum/quantum.c ****             break;
 902:quantum/quantum.c ****     }
 903:quantum/quantum.c **** }
 1273               		.loc 1 903 0
 1274 0076 DF91      		pop r29
 1275 0078 CF91      		pop r28
 900:quantum/quantum.c ****             break;
 1276               		.loc 1 900 0
 1277 007a 0C94 0000 		jmp unregister_code
 1278               	.LVL163:
 1279               	.L106:
 1280               	/* epilogue start */
 1281               		.loc 1 903 0
 1282 007e DF91      		pop r29
 1283 0080 CF91      		pop r28
 1284               	.LVL164:
 1285 0082 0895      		ret
 1286               		.cfi_endproc
 1287               	.LFE49:
 1289               		.section	.text.bootmagic_lite,"ax",@progbits
 1290               		.weak	bootmagic_lite
 1292               	bootmagic_lite:
 1293               	.LFB50:
 904:quantum/quantum.c **** 
 905:quantum/quantum.c **** __attribute__((weak)) void bootmagic_lite(void) {
 1294               		.loc 1 905 0
 1295               		.cfi_startproc
 1296               	/* prologue: function */
 1297               	/* frame size = 0 */
 1298               	/* stack size = 0 */
 1299               	.L__stack_usage = 0
 906:quantum/quantum.c ****     // The lite version of TMK's bootmagic based on Wilba.
 907:quantum/quantum.c ****     // 100% less potential for accidentally making the
 908:quantum/quantum.c ****     // keyboard do stupid things.
 909:quantum/quantum.c **** 
 910:quantum/quantum.c ****     // We need multiple scans because debouncing can't be turned off.
 911:quantum/quantum.c ****     matrix_scan();
 1300               		.loc 1 911 0
 1301 0000 0E94 0000 		call matrix_scan
 1302               	.LVL165:
 1303               	.LBB53:
 1304               	.LBB54:
 1305               		.loc 2 187 0
 1306 0004 8FE3      		ldi r24,lo8(-25537)
 1307 0006 9CE9      		ldi r25,hi8(-25537)
 1308 0008 0197      	1:	sbiw r24,1
 1309 000a 01F4      		brne 1b
 1310 000c 00C0      		rjmp .
 1311 000e 0000      		nop
 1312               	.LVL166:
 1313               	.LBE54:
 1314               	.LBE53:
 912:quantum/quantum.c **** #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 913:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 914:quantum/quantum.c **** #elif defined(DEBOUNCE) && DEBOUNCE > 0
 915:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 916:quantum/quantum.c **** #else
 917:quantum/quantum.c ****     wait_ms(30);
 918:quantum/quantum.c **** #endif
 919:quantum/quantum.c ****     matrix_scan();
 1315               		.loc 1 919 0
 1316 0010 0E94 0000 		call matrix_scan
 1317               	.LVL167:
 920:quantum/quantum.c **** 
 921:quantum/quantum.c ****     // If the Esc and space bar are held down on power up,
 922:quantum/quantum.c ****     // reset the EEPROM valid state and jump to bootloader.
 923:quantum/quantum.c ****     // Assumes Esc is at [0,0].
 924:quantum/quantum.c ****     // This isn't very generalized, but we need something that doesn't
 925:quantum/quantum.c ****     // rely on user's keymaps in firmware or EEPROM.
 926:quantum/quantum.c ****     if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1318               		.loc 1 926 0
 1319 0014 80E0      		ldi r24,0
 1320 0016 0E94 0000 		call matrix_get_row
 1321               	.LVL168:
 1322 001a 80FF      		sbrs r24,0
 1323 001c 00C0      		rjmp .L107
 927:quantum/quantum.c ****         eeconfig_disable();
 1324               		.loc 1 927 0
 1325 001e 0E94 0000 		call eeconfig_disable
 1326               	.LVL169:
 928:quantum/quantum.c ****         // Jump to bootloader.
 929:quantum/quantum.c ****         bootloader_jump();
 1327               		.loc 1 929 0
 1328 0022 0C94 0000 		jmp bootloader_jump
 1329               	.LVL170:
 1330               	.L107:
 1331 0026 0895      		ret
 1332               		.cfi_endproc
 1333               	.LFE50:
 1335               		.section	.text.matrix_init_quantum,"ax",@progbits
 1336               	.global	matrix_init_quantum
 1338               	matrix_init_quantum:
 1339               	.LFB51:
 930:quantum/quantum.c ****     }
 931:quantum/quantum.c **** }
 932:quantum/quantum.c **** 
 933:quantum/quantum.c **** void matrix_init_quantum() {
 1340               		.loc 1 933 0
 1341               		.cfi_startproc
 1342               	/* prologue: function */
 1343               	/* frame size = 0 */
 1344               	/* stack size = 0 */
 1345               	.L__stack_usage = 0
 934:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 935:quantum/quantum.c ****     bootmagic_lite();
 936:quantum/quantum.c **** #endif
 937:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1346               		.loc 1 937 0
 1347 0000 0E94 0000 		call eeconfig_is_enabled
 1348               	.LVL171:
 1349 0004 8111      		cpse r24,__zero_reg__
 1350 0006 00C0      		rjmp .L110
 938:quantum/quantum.c ****         eeconfig_init();
 1351               		.loc 1 938 0
 1352 0008 0E94 0000 		call eeconfig_init
 1353               	.LVL172:
 1354               	.L110:
 939:quantum/quantum.c ****     }
 940:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 941:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 942:quantum/quantum.c ****     led_matrix_init();
 943:quantum/quantum.c **** #    else
 944:quantum/quantum.c ****     backlight_init_ports();
 945:quantum/quantum.c **** #    endif
 946:quantum/quantum.c **** #endif
 947:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 948:quantum/quantum.c ****     audio_init();
 949:quantum/quantum.c **** #endif
 950:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 951:quantum/quantum.c ****     rgb_matrix_init();
 952:quantum/quantum.c **** #endif
 953:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 954:quantum/quantum.c ****     encoder_init();
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 957:quantum/quantum.c ****     unicode_input_mode_init();
 958:quantum/quantum.c **** #endif
 959:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 960:quantum/quantum.c ****     haptic_init();
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 963:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 964:quantum/quantum.c **** #endif
 965:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 966:quantum/quantum.c ****     dip_switch_init();
 967:quantum/quantum.c **** #endif
 968:quantum/quantum.c **** 
 969:quantum/quantum.c ****     matrix_init_kb();
 1355               		.loc 1 969 0
 1356 000c 0C94 0000 		jmp matrix_init_kb
 1357               	.LVL173:
 1358               		.cfi_endproc
 1359               	.LFE51:
 1361               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1362               	.global	matrix_scan_quantum
 1364               	matrix_scan_quantum:
 1365               	.LFB52:
 970:quantum/quantum.c **** }
 971:quantum/quantum.c **** 
 972:quantum/quantum.c **** void matrix_scan_quantum() {
 1366               		.loc 1 972 0
 1367               		.cfi_startproc
 1368               	/* prologue: function */
 1369               	/* frame size = 0 */
 1370               	/* stack size = 0 */
 1371               	.L__stack_usage = 0
 973:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 974:quantum/quantum.c ****     matrix_scan_music();
 975:quantum/quantum.c **** #endif
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 978:quantum/quantum.c ****     matrix_scan_tap_dance();
 979:quantum/quantum.c **** #endif
 980:quantum/quantum.c **** 
 981:quantum/quantum.c **** #ifdef COMBO_ENABLE
 982:quantum/quantum.c ****     matrix_scan_combo();
 983:quantum/quantum.c **** #endif
 984:quantum/quantum.c **** 
 985:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE)
 986:quantum/quantum.c **** #    if defined(LED_MATRIX_ENABLE)
 987:quantum/quantum.c ****     led_matrix_task();
 988:quantum/quantum.c **** #    elif defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS)
 989:quantum/quantum.c ****     backlight_task();
 990:quantum/quantum.c **** #    endif
 991:quantum/quantum.c **** #endif
 992:quantum/quantum.c **** 
 993:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 994:quantum/quantum.c ****     rgb_matrix_task();
 995:quantum/quantum.c **** #endif
 996:quantum/quantum.c **** 
 997:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 998:quantum/quantum.c ****     encoder_read();
 999:quantum/quantum.c **** #endif
1000:quantum/quantum.c **** 
1001:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
1002:quantum/quantum.c ****     haptic_task();
1003:quantum/quantum.c **** #endif
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
1006:quantum/quantum.c ****     dip_switch_read(false);
1007:quantum/quantum.c **** #endif
1008:quantum/quantum.c **** 
1009:quantum/quantum.c ****     matrix_scan_kb();
 1372               		.loc 1 1009 0
 1373 0000 0C94 0000 		jmp matrix_scan_kb
 1374               	.LVL174:
 1375               		.cfi_endproc
 1376               	.LFE52:
 1378               		.section	.text.send_nibble,"ax",@progbits
 1379               	.global	send_nibble
 1381               	send_nibble:
 1382               	.LFB56:
1010:quantum/quantum.c **** }
1011:quantum/quantum.c **** 
1012:quantum/quantum.c **** #ifdef HD44780_ENABLED
1013:quantum/quantum.c **** #    include "hd44780.h"
1014:quantum/quantum.c **** #endif
1015:quantum/quantum.c **** 
1016:quantum/quantum.c **** // Functions for spitting out values
1017:quantum/quantum.c **** //
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** void send_dword(uint32_t number) {  // this might not actually work
1020:quantum/quantum.c ****     uint16_t word = (number >> 16);
1021:quantum/quantum.c ****     send_word(word);
1022:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1023:quantum/quantum.c **** }
1024:quantum/quantum.c **** 
1025:quantum/quantum.c **** void send_word(uint16_t number) {
1026:quantum/quantum.c ****     uint8_t byte = number >> 8;
1027:quantum/quantum.c ****     send_byte(byte);
1028:quantum/quantum.c ****     send_byte(number & 0xFF);
1029:quantum/quantum.c **** }
1030:quantum/quantum.c **** 
1031:quantum/quantum.c **** void send_byte(uint8_t number) {
1032:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1033:quantum/quantum.c ****     send_nibble(nibble);
1034:quantum/quantum.c ****     send_nibble(number & 0xF);
1035:quantum/quantum.c **** }
1036:quantum/quantum.c **** 
1037:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1383               		.loc 1 1037 0
 1384               		.cfi_startproc
 1385               	.LVL175:
 1386 0000 CF93      		push r28
 1387               	.LCFI38:
 1388               		.cfi_def_cfa_offset 3
 1389               		.cfi_offset 28, -2
 1390               	/* prologue: function */
 1391               	/* frame size = 0 */
 1392               	/* stack size = 1 */
 1393               	.L__stack_usage = 1
1038:quantum/quantum.c ****     switch (number) {
 1394               		.loc 1 1038 0
 1395 0002 8A30      		cpi r24,lo8(10)
 1396 0004 00F4      		brsh .L114
 1397 0006 8130      		cpi r24,lo8(1)
 1398 0008 00F4      		brsh .L122
1039:quantum/quantum.c ****         case 0:
1040:quantum/quantum.c ****             register_code(KC_0);
 1399               		.loc 1 1040 0
 1400 000a 87E2      		ldi r24,lo8(39)
 1401               	.LVL176:
 1402 000c 0E94 0000 		call register_code
 1403               	.LVL177:
1041:quantum/quantum.c ****             unregister_code(KC_0);
 1404               		.loc 1 1041 0
 1405 0010 87E2      		ldi r24,lo8(39)
 1406 0012 00C0      		rjmp .L120
 1407               	.LVL178:
 1408               	.L114:
1038:quantum/quantum.c ****     switch (number) {
 1409               		.loc 1 1038 0
 1410 0014 8031      		cpi r24,lo8(16)
 1411 0016 00F4      		brsh .L123
1042:quantum/quantum.c ****             break;
1043:quantum/quantum.c ****         case 1 ... 9:
1044:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
1045:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1046:quantum/quantum.c ****             break;
1047:quantum/quantum.c ****         case 0xA ... 0xF:
1048:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1412               		.loc 1 1048 0
 1413 0018 CAEF      		ldi r28,lo8(-6)
 1414 001a 00C0      		rjmp .L121
 1415               	.L122:
1044:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 1416               		.loc 1 1044 0
 1417 001c CDE1      		ldi r28,lo8(29)
 1418               	.L121:
 1419               		.loc 1 1048 0
 1420 001e C80F      		add r28,r24
 1421 0020 8C2F      		mov r24,r28
 1422               	.LVL179:
 1423 0022 0E94 0000 		call register_code
 1424               	.LVL180:
1049:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1425               		.loc 1 1049 0
 1426 0026 8C2F      		mov r24,r28
 1427               	.L120:
 1428               	/* epilogue start */
1050:quantum/quantum.c ****             break;
1051:quantum/quantum.c ****     }
1052:quantum/quantum.c **** }
 1429               		.loc 1 1052 0
 1430 0028 CF91      		pop r28
1049:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1431               		.loc 1 1049 0
 1432 002a 0C94 0000 		jmp unregister_code
 1433               	.LVL181:
 1434               	.L123:
 1435               	/* epilogue start */
 1436               		.loc 1 1052 0
 1437 002e CF91      		pop r28
 1438 0030 0895      		ret
 1439               		.cfi_endproc
 1440               	.LFE56:
 1442               		.section	.text.send_byte,"ax",@progbits
 1443               	.global	send_byte
 1445               	send_byte:
 1446               	.LFB55:
1031:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1447               		.loc 1 1031 0
 1448               		.cfi_startproc
 1449               	.LVL182:
 1450 0000 CF93      		push r28
 1451               	.LCFI39:
 1452               		.cfi_def_cfa_offset 3
 1453               		.cfi_offset 28, -2
 1454               	/* prologue: function */
 1455               	/* frame size = 0 */
 1456               	/* stack size = 1 */
 1457               	.L__stack_usage = 1
 1458 0002 C82F      		mov r28,r24
 1459               	.LVL183:
1033:quantum/quantum.c ****     send_nibble(number & 0xF);
 1460               		.loc 1 1033 0
 1461 0004 8295      		swap r24
 1462               	.LVL184:
 1463 0006 8F70      		andi r24,lo8(15)
 1464 0008 0E94 0000 		call send_nibble
 1465               	.LVL185:
1034:quantum/quantum.c **** }
 1466               		.loc 1 1034 0
 1467 000c 8C2F      		mov r24,r28
 1468 000e 8F70      		andi r24,lo8(15)
 1469               	/* epilogue start */
1035:quantum/quantum.c **** 
 1470               		.loc 1 1035 0
 1471 0010 CF91      		pop r28
 1472               	.LVL186:
1034:quantum/quantum.c **** }
 1473               		.loc 1 1034 0
 1474 0012 0C94 0000 		jmp send_nibble
 1475               	.LVL187:
 1476               		.cfi_endproc
 1477               	.LFE55:
 1479               		.section	.text.send_word,"ax",@progbits
 1480               	.global	send_word
 1482               	send_word:
 1483               	.LFB54:
1025:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1484               		.loc 1 1025 0
 1485               		.cfi_startproc
 1486               	.LVL188:
 1487 0000 CF93      		push r28
 1488               	.LCFI40:
 1489               		.cfi_def_cfa_offset 3
 1490               		.cfi_offset 28, -2
 1491               	/* prologue: function */
 1492               	/* frame size = 0 */
 1493               	/* stack size = 1 */
 1494               	.L__stack_usage = 1
 1495 0002 C82F      		mov r28,r24
 1496               	.LVL189:
1027:quantum/quantum.c ****     send_byte(number & 0xFF);
 1497               		.loc 1 1027 0
 1498 0004 892F      		mov r24,r25
 1499               	.LVL190:
 1500 0006 0E94 0000 		call send_byte
 1501               	.LVL191:
1028:quantum/quantum.c **** }
 1502               		.loc 1 1028 0
 1503 000a 8C2F      		mov r24,r28
 1504               	/* epilogue start */
1029:quantum/quantum.c **** 
 1505               		.loc 1 1029 0
 1506 000c CF91      		pop r28
1028:quantum/quantum.c **** }
 1507               		.loc 1 1028 0
 1508 000e 0C94 0000 		jmp send_byte
 1509               	.LVL192:
 1510               		.cfi_endproc
 1511               	.LFE54:
 1513               		.section	.text.send_dword,"ax",@progbits
 1514               	.global	send_dword
 1516               	send_dword:
 1517               	.LFB53:
1019:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1518               		.loc 1 1019 0
 1519               		.cfi_startproc
 1520               	.LVL193:
 1521 0000 CF92      		push r12
 1522               	.LCFI41:
 1523               		.cfi_def_cfa_offset 3
 1524               		.cfi_offset 12, -2
 1525 0002 DF92      		push r13
 1526               	.LCFI42:
 1527               		.cfi_def_cfa_offset 4
 1528               		.cfi_offset 13, -3
 1529 0004 EF92      		push r14
 1530               	.LCFI43:
 1531               		.cfi_def_cfa_offset 5
 1532               		.cfi_offset 14, -4
 1533 0006 FF92      		push r15
 1534               	.LCFI44:
 1535               		.cfi_def_cfa_offset 6
 1536               		.cfi_offset 15, -5
 1537               	/* prologue: function */
 1538               	/* frame size = 0 */
 1539               	/* stack size = 4 */
 1540               	.L__stack_usage = 4
 1541 0008 6B01      		movw r12,r22
 1542 000a 7C01      		movw r14,r24
 1543               	.LVL194:
1021:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1544               		.loc 1 1021 0
 1545 000c C701      		movw r24,r14
 1546 000e 0E94 0000 		call send_word
 1547               	.LVL195:
1022:quantum/quantum.c **** }
 1548               		.loc 1 1022 0
 1549 0012 C601      		movw r24,r12
 1550               	/* epilogue start */
1023:quantum/quantum.c **** 
 1551               		.loc 1 1023 0
 1552 0014 FF90      		pop r15
 1553 0016 EF90      		pop r14
 1554 0018 DF90      		pop r13
 1555 001a CF90      		pop r12
 1556               	.LVL196:
1022:quantum/quantum.c **** }
 1557               		.loc 1 1022 0
 1558 001c 0C94 0000 		jmp send_word
 1559               	.LVL197:
 1560               		.cfi_endproc
 1561               	.LFE53:
 1563               		.section	.text.hex_to_keycode,"ax",@progbits
 1564               		.weak	hex_to_keycode
 1566               	hex_to_keycode:
 1567               	.LFB57:
1053:quantum/quantum.c **** 
1054:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 1568               		.loc 1 1054 0
 1569               		.cfi_startproc
 1570               	.LVL198:
 1571               	/* prologue: function */
 1572               	/* frame size = 0 */
 1573               	/* stack size = 0 */
 1574               	.L__stack_usage = 0
1055:quantum/quantum.c ****     hex = hex & 0xF;
 1575               		.loc 1 1055 0
 1576 0000 282F      		mov r18,r24
 1577 0002 2F70      		andi r18,lo8(15)
 1578               	.LVL199:
1056:quantum/quantum.c ****     if (hex == 0x0) {
 1579               		.loc 1 1056 0
 1580 0004 01F0      		breq .L130
 1581 0006 822F      		mov r24,r18
 1582 0008 90E0      		ldi r25,0
1057:quantum/quantum.c ****         return KC_0;
1058:quantum/quantum.c ****     } else if (hex < 0xA) {
 1583               		.loc 1 1058 0
 1584 000a 2A30      		cpi r18,lo8(10)
 1585 000c 00F4      		brsh .L129
1059:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 1586               		.loc 1 1059 0
 1587 000e 4D96      		adiw r24,29
 1588 0010 0895      		ret
 1589               	.L129:
1060:quantum/quantum.c ****     } else {
1061:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 1590               		.loc 1 1061 0
 1591 0012 0697      		sbiw r24,6
 1592 0014 0895      		ret
 1593               	.L130:
1057:quantum/quantum.c ****     } else if (hex < 0xA) {
 1594               		.loc 1 1057 0
 1595 0016 87E2      		ldi r24,lo8(39)
 1596 0018 90E0      		ldi r25,0
1062:quantum/quantum.c ****     }
1063:quantum/quantum.c **** }
 1597               		.loc 1 1063 0
 1598 001a 0895      		ret
 1599               		.cfi_endproc
 1600               	.LFE57:
 1602               		.section	.text.api_send_unicode,"ax",@progbits
 1603               	.global	api_send_unicode
 1605               	api_send_unicode:
 1606               	.LFB58:
1064:quantum/quantum.c **** 
1065:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1607               		.loc 1 1065 0
 1608               		.cfi_startproc
 1609               	.LVL200:
 1610               	/* prologue: function */
 1611               	/* frame size = 0 */
 1612               	/* stack size = 0 */
 1613               	.L__stack_usage = 0
 1614 0000 0895      		ret
 1615               		.cfi_endproc
 1616               	.LFE58:
 1618               		.section	.text.led_set_user,"ax",@progbits
 1619               		.weak	led_set_user
 1621               	led_set_user:
 1622               	.LFB59:
1066:quantum/quantum.c **** #ifdef API_ENABLE
1067:quantum/quantum.c ****     uint8_t chunk[4];
1068:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1069:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1070:quantum/quantum.c **** #endif
1071:quantum/quantum.c **** }
1072:quantum/quantum.c **** 
1073:quantum/quantum.c **** /** \brief Lock LED set callback - keymap/user level
1074:quantum/quantum.c ****  *
1075:quantum/quantum.c ****  * \deprecated Use led_update_user() instead.
1076:quantum/quantum.c ****  */
1077:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 1623               		.loc 1 1077 0
 1624               		.cfi_startproc
 1625               	.LVL201:
 1626               	/* prologue: function */
 1627               	/* frame size = 0 */
 1628               	/* stack size = 0 */
 1629               	.L__stack_usage = 0
 1630 0000 0895      		ret
 1631               		.cfi_endproc
 1632               	.LFE59:
 1634               		.section	.text.led_set_kb,"ax",@progbits
 1635               		.weak	led_set_kb
 1637               	led_set_kb:
 1638               	.LFB60:
1078:quantum/quantum.c **** 
1079:quantum/quantum.c **** /** \brief Lock LED set callback - keyboard level
1080:quantum/quantum.c ****  *
1081:quantum/quantum.c ****  * \deprecated Use led_update_kb() instead.
1082:quantum/quantum.c ****  */
1083:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 1639               		.loc 1 1083 0
 1640               		.cfi_startproc
 1641               	.LVL202:
 1642               	/* prologue: function */
 1643               	/* frame size = 0 */
 1644               	/* stack size = 0 */
 1645               	.L__stack_usage = 0
 1646               		.loc 1 1083 0
 1647 0000 0C94 0000 		jmp led_set_user
 1648               	.LVL203:
 1649               		.cfi_endproc
 1650               	.LFE60:
 1652               		.section	.text.led_update_user,"ax",@progbits
 1653               		.weak	led_update_user
 1655               	led_update_user:
 1656               	.LFB61:
1084:quantum/quantum.c **** 
1085:quantum/quantum.c **** /** \brief Lock LED update callback - keymap/user level
1086:quantum/quantum.c ****  *
1087:quantum/quantum.c ****  * \return True if led_update_kb() should run its own code, false otherwise.
1088:quantum/quantum.c ****  */
1089:quantum/quantum.c **** __attribute__((weak)) bool led_update_user(led_t led_state) { return true; }
 1657               		.loc 1 1089 0
 1658               		.cfi_startproc
 1659               	.LVL204:
 1660               	/* prologue: function */
 1661               	/* frame size = 0 */
 1662               	/* stack size = 0 */
 1663               	.L__stack_usage = 0
 1664               		.loc 1 1089 0
 1665 0000 81E0      		ldi r24,lo8(1)
 1666               	.LVL205:
 1667 0002 0895      		ret
 1668               		.cfi_endproc
 1669               	.LFE61:
 1671               		.section	.text.led_update_kb,"ax",@progbits
 1672               		.weak	led_update_kb
 1674               	led_update_kb:
 1675               	.LFB62:
1090:quantum/quantum.c **** 
1091:quantum/quantum.c **** /** \brief Lock LED update callback - keyboard level
1092:quantum/quantum.c ****  *
1093:quantum/quantum.c ****  * \return Ignored for now.
1094:quantum/quantum.c ****  */
1095:quantum/quantum.c **** __attribute__((weak)) bool led_update_kb(led_t led_state) { return led_update_user(led_state); }
 1676               		.loc 1 1095 0
 1677               		.cfi_startproc
 1678               	.LVL206:
 1679               	/* prologue: function */
 1680               	/* frame size = 0 */
 1681               	/* stack size = 0 */
 1682               	.L__stack_usage = 0
 1683               		.loc 1 1095 0
 1684 0000 0C94 0000 		jmp led_update_user
 1685               	.LVL207:
 1686               		.cfi_endproc
 1687               	.LFE62:
 1689               		.section	.text.led_set,"ax",@progbits
 1690               		.weak	led_set
 1692               	led_set:
 1693               	.LFB64:
1096:quantum/quantum.c **** 
1097:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
1098:quantum/quantum.c **** 
1099:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 1694               		.loc 1 1099 0
 1695               		.cfi_startproc
 1696               	.LVL208:
 1697 0000 CF93      		push r28
 1698               	.LCFI45:
 1699               		.cfi_def_cfa_offset 3
 1700               		.cfi_offset 28, -2
 1701               	/* prologue: function */
 1702               	/* frame size = 0 */
 1703               	/* stack size = 1 */
 1704               	.L__stack_usage = 1
 1705 0002 C82F      		mov r28,r24
1100:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1101:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
1102:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
1103:quantum/quantum.c **** 
1104:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1105:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
1106:quantum/quantum.c ****         // Toggling backlight to the brightest level
1107:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
1108:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1109:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
1110:quantum/quantum.c ****         // Toggling backlight and restoring config level
1111:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
1112:quantum/quantum.c ****     }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
1115:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
1116:quantum/quantum.c **** #endif
1117:quantum/quantum.c **** 
1118:quantum/quantum.c ****     led_set_kb(usb_led);
 1706               		.loc 1 1118 0
 1707 0004 0E94 0000 		call led_set_kb
 1708               	.LVL209:
1119:quantum/quantum.c ****     led_update_kb((led_t) usb_led);
 1709               		.loc 1 1119 0
 1710 0008 8C2F      		mov r24,r28
 1711 000a 0E94 0000 		call led_update_kb
 1712               	.LVL210:
 1713               	/* epilogue start */
1120:quantum/quantum.c **** }
 1714               		.loc 1 1120 0
 1715 000e CF91      		pop r28
 1716               	.LVL211:
 1717 0010 0895      		ret
 1718               		.cfi_endproc
 1719               	.LFE64:
 1721               		.section	.text.shutdown_user,"ax",@progbits
 1722               		.weak	shutdown_user
 1724               	shutdown_user:
 1725               	.LFB66:
1121:quantum/quantum.c **** 
1122:quantum/quantum.c **** //------------------------------------------------------------------------------
1123:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
1124:quantum/quantum.c **** // different events such as startup and bootloader jump
1125:quantum/quantum.c **** 
1126:quantum/quantum.c **** __attribute__((weak)) void startup_user() {}
1127:quantum/quantum.c **** 
1128:quantum/quantum.c **** __attribute__((weak)) void shutdown_user() {}
 1726               		.loc 1 1128 0
 1727               		.cfi_startproc
 1728               	/* prologue: function */
 1729               	/* frame size = 0 */
 1730               	/* stack size = 0 */
 1731               	.L__stack_usage = 0
 1732 0000 0895      		ret
 1733               		.cfi_endproc
 1734               	.LFE66:
 1736               		.set	shutdown_user.localalias.0,shutdown_user
 1737               		.section	.text.startup_user,"ax",@progbits
 1738               		.weak	startup_user
 1740               	startup_user:
 1741               	.LFB68:
 1742               		.cfi_startproc
 1743               	/* prologue: function */
 1744               	/* frame size = 0 */
 1745               	/* stack size = 0 */
 1746               	.L__stack_usage = 0
 1747 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1748               		.cfi_endproc
 1749               	.LFE68:
 1751               		.section	.text.led_init_ports,"ax",@progbits
 1752               		.weak	led_init_ports
 1754               	led_init_ports:
 1755               	.LFB70:
 1756               		.cfi_startproc
 1757               	/* prologue: function */
 1758               	/* frame size = 0 */
 1759               	/* stack size = 0 */
 1760               	.L__stack_usage = 0
 1761 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1762               		.cfi_endproc
 1763               	.LFE70:
 1765               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 1766               		.weak	rgblight_decrease_speed
 1768               	rgblight_decrease_speed:
 1769               	.LFB72:
 1770               		.cfi_startproc
 1771               	/* prologue: function */
 1772               	/* frame size = 0 */
 1773               	/* stack size = 0 */
 1774               	.L__stack_usage = 0
 1775 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1776               		.cfi_endproc
 1777               	.LFE72:
 1779               		.section	.text.rgblight_increase_speed,"ax",@progbits
 1780               		.weak	rgblight_increase_speed
 1782               	rgblight_increase_speed:
 1783               	.LFB74:
 1784               		.cfi_startproc
 1785               	/* prologue: function */
 1786               	/* frame size = 0 */
 1787               	/* stack size = 0 */
 1788               	.L__stack_usage = 0
 1789 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1790               		.cfi_endproc
 1791               	.LFE74:
 1793               		.section	.text.rgblight_decrease_val,"ax",@progbits
 1794               		.weak	rgblight_decrease_val
 1796               	rgblight_decrease_val:
 1797               	.LFB76:
 1798               		.cfi_startproc
 1799               	/* prologue: function */
 1800               	/* frame size = 0 */
 1801               	/* stack size = 0 */
 1802               	.L__stack_usage = 0
 1803 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1804               		.cfi_endproc
 1805               	.LFE76:
 1807               		.section	.text.rgblight_increase_val,"ax",@progbits
 1808               		.weak	rgblight_increase_val
 1810               	rgblight_increase_val:
 1811               	.LFB78:
 1812               		.cfi_startproc
 1813               	/* prologue: function */
 1814               	/* frame size = 0 */
 1815               	/* stack size = 0 */
 1816               	.L__stack_usage = 0
 1817 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1818               		.cfi_endproc
 1819               	.LFE78:
 1821               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 1822               		.weak	rgblight_decrease_sat
 1824               	rgblight_decrease_sat:
 1825               	.LFB80:
 1826               		.cfi_startproc
 1827               	/* prologue: function */
 1828               	/* frame size = 0 */
 1829               	/* stack size = 0 */
 1830               	.L__stack_usage = 0
 1831 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1832               		.cfi_endproc
 1833               	.LFE80:
 1835               		.section	.text.rgblight_increase_sat,"ax",@progbits
 1836               		.weak	rgblight_increase_sat
 1838               	rgblight_increase_sat:
 1839               	.LFB82:
 1840               		.cfi_startproc
 1841               	/* prologue: function */
 1842               	/* frame size = 0 */
 1843               	/* stack size = 0 */
 1844               	.L__stack_usage = 0
 1845 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1846               		.cfi_endproc
 1847               	.LFE82:
 1849               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 1850               		.weak	rgblight_decrease_hue
 1852               	rgblight_decrease_hue:
 1853               	.LFB84:
 1854               		.cfi_startproc
 1855               	/* prologue: function */
 1856               	/* frame size = 0 */
 1857               	/* stack size = 0 */
 1858               	.L__stack_usage = 0
 1859 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1860               		.cfi_endproc
 1861               	.LFE84:
 1863               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1864               		.weak	rgblight_increase_hue
 1866               	rgblight_increase_hue:
 1867               	.LFB86:
 1868               		.cfi_startproc
 1869               	/* prologue: function */
 1870               	/* frame size = 0 */
 1871               	/* stack size = 0 */
 1872               	.L__stack_usage = 0
 1873 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1874               		.cfi_endproc
 1875               	.LFE86:
 1877               		.section	.text.rgblight_step_reverse,"ax",@progbits
 1878               		.weak	rgblight_step_reverse
 1880               	rgblight_step_reverse:
 1881               	.LFB88:
 1882               		.cfi_startproc
 1883               	/* prologue: function */
 1884               	/* frame size = 0 */
 1885               	/* stack size = 0 */
 1886               	.L__stack_usage = 0
 1887 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1888               		.cfi_endproc
 1889               	.LFE88:
 1891               		.section	.text.rgblight_step,"ax",@progbits
 1892               		.weak	rgblight_step
 1894               	rgblight_step:
 1895               	.LFB90:
 1896               		.cfi_startproc
 1897               	/* prologue: function */
 1898               	/* frame size = 0 */
 1899               	/* stack size = 0 */
 1900               	.L__stack_usage = 0
 1901 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1902               		.cfi_endproc
 1903               	.LFE90:
 1905               		.section	.text.rgblight_toggle,"ax",@progbits
 1906               		.weak	rgblight_toggle
 1908               	rgblight_toggle:
 1909               	.LFB92:
 1910               		.cfi_startproc
 1911               	/* prologue: function */
 1912               	/* frame size = 0 */
 1913               	/* stack size = 0 */
 1914               	.L__stack_usage = 0
 1915 0000 0C94 0000 		jmp shutdown_user.localalias.0
 1916               		.cfi_endproc
 1917               	.LFE92:
 1919               		.section	.text.reset_keyboard,"ax",@progbits
 1920               	.global	reset_keyboard
 1922               	reset_keyboard:
 1923               	.LFB37:
 139:quantum/quantum.c ****     clear_keyboard();
 1924               		.loc 1 139 0
 1925               		.cfi_startproc
 1926               	/* prologue: function */
 1927               	/* frame size = 0 */
 1928               	/* stack size = 0 */
 1929               	.L__stack_usage = 0
 140:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 1930               		.loc 1 140 0
 1931 0000 0E94 0000 		call clear_keyboard
 1932               	.LVL212:
 154:quantum/quantum.c ****     wait_ms(250);
 1933               		.loc 1 154 0
 1934 0004 0E94 0000 		call shutdown_user
 1935               	.LVL213:
 1936               	.LBB55:
 1937               	.LBB56:
 1938               		.loc 2 187 0
 1939 0008 2FEF      		ldi r18,lo8(799999)
 1940 000a 84E3      		ldi r24,hi8(799999)
 1941 000c 9CE0      		ldi r25,hlo8(799999)
 1942 000e 2150      	1:	subi r18,1
 1943 0010 8040      		sbci r24,0
 1944 0012 9040      		sbci r25,0
 1945 0014 01F4      		brne 1b
 1946 0016 00C0      		rjmp .
 1947 0018 0000      		nop
 1948               	.LVL214:
 1949               	.LBE56:
 1950               	.LBE55:
 164:quantum/quantum.c **** }
 1951               		.loc 1 164 0
 1952 001a 0C94 0000 		jmp bootloader_jump
 1953               	.LVL215:
 1954               		.cfi_endproc
 1955               	.LFE37:
 1957               		.section	.text.process_record_quantum,"ax",@progbits
 1958               	.global	process_record_quantum
 1960               	process_record_quantum:
 1961               	.LFB40:
 199:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 1962               		.loc 1 199 0
 1963               		.cfi_startproc
 1964               	.LVL216:
 1965 0000 0F93      		push r16
 1966               	.LCFI46:
 1967               		.cfi_def_cfa_offset 3
 1968               		.cfi_offset 16, -2
 1969 0002 1F93      		push r17
 1970               	.LCFI47:
 1971               		.cfi_def_cfa_offset 4
 1972               		.cfi_offset 17, -3
 1973 0004 CF93      		push r28
 1974               	.LCFI48:
 1975               		.cfi_def_cfa_offset 5
 1976               		.cfi_offset 28, -4
 1977 0006 DF93      		push r29
 1978               	.LCFI49:
 1979               		.cfi_def_cfa_offset 6
 1980               		.cfi_offset 29, -5
 1981               	/* prologue: function */
 1982               	/* frame size = 0 */
 1983               	/* stack size = 4 */
 1984               	.L__stack_usage = 4
 1985 0008 8C01      		movw r16,r24
 200:quantum/quantum.c **** 
 1986               		.loc 1 200 0
 1987 000a 0E94 0000 		call get_record_keycode
 1988               	.LVL217:
 1989 000e EC01      		movw r28,r24
 1990               	.LVL218:
 238:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1991               		.loc 1 238 0
 1992 0010 B801      		movw r22,r16
 1993 0012 0E94 0000 		call process_record_kb
 1994               	.LVL219:
 1995 0016 8823      		tst r24
 1996 0018 01F4      		brne .+2
 1997 001a 00C0      		rjmp .L156
 273:quantum/quantum.c **** #endif
 1998               		.loc 1 273 0 discriminator 2
 1999 001c B801      		movw r22,r16
 2000 001e CE01      		movw r24,r28
 2001 0020 0E94 0000 		call process_space_cadet
 2002               	.LVL220:
 238:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2003               		.loc 1 238 0 discriminator 2
 2004 0024 8823      		tst r24
 2005 0026 01F4      		brne .+2
 2006 0028 00C0      		rjmp .L156
 281:quantum/quantum.c ****         case RESET:
 2007               		.loc 1 281 0
 2008 002a C631      		cpi r28,22
 2009 002c FCE5      		ldi r31,92
 2010 002e DF07      		cpc r29,r31
 2011 0030 01F4      		brne .L247
 2012               	.LBB57:
 671:quantum/quantum.c **** 
 2013               		.loc 1 671 0
 2014 0032 0E94 0000 		call get_mods
 2015               	.LVL221:
 2016 0036 982F      		mov r25,r24
 2017               	.LVL222:
 703:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 2018               		.loc 1 703 0
 2019 0038 F801      		movw r30,r16
 2020 003a 8281      		ldd r24,Z+2
 2021               	.LVL223:
 2022 003c 2091 0000 		lds r18,keyboard_report
 2023 0040 3091 0000 		lds r19,keyboard_report+1
 2024 0044 8823      		tst r24
 2025 0046 01F0      		breq .L204
 671:quantum/quantum.c **** 
 2026               		.loc 1 671 0
 2027 0048 9A7A      		andi r25,lo8(-86)
 2028               	.LVL224:
 704:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2029               		.loc 1 704 0
 2030 004a 81E0      		ldi r24,lo8(1)
 2031 004c 01F4      		brne .L205
 2032 004e 80E0      		ldi r24,0
 2033               	.L205:
 2034 0050 8093 0000 		sts grave_esc_was_shifted,r24
 705:quantum/quantum.c ****             } else {
 2035               		.loc 1 705 0
 2036 0054 9111      		cpse r25,__zero_reg__
 2037 0056 00C0      		rjmp .L211
 2038 0058 69E2      		ldi r22,lo8(41)
 2039 005a 00C0      		rjmp .L206
 2040               	.L211:
 2041 005c 65E3      		ldi r22,lo8(53)
 2042               	.L206:
 2043               	.LVL225:
 2044               	.LBB58:
 2045               	.LBB59:
 2046               		.file 3 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
 2047               		.loc 3 32 0 discriminator 4
 2048 005e C901      		movw r24,r18
 2049 0060 0E94 0000 		call add_key_to_report
 2050               	.LVL226:
 2051 0064 00C0      		rjmp .L207
 2052               	.LVL227:
 2053               	.L204:
 2054               	.LBE59:
 2055               	.LBE58:
 707:quantum/quantum.c ****             }
 2056               		.loc 1 707 0
 2057 0066 8091 0000 		lds r24,grave_esc_was_shifted
 2058 006a 8111      		cpse r24,__zero_reg__
 2059 006c 00C0      		rjmp .L212
 2060 006e 69E2      		ldi r22,lo8(41)
 2061 0070 00C0      		rjmp .L208
 2062               	.L212:
 2063 0072 65E3      		ldi r22,lo8(53)
 2064               	.L208:
 2065               	.LVL228:
 2066               	.LBB60:
 2067               	.LBB61:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
 2068               		.loc 3 34 0 discriminator 4
 2069 0074 C901      		movw r24,r18
 2070 0076 0E94 0000 		call del_key_from_report
 2071               	.LVL229:
 2072               	.L207:
 2073               	.LBE61:
 2074               	.LBE60:
 710:quantum/quantum.c ****             return false;
 2075               		.loc 1 710 0
 2076 007a 0E94 0000 		call send_keyboard_report
 2077               	.LVL230:
 2078 007e 00C0      		rjmp .L156
 2079               	.L247:
 2080               	.LBE57:
 281:quantum/quantum.c ****         case RESET:
 2081               		.loc 1 281 0
 2082 0080 C731      		cpi r28,23
 2083 0082 8CE5      		ldi r24,92
 2084 0084 D807      		cpc r29,r24
 2085 0086 00F0      		brlo .+2
 2086 0088 00C0      		rjmp .L209
 2087 008a C130      		cpi r28,1
 2088 008c ECE5      		ldi r30,92
 2089 008e DE07      		cpc r29,r30
 2090 0090 01F4      		brne .L248
 288:quantum/quantum.c ****                 debug_enable ^= 1;
 2091               		.loc 1 288 0
 2092 0092 F801      		movw r30,r16
 2093 0094 8281      		ldd r24,Z+2
 2094 0096 8823      		tst r24
 2095 0098 01F4      		brne .+2
 2096 009a 00C0      		rjmp .L156
 289:quantum/quantum.c ****                 if (debug_enable) {
 2097               		.loc 1 289 0
 2098 009c 8091 0000 		lds r24,debug_config
 2099 00a0 C82F      		mov r28,r24
 2100               	.LVL231:
 2101 00a2 C095      		com r28
 2102 00a4 C170      		andi r28,lo8(1)
 2103 00a6 C0FB      		bst r28,0
 2104 00a8 80F9      		bld r24,0
 2105 00aa 8093 0000 		sts debug_config,r24
 290:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 2106               		.loc 1 290 0
 2107 00ae CC23      		tst r28
 2108 00b0 01F0      		breq .L159
 291:quantum/quantum.c ****                 } else {
 2109               		.loc 1 291 0
 2110 00b2 80E0      		ldi r24,lo8(__c.3501)
 2111 00b4 90E0      		ldi r25,hi8(__c.3501)
 2112 00b6 0E94 0000 		call xputs
 2113               	.LVL232:
 2114 00ba 00C0      		rjmp .L156
 2115               	.L159:
 293:quantum/quantum.c ****                 }
 2116               		.loc 1 293 0
 2117 00bc 80E0      		ldi r24,lo8(__c.3503)
 2118 00be 90E0      		ldi r25,hi8(__c.3503)
 2119 00c0 0E94 0000 		call xputs
 2120               	.LVL233:
 2121 00c4 00C0      		rjmp .L234
 2122               	.LVL234:
 2123               	.L248:
 281:quantum/quantum.c ****         case RESET:
 2124               		.loc 1 281 0
 2125 00c6 C230      		cpi r28,2
 2126 00c8 FCE5      		ldi r31,92
 2127 00ca DF07      		cpc r29,r31
 2128 00cc 00F4      		brsh .+2
 2129 00ce 00C0      		rjmp .L249
 2130               	.L163:
 534:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 2131               		.loc 1 534 0
 2132 00d0 F801      		movw r30,r16
 2133 00d2 8281      		ldd r24,Z+2
 2134 00d4 8823      		tst r24
 2135 00d6 01F4      		brne .+2
 2136 00d8 00C0      		rjmp .L164
 536:quantum/quantum.c ****                     eeconfig_init();
 2137               		.loc 1 536 0
 2138 00da 0E94 0000 		call eeconfig_is_enabled
 2139               	.LVL235:
 2140 00de 8111      		cpse r24,__zero_reg__
 2141 00e0 00C0      		rjmp .L165
 537:quantum/quantum.c ****                 }
 2142               		.loc 1 537 0
 2143 00e2 0E94 0000 		call eeconfig_init
 2144               	.LVL236:
 2145               	.L165:
 540:quantum/quantum.c ****                 switch (keycode) {
 2146               		.loc 1 540 0
 2147 00e6 0E94 0000 		call eeconfig_read_keymap
 2148               	.LVL237:
 2149 00ea 9093 0000 		sts keymap_config+1,r25
 2150 00ee 8093 0000 		sts keymap_config,r24
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2151               		.loc 1 541 0
 2152 00f2 C031      		cpi r28,16
 2153 00f4 FCE5      		ldi r31,92
 2154 00f6 DF07      		cpc r29,r31
 2155 00f8 01F4      		brne .+2
 2156 00fa 00C0      		rjmp .L167
 2157 00fc 00F0      		brlo .+2
 2158 00fe 00C0      		rjmp .L168
 2159 0100 C830      		cpi r28,8
 2160 0102 ECE5      		ldi r30,92
 2161 0104 DE07      		cpc r29,r30
 2162 0106 01F4      		brne .+2
 2163 0108 00C0      		rjmp .L169
 2164 010a 00F4      		brsh .L170
 2165 010c C430      		cpi r28,4
 2166 010e 8CE5      		ldi r24,92
 2167 0110 D807      		cpc r29,r24
 2168 0112 01F4      		brne .+2
 2169 0114 00C0      		rjmp .L171
 2170 0116 00F4      		brsh .L172
 2171 0118 C230      		cpi r28,2
 2172 011a FCE5      		ldi r31,92
 2173 011c DF07      		cpc r29,r31
 2174 011e 01F4      		brne .+2
 2175 0120 00C0      		rjmp .L173
 2176 0122 C330      		cpi r28,3
 2177 0124 DC45      		sbci r29,92
 2178 0126 01F0      		breq .+2
 2179 0128 00C0      		rjmp .L166
 546:quantum/quantum.c ****                         break;
 2180               		.loc 1 546 0
 2181 012a 8091 0000 		lds r24,keymap_config
 2182 012e 8260      		ori r24,lo8(1<<1)
 2183 0130 00C0      		rjmp .L239
 2184               	.L172:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2185               		.loc 1 541 0
 2186 0132 C630      		cpi r28,6
 2187 0134 ECE5      		ldi r30,92
 2188 0136 DE07      		cpc r29,r30
 2189 0138 01F4      		brne .+2
 2190 013a 00C0      		rjmp .L175
 2191 013c 00F0      		brlo .+2
 2192 013e 00C0      		rjmp .L250
 552:quantum/quantum.c ****                         break;
 2193               		.loc 1 552 0
 2194 0140 8091 0000 		lds r24,keymap_config
 2195 0144 8860      		ori r24,lo8(1<<3)
 2196 0146 00C0      		rjmp .L239
 2197               	.L170:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2198               		.loc 1 541 0
 2199 0148 CC30      		cpi r28,12
 2200 014a 8CE5      		ldi r24,92
 2201 014c D807      		cpc r29,r24
 2202 014e 01F4      		brne .+2
 2203 0150 00C0      		rjmp .L178
 2204 0152 00F4      		brsh .L179
 2205 0154 CA30      		cpi r28,10
 2206 0156 FCE5      		ldi r31,92
 2207 0158 DF07      		cpc r29,r31
 2208 015a 01F4      		brne .+2
 2209 015c 00C0      		rjmp .L180
 2210 015e 00F0      		brlo .+2
 2211 0160 00C0      		rjmp .L251
 570:quantum/quantum.c ****                         keymap_config.nkro = true;
 2212               		.loc 1 570 0
 2213 0162 0E94 0000 		call clear_keyboard
 2214               	.LVL238:
 571:quantum/quantum.c ****                         break;
 2215               		.loc 1 571 0
 2216 0166 8091 0000 		lds r24,keymap_config
 2217 016a 8068      		ori r24,lo8(1<<7)
 2218 016c 00C0      		rjmp .L239
 2219               	.L179:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2220               		.loc 1 541 0
 2221 016e CE30      		cpi r28,14
 2222 0170 ECE5      		ldi r30,92
 2223 0172 DE07      		cpc r29,r30
 2224 0174 01F4      		brne .+2
 2225 0176 00C0      		rjmp .L183
 2226 0178 00F0      		brlo .+2
 2227 017a 00C0      		rjmp .L252
 592:quantum/quantum.c ****                         break;
 2228               		.loc 1 592 0
 2229 017c 8091 0000 		lds r24,keymap_config
 2230 0180 00C0      		rjmp .L243
 2231               	.L168:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2232               		.loc 1 541 0
 2233 0182 CB3F      		cpi r28,-5
 2234 0184 8CE5      		ldi r24,92
 2235 0186 D807      		cpc r29,r24
 2236 0188 01F4      		brne .+2
 2237 018a 00C0      		rjmp .L186
 2238 018c 00F4      		brsh .L187
 2239 018e C331      		cpi r28,19
 2240 0190 FCE5      		ldi r31,92
 2241 0192 DF07      		cpc r29,r31
 2242 0194 01F4      		brne .+2
 2243 0196 00C0      		rjmp .L188
 2244 0198 00F4      		brsh .L189
 2245 019a C131      		cpi r28,17
 2246 019c ECE5      		ldi r30,92
 2247 019e DE07      		cpc r29,r30
 2248 01a0 01F4      		brne .+2
 2249 01a2 00C0      		rjmp .L190
 2250 01a4 C231      		cpi r28,18
 2251 01a6 DC45      		sbci r29,92
 2252 01a8 01F0      		breq .+2
 2253 01aa 00C0      		rjmp .L166
 613:quantum/quantum.c ****                         keymap_config.nkro = false;
 2254               		.loc 1 613 0
 2255 01ac 0E94 0000 		call clear_keyboard
 2256               	.LVL239:
 614:quantum/quantum.c ****                         break;
 2257               		.loc 1 614 0
 2258 01b0 8091 0000 		lds r24,keymap_config
 2259 01b4 8F77      		andi r24,lo8(~(1<<7))
 2260 01b6 00C0      		rjmp .L239
 2261               	.L189:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2262               		.loc 1 541 0
 2263 01b8 C531      		cpi r28,21
 2264 01ba 8CE5      		ldi r24,92
 2265 01bc D807      		cpc r29,r24
 2266 01be 01F4      		brne .+2
 2267 01c0 00C0      		rjmp .L192
 2268 01c2 00F4      		brsh .+2
 2269 01c4 00C0      		rjmp .L193
 2270 01c6 CA3F      		cpi r28,-6
 2271 01c8 DC45      		sbci r29,92
 2272 01ca 01F0      		breq .+2
 2273 01cc 00C0      		rjmp .L166
 555:quantum/quantum.c ****                         break;
 2274               		.loc 1 555 0
 2275 01ce 8091 0000 		lds r24,keymap_config+1
 2276 01d2 00C0      		rjmp .L244
 2277               	.L187:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2278               		.loc 1 541 0
 2279 01d4 CF3F      		cpi r28,-1
 2280 01d6 8CE5      		ldi r24,92
 2281 01d8 D807      		cpc r29,r24
 2282 01da 01F4      		brne .+2
 2283 01dc 00C0      		rjmp .L195
 2284 01de 00F4      		brsh .L196
 2285 01e0 CD3F      		cpi r28,-3
 2286 01e2 FCE5      		ldi r31,92
 2287 01e4 DF07      		cpc r29,r31
 2288 01e6 01F4      		brne .+2
 2289 01e8 00C0      		rjmp .L197
 2290 01ea 00F4      		brsh .+2
 2291 01ec 00C0      		rjmp .L238
 580:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2292               		.loc 1 580 0
 2293 01ee 8091 0000 		lds r24,keymap_config+1
 2294 01f2 8260      		ori r24,lo8(2)
 2295 01f4 00C0      		rjmp .L244
 2296               	.L196:
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2297               		.loc 1 541 0
 2298 01f6 C130      		cpi r28,1
 2299 01f8 EDE5      		ldi r30,93
 2300 01fa DE07      		cpc r29,r30
 2301 01fc 01F4      		brne .+2
 2302 01fe 00C0      		rjmp .L200
 2303 0200 00F4      		brsh .+2
 2304 0202 00C0      		rjmp .L201
 2305 0204 C230      		cpi r28,2
 2306 0206 DD45      		sbci r29,93
 2307 0208 01F0      		breq .+2
 2308 020a 00C0      		rjmp .L166
 658:quantum/quantum.c ****                         break;
 2309               		.loc 1 658 0
 2310 020c 80E0      		ldi r24,0
 2311 020e 00C0      		rjmp .L240
 2312               	.L173:
 543:quantum/quantum.c ****                         break;
 2313               		.loc 1 543 0
 2314 0210 8091 0000 		lds r24,keymap_config
 2315 0214 8160      		ori r24,lo8(1<<0)
 2316 0216 00C0      		rjmp .L239
 2317               	.L175:
 561:quantum/quantum.c ****                         break;
 2318               		.loc 1 561 0
 2319 0218 8091 0000 		lds r24,keymap_config
 2320 021c 8061      		ori r24,lo8(1<<4)
 2321               	.L239:
 546:quantum/quantum.c ****                         break;
 2322               		.loc 1 546 0
 2323 021e 8093 0000 		sts keymap_config,r24
 547:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 2324               		.loc 1 547 0
 2325 0222 00C0      		rjmp .L166
 2326               	.L171:
 549:quantum/quantum.c ****                         break;
 2327               		.loc 1 549 0
 2328 0224 8091 0000 		lds r24,keymap_config
 2329 0228 00C0      		rjmp .L242
 2330               	.L186:
 558:quantum/quantum.c ****                         break;
 2331               		.loc 1 558 0
 2332 022a 8091 0000 		lds r24,keymap_config+1
 2333 022e 8260      		ori r24,lo8(1<<1)
 2334               	.L241:
 2335 0230 8093 0000 		sts keymap_config+1,r24
 559:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 2336               		.loc 1 559 0
 2337 0234 00C0      		rjmp .L166
 2338               	.L250:
 564:quantum/quantum.c ****                         break;
 2339               		.loc 1 564 0
 2340 0236 8091 0000 		lds r24,keymap_config
 2341 023a 8062      		ori r24,lo8(1<<5)
 2342 023c 00C0      		rjmp .L239
 2343               	.L169:
 567:quantum/quantum.c ****                         break;
 2344               		.loc 1 567 0
 2345 023e 8091 0000 		lds r24,keymap_config
 2346 0242 8064      		ori r24,lo8(1<<6)
 2347 0244 00C0      		rjmp .L239
 2348               	.L180:
 574:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2349               		.loc 1 574 0
 2350 0246 8091 0000 		lds r24,keymap_config
 2351 024a 8860      		ori r24,lo8(8)
 2352               	.L242:
 2353 024c 8460      		ori r24,lo8(1<<2)
 2354 024e 00C0      		rjmp .L239
 2355               	.L244:
 580:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2356               		.loc 1 580 0
 2357 0250 8160      		ori r24,lo8(1<<0)
 2358 0252 00C0      		rjmp .L241
 2359               	.L251:
 586:quantum/quantum.c ****                         break;
 2360               		.loc 1 586 0
 2361 0254 8091 0000 		lds r24,keymap_config
 2362 0258 8E7F      		andi r24,lo8(~(1<<0))
 2363 025a 00C0      		rjmp .L239
 2364               	.L178:
 589:quantum/quantum.c ****                         break;
 2365               		.loc 1 589 0
 2366 025c 8091 0000 		lds r24,keymap_config
 2367 0260 8D7F      		andi r24,lo8(~(1<<1))
 2368 0262 00C0      		rjmp .L239
 2369               	.L183:
 595:quantum/quantum.c ****                         break;
 2370               		.loc 1 595 0
 2371 0264 8091 0000 		lds r24,keymap_config
 2372 0268 877F      		andi r24,lo8(~(1<<3))
 2373 026a 00C0      		rjmp .L239
 2374               	.L238:
 598:quantum/quantum.c ****                         break;
 2375               		.loc 1 598 0
 2376 026c 8091 0000 		lds r24,keymap_config+1
 2377 0270 00C0      		rjmp .L245
 2378               	.L197:
 601:quantum/quantum.c ****                         break;
 2379               		.loc 1 601 0
 2380 0272 8091 0000 		lds r24,keymap_config+1
 2381 0276 8D7F      		andi r24,lo8(~(1<<1))
 2382 0278 00C0      		rjmp .L241
 2383               	.L252:
 604:quantum/quantum.c ****                         break;
 2384               		.loc 1 604 0
 2385 027a 8091 0000 		lds r24,keymap_config
 2386 027e 8F7E      		andi r24,lo8(~(1<<4))
 2387 0280 00C0      		rjmp .L239
 2388               	.L167:
 607:quantum/quantum.c ****                         break;
 2389               		.loc 1 607 0
 2390 0282 8091 0000 		lds r24,keymap_config
 2391 0286 8F7D      		andi r24,lo8(~(1<<5))
 2392 0288 00C0      		rjmp .L239
 2393               	.L190:
 610:quantum/quantum.c ****                         break;
 2394               		.loc 1 610 0
 2395 028a 8091 0000 		lds r24,keymap_config
 2396 028e 8F7B      		andi r24,lo8(~(1<<6))
 2397 0290 00C0      		rjmp .L239
 2398               	.L188:
 617:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2399               		.loc 1 617 0
 2400 0292 8091 0000 		lds r24,keymap_config
 2401 0296 877F      		andi r24,lo8(-9)
 2402               	.L243:
 2403 0298 8B7F      		andi r24,lo8(~(1<<2))
 2404 029a 00C0      		rjmp .L239
 2405               	.L195:
 623:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2406               		.loc 1 623 0
 2407 029c 8091 0000 		lds r24,keymap_config+1
 2408 02a0 8D7F      		andi r24,lo8(-3)
 2409               	.L245:
 2410 02a2 8E7F      		andi r24,lo8(~(1<<0))
 2411 02a4 00C0      		rjmp .L241
 2412               	.L192:
 629:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2413               		.loc 1 629 0
 2414 02a6 8091 0000 		lds r24,keymap_config
 2415 02aa 82FB      		bst r24,2
 2416 02ac 2227      		clr r18
 2417 02ae 20F9      		bld r18,0
 2418 02b0 91E0      		ldi r25,lo8(1)
 2419 02b2 9227      		eor r25,r18
 2420 02b4 90FB      		bst r25,0
 2421 02b6 82F9      		bld r24,2
 630:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2422               		.loc 1 630 0
 2423 02b8 90FB      		bst r25,0
 2424 02ba 83F9      		bld r24,3
 2425 02bc 00C0      		rjmp .L239
 2426               	.L201:
 640:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2427               		.loc 1 640 0
 2428 02be 8091 0000 		lds r24,keymap_config+1
 2429 02c2 982F      		mov r25,r24
 2430 02c4 9095      		com r25
 2431 02c6 9170      		andi r25,lo8(1)
 2432 02c8 8E7F      		andi r24,lo8(-2)
 641:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2433               		.loc 1 641 0
 2434 02ca 892B      		or r24,r25
 2435 02cc 90FB      		bst r25,0
 2436 02ce 81F9      		bld r24,1
 2437 02d0 00C0      		rjmp .L241
 2438               	.L193:
 651:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 2439               		.loc 1 651 0
 2440 02d2 0E94 0000 		call clear_keyboard
 2441               	.LVL240:
 652:quantum/quantum.c ****                         break;
 2442               		.loc 1 652 0
 2443 02d6 8091 0000 		lds r24,keymap_config
 2444 02da 87FB      		bst r24,7
 2445 02dc 2227      		clr r18
 2446 02de 20F9      		bld r18,0
 2447 02e0 91E0      		ldi r25,lo8(1)
 2448 02e2 9227      		eor r25,r18
 2449 02e4 90FB      		bst r25,0
 2450 02e6 87F9      		bld r24,7
 2451 02e8 00C0      		rjmp .L239
 2452               	.L200:
 655:quantum/quantum.c ****                         break;
 2453               		.loc 1 655 0
 2454 02ea 81E0      		ldi r24,lo8(1)
 2455               	.L240:
 658:quantum/quantum.c ****                         break;
 2456               		.loc 1 658 0
 2457 02ec 0E94 0000 		call eeconfig_update_handedness
 2458               	.LVL241:
 2459               	.L166:
 663:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 2460               		.loc 1 663 0
 2461 02f0 8091 0000 		lds r24,keymap_config
 2462 02f4 9091 0000 		lds r25,keymap_config+1
 2463 02f8 0E94 0000 		call eeconfig_update_keymap
 2464               	.LVL242:
 664:quantum/quantum.c **** 
 2465               		.loc 1 664 0
 2466 02fc 0E94 0000 		call clear_keyboard
 2467               	.LVL243:
 2468 0300 00C0      		rjmp .L156
 2469               	.L249:
 281:quantum/quantum.c ****         case RESET:
 2470               		.loc 1 281 0
 2471 0302 C115      		cp r28,__zero_reg__
 2472 0304 DC45      		sbci r29,92
 2473 0306 01F0      		breq .L155
 2474               	.L164:
 724:quantum/quantum.c **** }
 2475               		.loc 1 724 0
 2476 0308 C801      		movw r24,r16
 2477               	/* epilogue start */
 725:quantum/quantum.c **** 
 2478               		.loc 1 725 0
 2479 030a DF91      		pop r29
 2480 030c CF91      		pop r28
 2481               	.LVL244:
 2482 030e 1F91      		pop r17
 2483 0310 0F91      		pop r16
 2484               	.LVL245:
 724:quantum/quantum.c **** }
 2485               		.loc 1 724 0
 2486 0312 0C94 0000 		jmp process_action_kb
 2487               	.LVL246:
 2488               	.L155:
 283:quantum/quantum.c ****                 reset_keyboard();
 2489               		.loc 1 283 0
 2490 0316 F801      		movw r30,r16
 2491 0318 8281      		ldd r24,Z+2
 2492 031a 8823      		tst r24
 2493 031c 01F0      		breq .L156
 284:quantum/quantum.c ****             }
 2494               		.loc 1 284 0
 2495 031e 0E94 0000 		call reset_keyboard
 2496               	.LVL247:
 2497 0322 00C0      		rjmp .L156
 2498               	.L209:
 281:quantum/quantum.c ****         case RESET:
 2499               		.loc 1 281 0
 2500 0324 CE3D      		cpi r28,-34
 2501 0326 ECE5      		ldi r30,92
 2502 0328 DE07      		cpc r29,r30
 2503 032a 01F4      		brne .L253
 298:quantum/quantum.c ****                 eeconfig_init();
 2504               		.loc 1 298 0
 2505 032c F801      		movw r30,r16
 2506 032e 8281      		ldd r24,Z+2
 2507 0330 8823      		tst r24
 2508 0332 01F0      		breq .L156
 299:quantum/quantum.c ****             }
 2509               		.loc 1 299 0
 2510 0334 0E94 0000 		call eeconfig_init
 2511               	.LVL248:
 2512 0338 00C0      		rjmp .L156
 2513               	.L253:
 281:quantum/quantum.c ****         case RESET:
 2514               		.loc 1 281 0
 2515 033a CF3D      		cpi r28,-33
 2516 033c FCE5      		ldi r31,92
 2517 033e DF07      		cpc r29,r31
 2518 0340 00F4      		brsh .L210
 2519 0342 CC3D      		cpi r28,-36
 2520 0344 8CE5      		ldi r24,92
 2521 0346 D807      		cpc r29,r24
 2522 0348 01F4      		brne .L254
 515:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 2523               		.loc 1 515 0
 2524 034a F801      		movw r30,r16
 2525 034c 8281      		ldd r24,Z+2
 2526 034e 8823      		tst r24
 2527 0350 01F0      		breq .L156
 516:quantum/quantum.c ****             }
 2528               		.loc 1 516 0
 2529 0352 80E0      		ldi r24,0
 2530 0354 00C0      		rjmp .L246
 2531               	.L254:
 281:quantum/quantum.c ****         case RESET:
 2532               		.loc 1 281 0
 2533 0356 CD3D      		cpi r28,-35
 2534 0358 DC45      		sbci r29,92
 2535 035a 01F4      		brne .L164
 520:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 2536               		.loc 1 520 0
 2537 035c F801      		movw r30,r16
 2538 035e 8281      		ldd r24,Z+2
 2539 0360 8823      		tst r24
 2540 0362 01F0      		breq .L156
 521:quantum/quantum.c ****             }
 2541               		.loc 1 521 0
 2542 0364 82E0      		ldi r24,lo8(2)
 2543               	.L246:
 2544 0366 0E94 0000 		call set_output
 2545               	.LVL249:
 2546 036a 00C0      		rjmp .L156
 2547               	.L210:
 281:quantum/quantum.c ****         case RESET:
 2548               		.loc 1 281 0
 2549 036c CE01      		movw r24,r28
 2550 036e 8A5F      		subi r24,-6
 2551 0370 9C45      		sbci r25,92
 2552 0372 0997      		sbiw r24,9
 2553 0374 00F4      		brsh .+2
 2554 0376 00C0      		rjmp .L163
 2555 0378 00C0      		rjmp .L164
 2556               	.LVL250:
 2557               	.L156:
 276:quantum/quantum.c ****     }
 2558               		.loc 1 276 0
 2559 037a C0E0      		ldi r28,0
 2560               	.L234:
 725:quantum/quantum.c **** 
 2561               		.loc 1 725 0
 2562 037c 8C2F      		mov r24,r28
 2563               	/* epilogue start */
 2564 037e DF91      		pop r29
 2565 0380 CF91      		pop r28
 2566 0382 1F91      		pop r17
 2567 0384 0F91      		pop r16
 2568               	.LVL251:
 2569 0386 0895      		ret
 2570               		.cfi_endproc
 2571               	.LFE40:
 2573               		.section	.progmem.data.__c.3503,"a",@progbits
 2576               	__c.3503:
 2577 0000 4445 4255 		.string	"DEBUG: disabled.\n"
 2577      473A 2064 
 2577      6973 6162 
 2577      6C65 642E 
 2577      0A00 
 2578               		.section	.progmem.data.__c.3501,"a",@progbits
 2581               	__c.3501:
 2582 0000 4445 4255 		.string	"DEBUG: enabled.\n"
 2582      473A 2065 
 2582      6E61 626C 
 2582      6564 2E0A 
 2582      00
 2583               		.weak	ascii_to_keycode_lut
 2584               		.section	.progmem.data.ascii_to_keycode_lut,"a",@progbits
 2587               	ascii_to_keycode_lut:
 2588 0000 00        		.byte	0
 2589 0001 00        		.byte	0
 2590 0002 00        		.byte	0
 2591 0003 00        		.byte	0
 2592 0004 00        		.byte	0
 2593 0005 00        		.byte	0
 2594 0006 00        		.byte	0
 2595 0007 00        		.byte	0
 2596 0008 2A        		.byte	42
 2597 0009 2B        		.byte	43
 2598 000a 28        		.byte	40
 2599 000b 00        		.byte	0
 2600 000c 00        		.byte	0
 2601 000d 00        		.byte	0
 2602 000e 00        		.byte	0
 2603 000f 00        		.byte	0
 2604 0010 00        		.byte	0
 2605 0011 00        		.byte	0
 2606 0012 00        		.byte	0
 2607 0013 00        		.byte	0
 2608 0014 00        		.byte	0
 2609 0015 00        		.byte	0
 2610 0016 00        		.byte	0
 2611 0017 00        		.byte	0
 2612 0018 00        		.byte	0
 2613 0019 00        		.byte	0
 2614 001a 00        		.byte	0
 2615 001b 29        		.byte	41
 2616 001c 00        		.byte	0
 2617 001d 00        		.byte	0
 2618 001e 00        		.byte	0
 2619 001f 00        		.byte	0
 2620 0020 2C        		.byte	44
 2621 0021 1E        		.byte	30
 2622 0022 34        		.byte	52
 2623 0023 20        		.byte	32
 2624 0024 21        		.byte	33
 2625 0025 22        		.byte	34
 2626 0026 24        		.byte	36
 2627 0027 34        		.byte	52
 2628 0028 26        		.byte	38
 2629 0029 27        		.byte	39
 2630 002a 25        		.byte	37
 2631 002b 2E        		.byte	46
 2632 002c 36        		.byte	54
 2633 002d 2D        		.byte	45
 2634 002e 37        		.byte	55
 2635 002f 38        		.byte	56
 2636 0030 27        		.byte	39
 2637 0031 1E        		.byte	30
 2638 0032 1F        		.byte	31
 2639 0033 20        		.byte	32
 2640 0034 21        		.byte	33
 2641 0035 22        		.byte	34
 2642 0036 23        		.byte	35
 2643 0037 24        		.byte	36
 2644 0038 25        		.byte	37
 2645 0039 26        		.byte	38
 2646 003a 33        		.byte	51
 2647 003b 33        		.byte	51
 2648 003c 36        		.byte	54
 2649 003d 2E        		.byte	46
 2650 003e 37        		.byte	55
 2651 003f 38        		.byte	56
 2652 0040 1F        		.byte	31
 2653 0041 04        		.byte	4
 2654 0042 05        		.byte	5
 2655 0043 06        		.byte	6
 2656 0044 07        		.byte	7
 2657 0045 08        		.byte	8
 2658 0046 09        		.byte	9
 2659 0047 0A        		.byte	10
 2660 0048 0B        		.byte	11
 2661 0049 0C        		.byte	12
 2662 004a 0D        		.byte	13
 2663 004b 0E        		.byte	14
 2664 004c 0F        		.byte	15
 2665 004d 10        		.byte	16
 2666 004e 11        		.byte	17
 2667 004f 12        		.byte	18
 2668 0050 13        		.byte	19
 2669 0051 14        		.byte	20
 2670 0052 15        		.byte	21
 2671 0053 16        		.byte	22
 2672 0054 17        		.byte	23
 2673 0055 18        		.byte	24
 2674 0056 19        		.byte	25
 2675 0057 1A        		.byte	26
 2676 0058 1B        		.byte	27
 2677 0059 1C        		.byte	28
 2678 005a 1D        		.byte	29
 2679 005b 2F        		.byte	47
 2680 005c 31        		.byte	49
 2681 005d 30        		.byte	48
 2682 005e 23        		.byte	35
 2683 005f 2D        		.byte	45
 2684 0060 35        		.byte	53
 2685 0061 04        		.byte	4
 2686 0062 05        		.byte	5
 2687 0063 06        		.byte	6
 2688 0064 07        		.byte	7
 2689 0065 08        		.byte	8
 2690 0066 09        		.byte	9
 2691 0067 0A        		.byte	10
 2692 0068 0B        		.byte	11
 2693 0069 0C        		.byte	12
 2694 006a 0D        		.byte	13
 2695 006b 0E        		.byte	14
 2696 006c 0F        		.byte	15
 2697 006d 10        		.byte	16
 2698 006e 11        		.byte	17
 2699 006f 12        		.byte	18
 2700 0070 13        		.byte	19
 2701 0071 14        		.byte	20
 2702 0072 15        		.byte	21
 2703 0073 16        		.byte	22
 2704 0074 17        		.byte	23
 2705 0075 18        		.byte	24
 2706 0076 19        		.byte	25
 2707 0077 1A        		.byte	26
 2708 0078 1B        		.byte	27
 2709 0079 1C        		.byte	28
 2710 007a 1D        		.byte	29
 2711 007b 2F        		.byte	47
 2712 007c 31        		.byte	49
 2713 007d 30        		.byte	48
 2714 007e 35        		.byte	53
 2715 007f 4C        		.byte	76
 2716               		.weak	ascii_to_altgr_lut
 2717               		.section	.progmem.data.ascii_to_altgr_lut,"a",@progbits
 2720               	ascii_to_altgr_lut:
 2721 0000 0000 0000 		.zero	128
 2721      0000 0000 
 2721      0000 0000 
 2721      0000 0000 
 2721      0000 0000 
 2722               		.weak	ascii_to_shift_lut
 2723               		.section	.progmem.data.ascii_to_shift_lut,"a",@progbits
 2726               	ascii_to_shift_lut:
 2727 0000 00        		.byte	0
 2728 0001 00        		.byte	0
 2729 0002 00        		.byte	0
 2730 0003 00        		.byte	0
 2731 0004 00        		.byte	0
 2732 0005 00        		.byte	0
 2733 0006 00        		.byte	0
 2734 0007 00        		.byte	0
 2735 0008 00        		.byte	0
 2736 0009 00        		.byte	0
 2737 000a 00        		.byte	0
 2738 000b 00        		.byte	0
 2739 000c 00        		.byte	0
 2740 000d 00        		.byte	0
 2741 000e 00        		.byte	0
 2742 000f 00        		.byte	0
 2743 0010 00        		.byte	0
 2744 0011 00        		.byte	0
 2745 0012 00        		.byte	0
 2746 0013 00        		.byte	0
 2747 0014 00        		.byte	0
 2748 0015 00        		.byte	0
 2749 0016 00        		.byte	0
 2750 0017 00        		.byte	0
 2751 0018 00        		.byte	0
 2752 0019 00        		.byte	0
 2753 001a 00        		.byte	0
 2754 001b 00        		.byte	0
 2755 001c 00        		.byte	0
 2756 001d 00        		.byte	0
 2757 001e 00        		.byte	0
 2758 001f 00        		.byte	0
 2759 0020 00        		.byte	0
 2760 0021 01        		.byte	1
 2761 0022 01        		.byte	1
 2762 0023 01        		.byte	1
 2763 0024 01        		.byte	1
 2764 0025 01        		.byte	1
 2765 0026 01        		.byte	1
 2766 0027 00        		.byte	0
 2767 0028 01        		.byte	1
 2768 0029 01        		.byte	1
 2769 002a 01        		.byte	1
 2770 002b 01        		.byte	1
 2771 002c 00        		.byte	0
 2772 002d 00        		.byte	0
 2773 002e 00        		.byte	0
 2774 002f 00        		.byte	0
 2775 0030 00        		.byte	0
 2776 0031 00        		.byte	0
 2777 0032 00        		.byte	0
 2778 0033 00        		.byte	0
 2779 0034 00        		.byte	0
 2780 0035 00        		.byte	0
 2781 0036 00        		.byte	0
 2782 0037 00        		.byte	0
 2783 0038 00        		.byte	0
 2784 0039 00        		.byte	0
 2785 003a 01        		.byte	1
 2786 003b 00        		.byte	0
 2787 003c 01        		.byte	1
 2788 003d 00        		.byte	0
 2789 003e 01        		.byte	1
 2790 003f 01        		.byte	1
 2791 0040 01        		.byte	1
 2792 0041 01        		.byte	1
 2793 0042 01        		.byte	1
 2794 0043 01        		.byte	1
 2795 0044 01        		.byte	1
 2796 0045 01        		.byte	1
 2797 0046 01        		.byte	1
 2798 0047 01        		.byte	1
 2799 0048 01        		.byte	1
 2800 0049 01        		.byte	1
 2801 004a 01        		.byte	1
 2802 004b 01        		.byte	1
 2803 004c 01        		.byte	1
 2804 004d 01        		.byte	1
 2805 004e 01        		.byte	1
 2806 004f 01        		.byte	1
 2807 0050 01        		.byte	1
 2808 0051 01        		.byte	1
 2809 0052 01        		.byte	1
 2810 0053 01        		.byte	1
 2811 0054 01        		.byte	1
 2812 0055 01        		.byte	1
 2813 0056 01        		.byte	1
 2814 0057 01        		.byte	1
 2815 0058 01        		.byte	1
 2816 0059 01        		.byte	1
 2817 005a 01        		.byte	1
 2818 005b 00        		.byte	0
 2819 005c 00        		.byte	0
 2820 005d 00        		.byte	0
 2821 005e 01        		.byte	1
 2822 005f 01        		.byte	1
 2823 0060 00        		.byte	0
 2824 0061 00        		.byte	0
 2825 0062 00        		.byte	0
 2826 0063 00        		.byte	0
 2827 0064 00        		.byte	0
 2828 0065 00        		.byte	0
 2829 0066 00        		.byte	0
 2830 0067 00        		.byte	0
 2831 0068 00        		.byte	0
 2832 0069 00        		.byte	0
 2833 006a 00        		.byte	0
 2834 006b 00        		.byte	0
 2835 006c 00        		.byte	0
 2836 006d 00        		.byte	0
 2837 006e 00        		.byte	0
 2838 006f 00        		.byte	0
 2839 0070 00        		.byte	0
 2840 0071 00        		.byte	0
 2841 0072 00        		.byte	0
 2842 0073 00        		.byte	0
 2843 0074 00        		.byte	0
 2844 0075 00        		.byte	0
 2845 0076 00        		.byte	0
 2846 0077 00        		.byte	0
 2847 0078 00        		.byte	0
 2848 0079 00        		.byte	0
 2849 007a 00        		.byte	0
 2850 007b 01        		.byte	1
 2851 007c 01        		.byte	1
 2852 007d 01        		.byte	1
 2853 007e 01        		.byte	1
 2854 007f 00        		.byte	0
 2855               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2858               	grave_esc_was_shifted:
 2859 0000 00        		.zero	1
 2860               		.text
 2861               	.Letext0:
 2862               		.file 4 "/usr/lib/avr/include/stdint.h"
 2863               		.file 5 "tmk_core/common/keyboard.h"
 2864               		.file 6 "tmk_core/common/action.h"
 2865               		.file 7 "tmk_core/common/report.h"
 2866               		.file 8 "tmk_core/common/led.h"
 2867               		.file 9 "tmk_core/common/debug.h"
 2868               		.file 10 "quantum/keycode_config.h"
 2869               		.file 11 "tmk_core/common/keycode.h"
 2870               		.file 12 "quantum/quantum_keycodes.h"
 2871               		.file 13 "tmk_core/common/action_layer.h"
 2872               		.file 14 "tmk_core/protocol/lufa/outputselect.h"
 2873               		.file 15 "quantum/quantum.h"
 2874               		.file 16 "quantum/keymap.h"
 2875               		.file 17 "tmk_core/common/eeconfig.h"
 2876               		.file 18 "/usr/lib/avr/include/stdlib.h"
 2877               		.file 19 "tmk_core/common/matrix.h"
 2878               		.file 20 "tmk_core/common/bootloader.h"
 2879               		.file 21 "quantum/process_keycode/process_space_cadet.h"
 2880               		.file 22 "tmk_core/common/avr/xprintf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccnN7Lx0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnN7Lx0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnN7Lx0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnN7Lx0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnN7Lx0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnN7Lx0.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccnN7Lx0.s:114    .text.register_code16:0000000000000000 register_code16
     /tmp/ccnN7Lx0.s:170    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccnN7Lx0.s:225    .text.tap_code16:0000000000000000 tap_code16
     /tmp/ccnN7Lx0.s:262    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccnN7Lx0.s:281    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccnN7Lx0.s:300    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccnN7Lx0.s:318    .text.get_event_keycode:0000000000000000 get_event_keycode
     /tmp/ccnN7Lx0.s:413    .text.get_record_keycode:0000000000000000 get_record_keycode
     /tmp/ccnN7Lx0.s:438    .text.send_char:0000000000000000 send_char
     /tmp/ccnN7Lx0.s:2587   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
     /tmp/ccnN7Lx0.s:2726   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
     /tmp/ccnN7Lx0.s:2720   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
     /tmp/ccnN7Lx0.s:566    .text.send_string_with_delay:0000000000000000 send_string_with_delay
     /tmp/ccnN7Lx0.s:711    .text.send_string:0000000000000000 send_string
     /tmp/ccnN7Lx0.s:730    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
     /tmp/ccnN7Lx0.s:906    .text.send_string_P:0000000000000000 send_string_P
     /tmp/ccnN7Lx0.s:925    .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
     /tmp/ccnN7Lx0.s:974    .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
     /tmp/ccnN7Lx0.s:1129   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccnN7Lx0.s:1166   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccnN7Lx0.s:1292   .text.bootmagic_lite:0000000000000000 bootmagic_lite
     /tmp/ccnN7Lx0.s:1338   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccnN7Lx0.s:1364   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccnN7Lx0.s:1381   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccnN7Lx0.s:1445   .text.send_byte:0000000000000000 send_byte
     /tmp/ccnN7Lx0.s:1482   .text.send_word:0000000000000000 send_word
     /tmp/ccnN7Lx0.s:1516   .text.send_dword:0000000000000000 send_dword
     /tmp/ccnN7Lx0.s:1566   .text.hex_to_keycode:0000000000000000 hex_to_keycode
     /tmp/ccnN7Lx0.s:1605   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccnN7Lx0.s:1621   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccnN7Lx0.s:1637   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccnN7Lx0.s:1655   .text.led_update_user:0000000000000000 led_update_user
     /tmp/ccnN7Lx0.s:1674   .text.led_update_kb:0000000000000000 led_update_kb
     /tmp/ccnN7Lx0.s:1692   .text.led_set:0000000000000000 led_set
     /tmp/ccnN7Lx0.s:1724   .text.shutdown_user:0000000000000000 shutdown_user
     /tmp/ccnN7Lx0.s:1724   .text.shutdown_user:0000000000000000 shutdown_user.localalias.0
     /tmp/ccnN7Lx0.s:1740   .text.startup_user:0000000000000000 startup_user
     /tmp/ccnN7Lx0.s:1754   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccnN7Lx0.s:1768   .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
     /tmp/ccnN7Lx0.s:1782   .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
     /tmp/ccnN7Lx0.s:1796   .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
     /tmp/ccnN7Lx0.s:1810   .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
     /tmp/ccnN7Lx0.s:1824   .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
     /tmp/ccnN7Lx0.s:1838   .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
     /tmp/ccnN7Lx0.s:1852   .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
     /tmp/ccnN7Lx0.s:1866   .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
     /tmp/ccnN7Lx0.s:1880   .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
     /tmp/ccnN7Lx0.s:1894   .text.rgblight_step:0000000000000000 rgblight_step
     /tmp/ccnN7Lx0.s:1908   .text.rgblight_toggle:0000000000000000 rgblight_toggle
     /tmp/ccnN7Lx0.s:1922   .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccnN7Lx0.s:1960   .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccnN7Lx0.s:2858   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
     /tmp/ccnN7Lx0.s:2581   .progmem.data.__c.3501:0000000000000000 __c.3501
     /tmp/ccnN7Lx0.s:2576   .progmem.data.__c.3503:0000000000000000 __c.3503

UNDEFINED SYMBOLS
register_mods
register_weak_mods
register_code
unregister_code
unregister_mods
unregister_weak_mods
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
read_source_layers_cache
keymap_key_to_keycode
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
rand
__divmodhi4
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
matrix_init_kb
matrix_scan_kb
clear_keyboard
process_space_cadet
get_mods
keyboard_report
add_key_to_report
del_key_from_report
send_keyboard_report
debug_config
xputs
eeconfig_read_keymap
keymap_config
eeconfig_update_handedness
eeconfig_update_keymap
set_output
__do_clear_bss
