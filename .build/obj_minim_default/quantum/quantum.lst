   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB30:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** #    include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #    include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
  28:quantum/quantum.c **** #    include "backlight.h"
  29:quantum/quantum.c **** extern backlight_config_t backlight_config;
  30:quantum/quantum.c **** #endif
  31:quantum/quantum.c **** 
  32:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  33:quantum/quantum.c **** #    include "fauxclicky.h"
  34:quantum/quantum.c **** #endif
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** #ifdef API_ENABLE
  37:quantum/quantum.c **** #    include "api.h"
  38:quantum/quantum.c **** #endif
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** #ifdef MIDI_ENABLE
  41:quantum/quantum.c **** #    include "process_midi.h"
  42:quantum/quantum.c **** #endif
  43:quantum/quantum.c **** 
  44:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  45:quantum/quantum.c **** #    include "velocikey.h"
  46:quantum/quantum.c **** #endif
  47:quantum/quantum.c **** 
  48:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  49:quantum/quantum.c **** #    include "haptic.h"
  50:quantum/quantum.c **** #endif
  51:quantum/quantum.c **** 
  52:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  53:quantum/quantum.c **** #    include "encoder.h"
  54:quantum/quantum.c **** #endif
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  57:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  58:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  59:quantum/quantum.c **** #    endif
  60:quantum/quantum.c **** #    ifndef AG_NORM_SONG
  61:quantum/quantum.c **** #        define AG_NORM_SONG SONG(AG_NORM_SOUND)
  62:quantum/quantum.c **** #    endif
  63:quantum/quantum.c **** #    ifndef AG_SWAP_SONG
  64:quantum/quantum.c **** #        define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  65:quantum/quantum.c **** #    endif
  66:quantum/quantum.c **** #    ifndef CG_NORM_SONG
  67:quantum/quantum.c **** #        define CG_NORM_SONG SONG(AG_NORM_SOUND)
  68:quantum/quantum.c **** #    endif
  69:quantum/quantum.c **** #    ifndef CG_SWAP_SONG
  70:quantum/quantum.c **** #        define CG_SWAP_SONG SONG(AG_SWAP_SOUND)
  71:quantum/quantum.c **** #    endif
  72:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  73:quantum/quantum.c **** float ag_norm_song[][2] = AG_NORM_SONG;
  74:quantum/quantum.c **** float ag_swap_song[][2] = AG_SWAP_SONG;
  75:quantum/quantum.c **** float cg_norm_song[][2] = CG_NORM_SONG;
  76:quantum/quantum.c **** float cg_swap_song[][2] = CG_SWAP_SONG;
  77:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  78:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  79:quantum/quantum.c **** #    endif
  80:quantum/quantum.c **** #endif
  81:quantum/quantum.c **** 
  82:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  16               		.loc 1 82 58 view -0
  17               		.cfi_startproc
  18               		.loc 1 82 58 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  83:quantum/quantum.c ****     switch (code) {
  31               		.loc 1 83 5 is_stmt 1 view .LVU2
  32 0004 9C01      		movw r18,r24
  33 0006 3A95      		dec r19
  34 0008 2115      		cp r18,__zero_reg__
  35 000a 3F41      		sbci r19,31
  36 000c 00F4      		brsh .L1
  84:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  85:quantum/quantum.c ****             break;
  37               		.loc 1 85 13 view .LVU3
  86:quantum/quantum.c ****         default:
  87:quantum/quantum.c ****             return;
  88:quantum/quantum.c ****     }
  89:quantum/quantum.c **** 
  90:quantum/quantum.c ****     uint8_t mods_to_send = 0;
  38               		.loc 1 90 5 view .LVU4
  39               	.LVL1:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****     if (code & QK_RMODS_MIN) {  // Right mod flag is set
  40               		.loc 1 92 5 view .LVU5
  41 000e EC01      		movw r28,r24
  42 0010 CC27      		clr r28
  43 0012 D170      		andi r29,1
  44 0014 DC01      		movw r26,r24
  45 0016 AA27      		clr r26
  46 0018 B270      		andi r27,2
  47 001a AC01      		movw r20,r24
  48 001c 4427      		clr r20
  49 001e 5470      		andi r21,4
  50 0020 9C01      		movw r18,r24
  51 0022 2227      		clr r18
  52 0024 3870      		andi r19,8
  53               		.loc 1 92 8 is_stmt 0 view .LVU6
  54 0026 94FF      		sbrs r25,4
  55 0028 00C0      		rjmp .L3
  93:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_RCTL);
  56               		.loc 1 93 9 is_stmt 1 view .LVU7
  57               		.loc 1 93 42 is_stmt 0 view .LVU8
  58 002a 80E1      		ldi r24,lo8(16)
  59               	.LVL2:
  60               		.loc 1 93 12 view .LVU9
  61 002c CD2B      		or r28,r29
  62 002e 01F4      		brne .L4
  90:quantum/quantum.c **** 
  63               		.loc 1 90 13 view .LVU10
  64 0030 80E0      		ldi r24,0
  65               	.L4:
  66               	.LVL3:
  94:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_RSFT);
  67               		.loc 1 94 9 is_stmt 1 view .LVU11
  68               		.loc 1 94 12 is_stmt 0 view .LVU12
  69 0032 AB2B      		or r26,r27
  70 0034 01F0      		breq .L5
  71               		.loc 1 94 29 is_stmt 1 discriminator 1 view .LVU13
  72               		.loc 1 94 42 is_stmt 0 discriminator 1 view .LVU14
  73 0036 8062      		ori r24,lo8(32)
  74               	.LVL4:
  75               	.L5:
  95:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_RALT);
  76               		.loc 1 95 9 is_stmt 1 view .LVU15
  77               		.loc 1 95 12 is_stmt 0 view .LVU16
  78 0038 452B      		or r20,r21
  79 003a 01F0      		breq .L6
  80               		.loc 1 95 29 is_stmt 1 discriminator 1 view .LVU17
  81               		.loc 1 95 42 is_stmt 0 discriminator 1 view .LVU18
  82 003c 8064      		ori r24,lo8(64)
  83               	.LVL5:
  84               	.L6:
  96:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_RGUI);
  85               		.loc 1 96 9 is_stmt 1 view .LVU19
  86               		.loc 1 96 12 is_stmt 0 view .LVU20
  87 003e 232B      		or r18,r19
  88 0040 01F0      		breq .L7
  89               		.loc 1 96 29 is_stmt 1 discriminator 1 view .LVU21
  90               		.loc 1 96 42 is_stmt 0 discriminator 1 view .LVU22
  91 0042 8068      		ori r24,lo8(-128)
  92               	.LVL6:
  93               	.L7:
  97:quantum/quantum.c ****     } else {
  98:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_LCTL);
  99:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 100:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 101:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 102:quantum/quantum.c ****     }
 103:quantum/quantum.c **** 
 104:quantum/quantum.c ****     f(mods_to_send);
  94               		.loc 1 104 5 is_stmt 1 view .LVU23
  95 0044 FB01      		movw r30,r22
  96               	/* epilogue start */
 105:quantum/quantum.c **** }
  97               		.loc 1 105 1 is_stmt 0 view .LVU24
  98 0046 DF91      		pop r29
  99 0048 CF91      		pop r28
 104:quantum/quantum.c **** }
 100               		.loc 1 104 5 view .LVU25
 101 004a 0994      		ijmp
 102               	.LVL7:
 103               	.L3:
  98:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 104               		.loc 1 98 9 is_stmt 1 view .LVU26
  98:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 105               		.loc 1 98 12 is_stmt 0 view .LVU27
 106 004c 81E0      		ldi r24,lo8(1)
 107               	.LVL8:
  98:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 108               		.loc 1 98 12 view .LVU28
 109 004e CD2B      		or r28,r29
 110 0050 01F4      		brne .L8
 111 0052 80E0      		ldi r24,0
 112               	.L8:
 113               	.LVL9:
  99:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 114               		.loc 1 99 9 is_stmt 1 view .LVU29
  99:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 115               		.loc 1 99 12 is_stmt 0 view .LVU30
 116 0054 AB2B      		or r26,r27
 117 0056 01F0      		breq .L9
  99:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 118               		.loc 1 99 29 is_stmt 1 discriminator 1 view .LVU31
  99:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 119               		.loc 1 99 42 is_stmt 0 discriminator 1 view .LVU32
 120 0058 8260      		ori r24,lo8(2)
 121               	.LVL10:
 122               	.L9:
 100:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 123               		.loc 1 100 9 is_stmt 1 view .LVU33
 100:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 124               		.loc 1 100 12 is_stmt 0 view .LVU34
 125 005a 452B      		or r20,r21
 126 005c 01F0      		breq .L10
 100:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 127               		.loc 1 100 29 is_stmt 1 discriminator 1 view .LVU35
 100:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 128               		.loc 1 100 42 is_stmt 0 discriminator 1 view .LVU36
 129 005e 8460      		ori r24,lo8(4)
 130               	.LVL11:
 131               	.L10:
 101:quantum/quantum.c ****     }
 132               		.loc 1 101 9 is_stmt 1 view .LVU37
 101:quantum/quantum.c ****     }
 133               		.loc 1 101 12 is_stmt 0 view .LVU38
 134 0060 232B      		or r18,r19
 135 0062 01F0      		breq .L7
 101:quantum/quantum.c ****     }
 136               		.loc 1 101 29 is_stmt 1 discriminator 1 view .LVU39
 101:quantum/quantum.c ****     }
 137               		.loc 1 101 42 is_stmt 0 discriminator 1 view .LVU40
 138 0064 8860      		ori r24,lo8(8)
 139               	.LVL12:
 101:quantum/quantum.c ****     }
 140               		.loc 1 101 42 discriminator 1 view .LVU41
 141 0066 00C0      		rjmp .L7
 142               	.LVL13:
 143               	.L1:
 144               	/* epilogue start */
 145               		.loc 1 105 1 view .LVU42
 146 0068 DF91      		pop r29
 147 006a CF91      		pop r28
 148 006c 0895      		ret
 149               		.cfi_endproc
 150               	.LFE30:
 152               		.section	.text.rgblight_toggle,"ax",@progbits
 153               		.weak	rgblight_toggle
 155               	rgblight_toggle:
 156               	.LFB72:
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 162               	/* epilogue start */
 163 0000 0895      		ret
 164               		.cfi_endproc
 165               	.LFE72:
 167               		.section	.text.rgblight_step,"ax",@progbits
 168               		.weak	rgblight_step
 170               	rgblight_step:
 171               	.LFB74:
 172               		.cfi_startproc
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
 177               	/* epilogue start */
 178 0000 0895      		ret
 179               		.cfi_endproc
 180               	.LFE74:
 182               		.section	.text.rgblight_step_reverse,"ax",@progbits
 183               		.weak	rgblight_step_reverse
 185               	rgblight_step_reverse:
 186               	.LFB76:
 187               		.cfi_startproc
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 192               	/* epilogue start */
 193 0000 0895      		ret
 194               		.cfi_endproc
 195               	.LFE76:
 197               		.section	.text.rgblight_increase_hue,"ax",@progbits
 198               		.weak	rgblight_increase_hue
 200               	rgblight_increase_hue:
 201               	.LFB78:
 202               		.cfi_startproc
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
 207               	/* epilogue start */
 208 0000 0895      		ret
 209               		.cfi_endproc
 210               	.LFE78:
 212               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 213               		.weak	rgblight_decrease_hue
 215               	rgblight_decrease_hue:
 216               	.LFB80:
 217               		.cfi_startproc
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 222               	/* epilogue start */
 223 0000 0895      		ret
 224               		.cfi_endproc
 225               	.LFE80:
 227               		.section	.text.rgblight_increase_sat,"ax",@progbits
 228               		.weak	rgblight_increase_sat
 230               	rgblight_increase_sat:
 231               	.LFB82:
 232               		.cfi_startproc
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 0 */
 236               	.L__stack_usage = 0
 237               	/* epilogue start */
 238 0000 0895      		ret
 239               		.cfi_endproc
 240               	.LFE82:
 242               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 243               		.weak	rgblight_decrease_sat
 245               	rgblight_decrease_sat:
 246               	.LFB84:
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
 252               	/* epilogue start */
 253 0000 0895      		ret
 254               		.cfi_endproc
 255               	.LFE84:
 257               		.section	.text.rgblight_increase_val,"ax",@progbits
 258               		.weak	rgblight_increase_val
 260               	rgblight_increase_val:
 261               	.LFB86:
 262               		.cfi_startproc
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 0 */
 266               	.L__stack_usage = 0
 267               	/* epilogue start */
 268 0000 0895      		ret
 269               		.cfi_endproc
 270               	.LFE86:
 272               		.section	.text.rgblight_decrease_val,"ax",@progbits
 273               		.weak	rgblight_decrease_val
 275               	rgblight_decrease_val:
 276               	.LFB88:
 277               		.cfi_startproc
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
 282               	/* epilogue start */
 283 0000 0895      		ret
 284               		.cfi_endproc
 285               	.LFE88:
 287               		.section	.text.rgblight_increase_speed,"ax",@progbits
 288               		.weak	rgblight_increase_speed
 290               	rgblight_increase_speed:
 291               	.LFB90:
 292               		.cfi_startproc
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 0 */
 296               	.L__stack_usage = 0
 297               	/* epilogue start */
 298 0000 0895      		ret
 299               		.cfi_endproc
 300               	.LFE90:
 302               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 303               		.weak	rgblight_decrease_speed
 305               	rgblight_decrease_speed:
 306               	.LFB92:
 307               		.cfi_startproc
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 0 */
 311               	.L__stack_usage = 0
 312               	/* epilogue start */
 313 0000 0895      		ret
 314               		.cfi_endproc
 315               	.LFE92:
 317               		.section	.text.register_code16,"ax",@progbits
 318               	.global	register_code16
 320               	register_code16:
 321               	.LVL14:
 322               	.LFB31:
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** void register_code16(uint16_t code) {
 323               		.loc 1 107 37 is_stmt 1 view -0
 324               		.cfi_startproc
 325               		.loc 1 107 37 is_stmt 0 view .LVU44
 326 0000 CF93      		push r28
 327               	.LCFI2:
 328               		.cfi_def_cfa_offset 3
 329               		.cfi_offset 28, -2
 330 0002 DF93      		push r29
 331               	.LCFI3:
 332               		.cfi_def_cfa_offset 4
 333               		.cfi_offset 29, -3
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 2 */
 337               	.L__stack_usage = 2
 338 0004 EC01      		movw r28,r24
 108:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 339               		.loc 1 108 5 is_stmt 1 view .LVU45
 340               		.loc 1 108 9 is_stmt 0 view .LVU46
 341 0006 805E      		subi r24,-32
 342 0008 9109      		sbc r25,__zero_reg__
 343               	.LVL15:
 344               		.loc 1 108 8 view .LVU47
 345 000a 0897      		sbiw r24,8
 346 000c 00F0      		brlo .L42
 109:quantum/quantum.c ****         do_code16(code, register_mods);
 110:quantum/quantum.c ****     } else {
 111:quantum/quantum.c ****         do_code16(code, register_weak_mods);
 347               		.loc 1 111 9 discriminator 1 view .LVU48
 348 000e 60E0      		ldi r22,lo8(gs(register_weak_mods))
 349 0010 70E0      		ldi r23,hi8(gs(register_weak_mods))
 108:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 350               		.loc 1 108 22 discriminator 1 view .LVU49
 351 0012 2097      		sbiw r28,0
 352 0014 01F4      		brne .L45
 353               	.L42:
 109:quantum/quantum.c ****         do_code16(code, register_mods);
 354               		.loc 1 109 9 is_stmt 1 view .LVU50
 355 0016 60E0      		ldi r22,lo8(gs(register_mods))
 356 0018 70E0      		ldi r23,hi8(gs(register_mods))
 357               	.L45:
 358               		.loc 1 111 9 is_stmt 0 view .LVU51
 359 001a CE01      		movw r24,r28
 360 001c 0E94 0000 		call do_code16
 361               	.LVL16:
 112:quantum/quantum.c ****     }
 113:quantum/quantum.c ****     register_code(code);
 362               		.loc 1 113 5 is_stmt 1 view .LVU52
 363 0020 8C2F      		mov r24,r28
 364               	/* epilogue start */
 114:quantum/quantum.c **** }
 365               		.loc 1 114 1 is_stmt 0 view .LVU53
 366 0022 DF91      		pop r29
 367 0024 CF91      		pop r28
 368               	.LVL17:
 113:quantum/quantum.c **** }
 369               		.loc 1 113 5 view .LVU54
 370 0026 0C94 0000 		jmp register_code
 371               	.LVL18:
 372               		.cfi_endproc
 373               	.LFE31:
 375               		.section	.text.unregister_code16,"ax",@progbits
 376               	.global	unregister_code16
 378               	unregister_code16:
 379               	.LVL19:
 380               	.LFB32:
 115:quantum/quantum.c **** 
 116:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 381               		.loc 1 116 39 is_stmt 1 view -0
 382               		.cfi_startproc
 383               		.loc 1 116 39 is_stmt 0 view .LVU56
 384 0000 CF93      		push r28
 385               	.LCFI4:
 386               		.cfi_def_cfa_offset 3
 387               		.cfi_offset 28, -2
 388 0002 DF93      		push r29
 389               	.LCFI5:
 390               		.cfi_def_cfa_offset 4
 391               		.cfi_offset 29, -3
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 2 */
 395               	.L__stack_usage = 2
 396 0004 EC01      		movw r28,r24
 117:quantum/quantum.c ****     unregister_code(code);
 397               		.loc 1 117 5 is_stmt 1 view .LVU57
 398 0006 0E94 0000 		call unregister_code
 399               	.LVL20:
 118:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 400               		.loc 1 118 5 view .LVU58
 401               		.loc 1 118 9 is_stmt 0 view .LVU59
 402 000a CE01      		movw r24,r28
 403 000c 805E      		subi r24,-32
 404 000e 9109      		sbc r25,__zero_reg__
 405               		.loc 1 118 8 view .LVU60
 406 0010 0897      		sbiw r24,8
 407 0012 00F0      		brlo .L47
 119:quantum/quantum.c ****         do_code16(code, unregister_mods);
 120:quantum/quantum.c ****     } else {
 121:quantum/quantum.c ****         do_code16(code, unregister_weak_mods);
 408               		.loc 1 121 9 discriminator 1 view .LVU61
 409 0014 60E0      		ldi r22,lo8(gs(unregister_weak_mods))
 410 0016 70E0      		ldi r23,hi8(gs(unregister_weak_mods))
 118:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 411               		.loc 1 118 22 discriminator 1 view .LVU62
 412 0018 2097      		sbiw r28,0
 413 001a 01F4      		brne .L49
 414               	.L47:
 119:quantum/quantum.c ****         do_code16(code, unregister_mods);
 415               		.loc 1 119 9 is_stmt 1 view .LVU63
 416 001c 60E0      		ldi r22,lo8(gs(unregister_mods))
 417 001e 70E0      		ldi r23,hi8(gs(unregister_mods))
 418               	.L49:
 419               		.loc 1 121 9 is_stmt 0 view .LVU64
 420 0020 CE01      		movw r24,r28
 421               	/* epilogue start */
 122:quantum/quantum.c ****     }
 123:quantum/quantum.c **** }
 422               		.loc 1 123 1 view .LVU65
 423 0022 DF91      		pop r29
 424 0024 CF91      		pop r28
 425               	.LVL21:
 121:quantum/quantum.c ****     }
 426               		.loc 1 121 9 view .LVU66
 427 0026 0C94 0000 		jmp do_code16
 428               	.LVL22:
 121:quantum/quantum.c ****     }
 429               		.loc 1 121 9 view .LVU67
 430               		.cfi_endproc
 431               	.LFE32:
 433               		.section	.text.tap_code16,"ax",@progbits
 434               	.global	tap_code16
 436               	tap_code16:
 437               	.LVL23:
 438               	.LFB33:
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void tap_code16(uint16_t code) {
 439               		.loc 1 125 32 is_stmt 1 view -0
 440               		.cfi_startproc
 441               		.loc 1 125 32 is_stmt 0 view .LVU69
 442 0000 CF93      		push r28
 443               	.LCFI6:
 444               		.cfi_def_cfa_offset 3
 445               		.cfi_offset 28, -2
 446 0002 DF93      		push r29
 447               	.LCFI7:
 448               		.cfi_def_cfa_offset 4
 449               		.cfi_offset 29, -3
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 2 */
 453               	.L__stack_usage = 2
 454 0004 EC01      		movw r28,r24
 126:quantum/quantum.c ****     register_code16(code);
 455               		.loc 1 126 5 is_stmt 1 view .LVU70
 456 0006 0E94 0000 		call register_code16
 457               	.LVL24:
 127:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 128:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 129:quantum/quantum.c **** #endif
 130:quantum/quantum.c ****     unregister_code16(code);
 458               		.loc 1 130 5 view .LVU71
 459 000a CE01      		movw r24,r28
 460               	/* epilogue start */
 131:quantum/quantum.c **** }
 461               		.loc 1 131 1 is_stmt 0 view .LVU72
 462 000c DF91      		pop r29
 463 000e CF91      		pop r28
 464               	.LVL25:
 130:quantum/quantum.c **** }
 465               		.loc 1 130 5 view .LVU73
 466 0010 0C94 0000 		jmp unregister_code16
 467               	.LVL26:
 130:quantum/quantum.c **** }
 468               		.loc 1 130 5 view .LVU74
 469               		.cfi_endproc
 470               	.LFE33:
 472               		.section	.text.process_action_kb,"ax",@progbits
 473               		.weak	process_action_kb
 475               	process_action_kb:
 476               	.LVL27:
 477               	.LFB34:
 132:quantum/quantum.c **** 
 133:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 478               		.loc 1 133 67 is_stmt 1 view -0
 479               		.cfi_startproc
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 0 */
 483               	.L__stack_usage = 0
 484               		.loc 1 133 69 view .LVU76
 485               		.loc 1 133 1 is_stmt 0 view .LVU77
 486 0000 81E0      		ldi r24,lo8(1)
 487               	.LVL28:
 488               	/* epilogue start */
 489               		.loc 1 133 1 view .LVU78
 490 0002 0895      		ret
 491               		.cfi_endproc
 492               	.LFE34:
 494               		.section	.text.process_record_user,"ax",@progbits
 495               		.weak	process_record_user
 497               	process_record_user:
 498               	.LVL29:
 499               	.LFB36:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 136:quantum/quantum.c **** 
 137:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 500               		.loc 1 137 87 is_stmt 1 view -0
 501               		.cfi_startproc
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 506               		.loc 1 137 89 view .LVU80
 507               		.loc 1 137 1 is_stmt 0 view .LVU81
 508 0000 81E0      		ldi r24,lo8(1)
 509               	.LVL30:
 510               	/* epilogue start */
 511               		.loc 1 137 1 view .LVU82
 512 0002 0895      		ret
 513               		.cfi_endproc
 514               	.LFE36:
 516               		.section	.text.process_record_kb,"ax",@progbits
 517               		.weak	process_record_kb
 519               	process_record_kb:
 520               	.LVL31:
 521               	.LFB35:
 135:quantum/quantum.c **** 
 522               		.loc 1 135 85 is_stmt 1 view -0
 523               		.cfi_startproc
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 135:quantum/quantum.c **** 
 528               		.loc 1 135 87 view .LVU84
 135:quantum/quantum.c **** 
 529               		.loc 1 135 94 is_stmt 0 view .LVU85
 530 0000 0C94 0000 		jmp process_record_user
 531               	.LVL32:
 135:quantum/quantum.c **** 
 532               		.loc 1 135 94 view .LVU86
 533               		.cfi_endproc
 534               	.LFE35:
 536               		.section	.text.get_event_keycode,"ax",@progbits
 537               	.global	get_event_keycode
 539               	get_event_keycode:
 540               	.LFB39:
 138:quantum/quantum.c **** 
 139:quantum/quantum.c **** void reset_keyboard(void) {
 140:quantum/quantum.c ****     clear_keyboard();
 141:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 142:quantum/quantum.c ****     process_midi_all_notes_off();
 143:quantum/quantum.c **** #endif
 144:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 145:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 146:quantum/quantum.c ****     music_all_notes_off();
 147:quantum/quantum.c **** #    endif
 148:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 149:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 150:quantum/quantum.c ****     shutdown_user();
 151:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 152:quantum/quantum.c ****     stop_all_notes();
 153:quantum/quantum.c **** #else
 154:quantum/quantum.c ****     shutdown_user();
 155:quantum/quantum.c ****     wait_ms(250);
 156:quantum/quantum.c **** #endif
 157:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 158:quantum/quantum.c ****     haptic_shutdown();
 159:quantum/quantum.c **** #endif
 160:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 161:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 162:quantum/quantum.c ****     *(uint16_t *)0x0800 = 0x7777;  // these two are a-star-specific
 163:quantum/quantum.c **** #endif
 164:quantum/quantum.c ****     bootloader_jump();
 165:quantum/quantum.c **** }
 166:quantum/quantum.c **** 
 167:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 168:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 169:quantum/quantum.c ****  */
 170:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 171:quantum/quantum.c **** 
 172:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 173:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 174:quantum/quantum.c **** 
 175:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 176:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 177:quantum/quantum.c ****  */
 178:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 541               		.loc 1 178 46 is_stmt 1 view -0
 542               		.cfi_startproc
 543 0000 1F93      		push r17
 544               	.LCFI8:
 545               		.cfi_def_cfa_offset 3
 546               		.cfi_offset 17, -2
 547 0002 CF93      		push r28
 548               	.LCFI9:
 549               		.cfi_def_cfa_offset 4
 550               		.cfi_offset 28, -3
 551 0004 DF93      		push r29
 552               	.LCFI10:
 553               		.cfi_def_cfa_offset 5
 554               		.cfi_offset 29, -4
 555 0006 00D0      		rcall .
 556 0008 00D0      		rcall .
 557 000a 0F92      		push __tmp_reg__
 558               	.LCFI11:
 559               		.cfi_def_cfa_offset 10
 560 000c CDB7      		in r28,__SP_L__
 561 000e DEB7      		in r29,__SP_H__
 562               	.LCFI12:
 563               		.cfi_def_cfa_register 28
 564               	/* prologue: function */
 565               	/* frame size = 5 */
 566               	/* stack size = 8 */
 567               	.L__stack_usage = 8
 568 0010 4983      		std Y+1,r20
 569 0012 5A83      		std Y+2,r21
 570 0014 6B83      		std Y+3,r22
 179:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 180:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 181:quantum/quantum.c ****     if (!disable_action_cache) {
 571               		.loc 1 181 5 view .LVU88
 572               		.loc 1 181 8 is_stmt 0 view .LVU89
 573 0016 2091 0000 		lds r18,disable_action_cache
 574 001a 8981      		ldd r24,Y+1
 575 001c 9A81      		ldd r25,Y+2
 576 001e 2111      		cpse r18,__zero_reg__
 577 0020 00C0      		rjmp .L55
 578               	.LBB24:
 182:quantum/quantum.c ****         uint8_t layer;
 579               		.loc 1 182 9 is_stmt 1 view .LVU90
 183:quantum/quantum.c **** 
 184:quantum/quantum.c ****         if (event.pressed) {
 580               		.loc 1 184 9 view .LVU91
 581               		.loc 1 184 12 is_stmt 0 view .LVU92
 582 0022 6623      		tst r22
 583 0024 01F0      		breq .L56
 185:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 584               		.loc 1 185 13 is_stmt 1 view .LVU93
 585               		.loc 1 185 21 is_stmt 0 view .LVU94
 586 0026 0E94 0000 		call layer_switch_get_layer
 587               	.LVL33:
 588 002a 182F      		mov r17,r24
 589               	.LVL34:
 186:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 590               		.loc 1 186 13 is_stmt 1 view .LVU95
 591 002c 682F      		mov r22,r24
 592 002e 8981      		ldd r24,Y+1
 593 0030 9A81      		ldd r25,Y+2
 594 0032 0E94 0000 		call update_source_layers_cache
 595               	.LVL35:
 596               	.L57:
 187:quantum/quantum.c ****         } else {
 188:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 189:quantum/quantum.c ****         }
 190:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 597               		.loc 1 190 9 view .LVU96
 598               		.loc 1 190 16 is_stmt 0 view .LVU97
 599 0036 6981      		ldd r22,Y+1
 600 0038 7A81      		ldd r23,Y+2
 601 003a 812F      		mov r24,r17
 602               	.LVL36:
 603               	.L58:
 604               	/* epilogue start */
 605               		.loc 1 190 16 view .LVU98
 606               	.LBE24:
 191:quantum/quantum.c ****     } else
 192:quantum/quantum.c **** #endif
 193:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 194:quantum/quantum.c **** }
 607               		.loc 1 194 1 view .LVU99
 608 003c 0F90      		pop __tmp_reg__
 609 003e 0F90      		pop __tmp_reg__
 610 0040 0F90      		pop __tmp_reg__
 611 0042 0F90      		pop __tmp_reg__
 612 0044 0F90      		pop __tmp_reg__
 613 0046 DF91      		pop r29
 614 0048 CF91      		pop r28
 615 004a 1F91      		pop r17
 193:quantum/quantum.c **** }
 616               		.loc 1 193 16 view .LVU100
 617 004c 0C94 0000 		jmp keymap_key_to_keycode
 618               	.LVL37:
 619               	.L56:
 620               	.LBB25:
 188:quantum/quantum.c ****         }
 621               		.loc 1 188 13 is_stmt 1 view .LVU101
 188:quantum/quantum.c ****         }
 622               		.loc 1 188 21 is_stmt 0 view .LVU102
 623 0050 0E94 0000 		call read_source_layers_cache
 624               	.LVL38:
 625 0054 182F      		mov r17,r24
 626               	.LVL39:
 188:quantum/quantum.c ****         }
 627               		.loc 1 188 21 view .LVU103
 628 0056 00C0      		rjmp .L57
 629               	.LVL40:
 630               	.L55:
 188:quantum/quantum.c ****         }
 631               		.loc 1 188 21 view .LVU104
 632               	.LBE25:
 193:quantum/quantum.c **** }
 633               		.loc 1 193 9 is_stmt 1 view .LVU105
 193:quantum/quantum.c **** }
 634               		.loc 1 193 16 is_stmt 0 view .LVU106
 635 0058 0E94 0000 		call layer_switch_get_layer
 636               	.LVL41:
 637 005c 6981      		ldd r22,Y+1
 638 005e 7A81      		ldd r23,Y+2
 639 0060 00C0      		rjmp .L58
 640               		.cfi_endproc
 641               	.LFE39:
 643               		.section	.text.get_record_keycode,"ax",@progbits
 644               	.global	get_record_keycode
 646               	get_record_keycode:
 647               	.LVL42:
 648               	.LFB38:
 173:quantum/quantum.c **** 
 649               		.loc 1 173 50 is_stmt 1 view -0
 650               		.cfi_startproc
 651               	/* prologue: function */
 652               	/* frame size = 0 */
 653               	/* stack size = 0 */
 654               	.L__stack_usage = 0
 173:quantum/quantum.c **** 
 655               		.loc 1 173 50 is_stmt 0 view .LVU108
 656 0000 FC01      		movw r30,r24
 173:quantum/quantum.c **** 
 657               		.loc 1 173 52 is_stmt 1 view .LVU109
 173:quantum/quantum.c **** 
 658               		.loc 1 173 59 is_stmt 0 view .LVU110
 659 0002 4081      		ld r20,Z
 660 0004 5181      		ldd r21,Z+1
 661 0006 6281      		ldd r22,Z+2
 662 0008 7381      		ldd r23,Z+3
 663 000a 8481      		ldd r24,Z+4
 664               	.LVL43:
 173:quantum/quantum.c **** 
 665               		.loc 1 173 59 view .LVU111
 666 000c 0C94 0000 		jmp get_event_keycode
 667               	.LVL44:
 173:quantum/quantum.c **** 
 668               		.loc 1 173 59 view .LVU112
 669               		.cfi_endproc
 670               	.LFE38:
 672               		.section	.text.send_char,"ax",@progbits
 673               	.global	send_char
 675               	send_char:
 676               	.LVL45:
 677               	.LFB45:
 195:quantum/quantum.c **** 
 196:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 197:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 198:quantum/quantum.c ****  */
 199:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 200:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 201:quantum/quantum.c **** 
 202:quantum/quantum.c ****     // This is how you use actions here
 203:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 204:quantum/quantum.c ****     //   action_t action;
 205:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 206:quantum/quantum.c ****     //   process_action(record, action);
 207:quantum/quantum.c ****     //   return false;
 208:quantum/quantum.c ****     // }
 209:quantum/quantum.c **** 
 210:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 211:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 212:quantum/quantum.c ****         velocikey_accelerate();
 213:quantum/quantum.c ****     }
 214:quantum/quantum.c **** #endif
 215:quantum/quantum.c **** 
 216:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 217:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 218:quantum/quantum.c **** #endif
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****     if (!(
 221:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 222:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 223:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 224:quantum/quantum.c **** #endif
 225:quantum/quantum.c **** #if defined(DYNAMIC_MACRO_ENABLE) && !defined(DYNAMIC_MACRO_USER_CALL)
 226:quantum/quantum.c ****             // Must run asap to ensure all keypresses are recorded.
 227:quantum/quantum.c ****             process_dynamic_macro(keycode, record) &&
 228:quantum/quantum.c **** #endif
 229:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****             process_clicky(keycode, record) &&
 231:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 232:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 233:quantum/quantum.c ****             process_haptic(keycode, record) &&
 234:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 235:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 236:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 237:quantum/quantum.c **** #endif
 238:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 239:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 240:quantum/quantum.c ****             process_midi(keycode, record) &&
 241:quantum/quantum.c **** #endif
 242:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 243:quantum/quantum.c ****             process_audio(keycode, record) &&
 244:quantum/quantum.c **** #endif
 245:quantum/quantum.c **** #ifdef STENO_ENABLE
 246:quantum/quantum.c ****             process_steno(keycode, record) &&
 247:quantum/quantum.c **** #endif
 248:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 249:quantum/quantum.c ****             process_music(keycode, record) &&
 250:quantum/quantum.c **** #endif
 251:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 252:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 253:quantum/quantum.c **** #endif
 254:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 255:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 256:quantum/quantum.c **** #endif
 257:quantum/quantum.c **** #ifdef LEADER_ENABLE
 258:quantum/quantum.c ****             process_leader(keycode, record) &&
 259:quantum/quantum.c **** #endif
 260:quantum/quantum.c **** #ifdef COMBO_ENABLE
 261:quantum/quantum.c ****             process_combo(keycode, record) &&
 262:quantum/quantum.c **** #endif
 263:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 264:quantum/quantum.c ****             process_printer(keycode, record) &&
 265:quantum/quantum.c **** #endif
 266:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 267:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 268:quantum/quantum.c **** #endif
 269:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 270:quantum/quantum.c ****             process_terminal(keycode, record) &&
 271:quantum/quantum.c **** #endif
 272:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 273:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 274:quantum/quantum.c **** #endif
 275:quantum/quantum.c ****             true)) {
 276:quantum/quantum.c ****         return false;
 277:quantum/quantum.c ****     }
 278:quantum/quantum.c **** 
 279:quantum/quantum.c ****     // Shift / paren setup
 280:quantum/quantum.c **** 
 281:quantum/quantum.c ****     switch (keycode) {
 282:quantum/quantum.c ****         case RESET:
 283:quantum/quantum.c ****             if (record->event.pressed) {
 284:quantum/quantum.c ****                 reset_keyboard();
 285:quantum/quantum.c ****             }
 286:quantum/quantum.c ****             return false;
 287:quantum/quantum.c ****         case DEBUG:
 288:quantum/quantum.c ****             if (record->event.pressed) {
 289:quantum/quantum.c ****                 debug_enable ^= 1;
 290:quantum/quantum.c ****                 if (debug_enable) {
 291:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 292:quantum/quantum.c ****                 } else {
 293:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 294:quantum/quantum.c ****                 }
 295:quantum/quantum.c ****             }
 296:quantum/quantum.c ****             return false;
 297:quantum/quantum.c ****         case EEPROM_RESET:
 298:quantum/quantum.c ****             if (record->event.pressed) {
 299:quantum/quantum.c ****                 eeconfig_init();
 300:quantum/quantum.c ****             }
 301:quantum/quantum.c ****             return false;
 302:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 303:quantum/quantum.c ****         case FC_TOG:
 304:quantum/quantum.c ****             if (record->event.pressed) {
 305:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 306:quantum/quantum.c ****             }
 307:quantum/quantum.c ****             return false;
 308:quantum/quantum.c ****         case FC_ON:
 309:quantum/quantum.c ****             if (record->event.pressed) {
 310:quantum/quantum.c ****                 FAUXCLICKY_ON;
 311:quantum/quantum.c ****             }
 312:quantum/quantum.c ****             return false;
 313:quantum/quantum.c ****         case FC_OFF:
 314:quantum/quantum.c ****             if (record->event.pressed) {
 315:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 316:quantum/quantum.c ****             }
 317:quantum/quantum.c ****             return false;
 318:quantum/quantum.c **** #endif
 319:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 320:quantum/quantum.c ****         case RGB_TOG:
 321:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 322:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 323:quantum/quantum.c ****             if (record->event.pressed) {
 324:quantum/quantum.c **** #    else
 325:quantum/quantum.c ****             if (!record->event.pressed) {
 326:quantum/quantum.c **** #    endif
 327:quantum/quantum.c ****                 rgblight_toggle();
 328:quantum/quantum.c ****             }
 329:quantum/quantum.c ****             return false;
 330:quantum/quantum.c ****         case RGB_MODE_FORWARD:
 331:quantum/quantum.c ****             if (record->event.pressed) {
 332:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****                 if (shifted) {
 334:quantum/quantum.c ****                     rgblight_step_reverse();
 335:quantum/quantum.c ****                 } else {
 336:quantum/quantum.c ****                     rgblight_step();
 337:quantum/quantum.c ****                 }
 338:quantum/quantum.c ****             }
 339:quantum/quantum.c ****             return false;
 340:quantum/quantum.c ****         case RGB_MODE_REVERSE:
 341:quantum/quantum.c ****             if (record->event.pressed) {
 342:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 343:quantum/quantum.c ****                 if (shifted) {
 344:quantum/quantum.c ****                     rgblight_step();
 345:quantum/quantum.c ****                 } else {
 346:quantum/quantum.c ****                     rgblight_step_reverse();
 347:quantum/quantum.c ****                 }
 348:quantum/quantum.c ****             }
 349:quantum/quantum.c ****             return false;
 350:quantum/quantum.c ****         case RGB_HUI:
 351:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 352:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 353:quantum/quantum.c ****             if (record->event.pressed) {
 354:quantum/quantum.c **** #    else
 355:quantum/quantum.c ****             if (!record->event.pressed) {
 356:quantum/quantum.c **** #    endif
 357:quantum/quantum.c ****                 rgblight_increase_hue();
 358:quantum/quantum.c ****             }
 359:quantum/quantum.c ****             return false;
 360:quantum/quantum.c ****         case RGB_HUD:
 361:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 362:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 363:quantum/quantum.c ****             if (record->event.pressed) {
 364:quantum/quantum.c **** #    else
 365:quantum/quantum.c ****             if (!record->event.pressed) {
 366:quantum/quantum.c **** #    endif
 367:quantum/quantum.c ****                 rgblight_decrease_hue();
 368:quantum/quantum.c ****             }
 369:quantum/quantum.c ****             return false;
 370:quantum/quantum.c ****         case RGB_SAI:
 371:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 372:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 373:quantum/quantum.c ****             if (record->event.pressed) {
 374:quantum/quantum.c **** #    else
 375:quantum/quantum.c ****             if (!record->event.pressed) {
 376:quantum/quantum.c **** #    endif
 377:quantum/quantum.c ****                 rgblight_increase_sat();
 378:quantum/quantum.c ****             }
 379:quantum/quantum.c ****             return false;
 380:quantum/quantum.c ****         case RGB_SAD:
 381:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 382:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 383:quantum/quantum.c ****             if (record->event.pressed) {
 384:quantum/quantum.c **** #    else
 385:quantum/quantum.c ****             if (!record->event.pressed) {
 386:quantum/quantum.c **** #    endif
 387:quantum/quantum.c ****                 rgblight_decrease_sat();
 388:quantum/quantum.c ****             }
 389:quantum/quantum.c ****             return false;
 390:quantum/quantum.c ****         case RGB_VAI:
 391:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 392:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 393:quantum/quantum.c ****             if (record->event.pressed) {
 394:quantum/quantum.c **** #    else
 395:quantum/quantum.c ****             if (!record->event.pressed) {
 396:quantum/quantum.c **** #    endif
 397:quantum/quantum.c ****                 rgblight_increase_val();
 398:quantum/quantum.c ****             }
 399:quantum/quantum.c ****             return false;
 400:quantum/quantum.c ****         case RGB_VAD:
 401:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 402:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 403:quantum/quantum.c ****             if (record->event.pressed) {
 404:quantum/quantum.c **** #    else
 405:quantum/quantum.c ****             if (!record->event.pressed) {
 406:quantum/quantum.c **** #    endif
 407:quantum/quantum.c ****                 rgblight_decrease_val();
 408:quantum/quantum.c ****             }
 409:quantum/quantum.c ****             return false;
 410:quantum/quantum.c ****         case RGB_SPI:
 411:quantum/quantum.c ****             if (record->event.pressed) {
 412:quantum/quantum.c ****                 rgblight_increase_speed();
 413:quantum/quantum.c ****             }
 414:quantum/quantum.c ****             return false;
 415:quantum/quantum.c ****         case RGB_SPD:
 416:quantum/quantum.c ****             if (record->event.pressed) {
 417:quantum/quantum.c ****                 rgblight_decrease_speed();
 418:quantum/quantum.c ****             }
 419:quantum/quantum.c ****             return false;
 420:quantum/quantum.c ****         case RGB_MODE_PLAIN:
 421:quantum/quantum.c ****             if (record->event.pressed) {
 422:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 423:quantum/quantum.c ****             }
 424:quantum/quantum.c ****             return false;
 425:quantum/quantum.c ****         case RGB_MODE_BREATHE:
 426:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_BREATHING
 427:quantum/quantum.c ****             if (record->event.pressed) {
 428:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) && (rgblight_get_mode() < RGBL
 429:quantum/quantum.c ****                     rgblight_step();
 430:quantum/quantum.c ****                 } else {
 431:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_BREATHING);
 432:quantum/quantum.c ****                 }
 433:quantum/quantum.c ****             }
 434:quantum/quantum.c **** #    endif
 435:quantum/quantum.c ****             return false;
 436:quantum/quantum.c ****         case RGB_MODE_RAINBOW:
 437:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 438:quantum/quantum.c ****             if (record->event.pressed) {
 439:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) && (rgblight_get_mode() < R
 440:quantum/quantum.c ****                     rgblight_step();
 441:quantum/quantum.c ****                 } else {
 442:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 443:quantum/quantum.c ****                 }
 444:quantum/quantum.c ****             }
 445:quantum/quantum.c **** #    endif
 446:quantum/quantum.c ****             return false;
 447:quantum/quantum.c ****         case RGB_MODE_SWIRL:
 448:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 449:quantum/quantum.c ****             if (record->event.pressed) {
 450:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) && (rgblight_get_mode() < 
 451:quantum/quantum.c ****                     rgblight_step();
 452:quantum/quantum.c ****                 } else {
 453:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 454:quantum/quantum.c ****                 }
 455:quantum/quantum.c ****             }
 456:quantum/quantum.c **** #    endif
 457:quantum/quantum.c ****             return false;
 458:quantum/quantum.c ****         case RGB_MODE_SNAKE:
 459:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_SNAKE
 460:quantum/quantum.c ****             if (record->event.pressed) {
 461:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGHT
 462:quantum/quantum.c ****                     rgblight_step();
 463:quantum/quantum.c ****                 } else {
 464:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_SNAKE);
 465:quantum/quantum.c ****                 }
 466:quantum/quantum.c ****             }
 467:quantum/quantum.c **** #    endif
 468:quantum/quantum.c ****             return false;
 469:quantum/quantum.c ****         case RGB_MODE_KNIGHT:
 470:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_KNIGHT
 471:quantum/quantum.c ****             if (record->event.pressed) {
 472:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGH
 473:quantum/quantum.c ****                     rgblight_step();
 474:quantum/quantum.c ****                 } else {
 475:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 476:quantum/quantum.c ****                 }
 477:quantum/quantum.c ****             }
 478:quantum/quantum.c **** #    endif
 479:quantum/quantum.c ****             return false;
 480:quantum/quantum.c ****         case RGB_MODE_XMAS:
 481:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_CHRISTMAS
 482:quantum/quantum.c ****             if (record->event.pressed) {
 483:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 484:quantum/quantum.c ****             }
 485:quantum/quantum.c **** #    endif
 486:quantum/quantum.c ****             return false;
 487:quantum/quantum.c ****         case RGB_MODE_GRADIENT:
 488:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 489:quantum/quantum.c ****             if (record->event.pressed) {
 490:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) && (rgblight_get_mode() 
 491:quantum/quantum.c ****                     rgblight_step();
 492:quantum/quantum.c ****                 } else {
 493:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 494:quantum/quantum.c ****                 }
 495:quantum/quantum.c ****             }
 496:quantum/quantum.c **** #    endif
 497:quantum/quantum.c ****             return false;
 498:quantum/quantum.c ****         case RGB_MODE_RGBTEST:
 499:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RGB_TEST
 500:quantum/quantum.c ****             if (record->event.pressed) {
 501:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 502:quantum/quantum.c ****             }
 503:quantum/quantum.c **** #    endif
 504:quantum/quantum.c ****             return false;
 505:quantum/quantum.c **** #endif  // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 506:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 507:quantum/quantum.c ****         case VLK_TOG:
 508:quantum/quantum.c ****             if (record->event.pressed) {
 509:quantum/quantum.c ****                 velocikey_toggle();
 510:quantum/quantum.c ****             }
 511:quantum/quantum.c ****             return false;
 512:quantum/quantum.c **** #endif
 513:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
 514:quantum/quantum.c ****         case OUT_AUTO:
 515:quantum/quantum.c ****             if (record->event.pressed) {
 516:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 517:quantum/quantum.c ****             }
 518:quantum/quantum.c ****             return false;
 519:quantum/quantum.c ****         case OUT_USB:
 520:quantum/quantum.c ****             if (record->event.pressed) {
 521:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 522:quantum/quantum.c ****             }
 523:quantum/quantum.c ****             return false;
 524:quantum/quantum.c **** #    ifdef BLUETOOTH_ENABLE
 525:quantum/quantum.c ****         case OUT_BT:
 526:quantum/quantum.c ****             if (record->event.pressed) {
 527:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 528:quantum/quantum.c ****             }
 529:quantum/quantum.c ****             return false;
 530:quantum/quantum.c **** #    endif
 531:quantum/quantum.c **** #endif
 532:quantum/quantum.c ****         case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_ALT_GUI:
 533:quantum/quantum.c ****         case MAGIC_SWAP_LCTL_LGUI ... MAGIC_EE_HANDS_RIGHT:
 534:quantum/quantum.c ****             if (record->event.pressed) {
 535:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 536:quantum/quantum.c ****                 if (!eeconfig_is_enabled()) {
 537:quantum/quantum.c ****                     eeconfig_init();
 538:quantum/quantum.c ****                 }
 539:quantum/quantum.c ****                 /* keymap config */
 540:quantum/quantum.c ****                 keymap_config.raw = eeconfig_read_keymap();
 541:quantum/quantum.c ****                 switch (keycode) {
 542:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 543:quantum/quantum.c ****                         keymap_config.swap_control_capslock = true;
 544:quantum/quantum.c ****                         break;
 545:quantum/quantum.c ****                     case MAGIC_CAPSLOCK_TO_CONTROL:
 546:quantum/quantum.c ****                         keymap_config.capslock_to_control = true;
 547:quantum/quantum.c ****                         break;
 548:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 549:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = true;
 550:quantum/quantum.c ****                         break;
 551:quantum/quantum.c ****                     case MAGIC_SWAP_RALT_RGUI:
 552:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = true;
 553:quantum/quantum.c ****                         break;
 554:quantum/quantum.c ****                     case MAGIC_SWAP_LCTL_LGUI:
 555:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = true;
 556:quantum/quantum.c ****                         break;
 557:quantum/quantum.c ****                     case MAGIC_SWAP_RCTL_RGUI:
 558:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = true;
 559:quantum/quantum.c ****                         break;
 560:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 561:quantum/quantum.c ****                         keymap_config.no_gui = true;
 562:quantum/quantum.c ****                         break;
 563:quantum/quantum.c ****                     case MAGIC_SWAP_GRAVE_ESC:
 564:quantum/quantum.c ****                         keymap_config.swap_grave_esc = true;
 565:quantum/quantum.c ****                         break;
 566:quantum/quantum.c ****                     case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 567:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = true;
 568:quantum/quantum.c ****                         break;
 569:quantum/quantum.c ****                     case MAGIC_HOST_NKRO:
 570:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 571:quantum/quantum.c ****                         keymap_config.nkro = true;
 572:quantum/quantum.c ****                         break;
 573:quantum/quantum.c ****                     case MAGIC_SWAP_ALT_GUI:
 574:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = true;
 575:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 576:quantum/quantum.c ****                         PLAY_SONG(ag_swap_song);
 577:quantum/quantum.c **** #endif
 578:quantum/quantum.c ****                         break;
 579:quantum/quantum.c ****                     case MAGIC_SWAP_CTL_GUI:
 580:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = true;
 581:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 582:quantum/quantum.c ****                         PLAY_SONG(cg_swap_song);
 583:quantum/quantum.c **** #endif
 584:quantum/quantum.c ****                         break;
 585:quantum/quantum.c ****                     case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 586:quantum/quantum.c ****                         keymap_config.swap_control_capslock = false;
 587:quantum/quantum.c ****                         break;
 588:quantum/quantum.c ****                     case MAGIC_UNCAPSLOCK_TO_CONTROL:
 589:quantum/quantum.c ****                         keymap_config.capslock_to_control = false;
 590:quantum/quantum.c ****                         break;
 591:quantum/quantum.c ****                     case MAGIC_UNSWAP_LALT_LGUI:
 592:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = false;
 593:quantum/quantum.c ****                         break;
 594:quantum/quantum.c ****                     case MAGIC_UNSWAP_RALT_RGUI:
 595:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = false;
 596:quantum/quantum.c ****                         break;
 597:quantum/quantum.c ****                     case MAGIC_UNSWAP_LCTL_LGUI:
 598:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = false;
 599:quantum/quantum.c ****                         break;
 600:quantum/quantum.c ****                     case MAGIC_UNSWAP_RCTL_RGUI:
 601:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = false;
 602:quantum/quantum.c ****                         break;
 603:quantum/quantum.c ****                     case MAGIC_UNNO_GUI:
 604:quantum/quantum.c ****                         keymap_config.no_gui = false;
 605:quantum/quantum.c ****                         break;
 606:quantum/quantum.c ****                     case MAGIC_UNSWAP_GRAVE_ESC:
 607:quantum/quantum.c ****                         keymap_config.swap_grave_esc = false;
 608:quantum/quantum.c ****                         break;
 609:quantum/quantum.c ****                     case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 610:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = false;
 611:quantum/quantum.c ****                         break;
 612:quantum/quantum.c ****                     case MAGIC_UNHOST_NKRO:
 613:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 614:quantum/quantum.c ****                         keymap_config.nkro = false;
 615:quantum/quantum.c ****                         break;
 616:quantum/quantum.c ****                     case MAGIC_UNSWAP_ALT_GUI:
 617:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = false;
 618:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 619:quantum/quantum.c ****                         PLAY_SONG(ag_norm_song);
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c ****                         break;
 622:quantum/quantum.c ****                     case MAGIC_UNSWAP_CTL_GUI:
 623:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = false;
 624:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 625:quantum/quantum.c ****                         PLAY_SONG(cg_norm_song);
 626:quantum/quantum.c **** #endif
 627:quantum/quantum.c ****                         break;
 628:quantum/quantum.c ****                     case MAGIC_TOGGLE_ALT_GUI:
 629:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 630:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 631:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 632:quantum/quantum.c ****                         if (keymap_config.swap_ralt_rgui) {
 633:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 634:quantum/quantum.c ****                         } else {
 635:quantum/quantum.c ****                             PLAY_SONG(ag_norm_song);
 636:quantum/quantum.c ****                         }
 637:quantum/quantum.c **** #endif
 638:quantum/quantum.c ****                         break;
 639:quantum/quantum.c ****                     case MAGIC_TOGGLE_CTL_GUI:
 640:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = !keymap_config.swap_lctl_lgui;
 641:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 642:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 643:quantum/quantum.c ****                         if (keymap_config.swap_rctl_rgui) {
 644:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 645:quantum/quantum.c ****                         } else {
 646:quantum/quantum.c ****                             PLAY_SONG(cg_norm_song);
 647:quantum/quantum.c ****                         }
 648:quantum/quantum.c **** #endif
 649:quantum/quantum.c ****                         break;
 650:quantum/quantum.c ****                     case MAGIC_TOGGLE_NKRO:
 651:quantum/quantum.c ****                         clear_keyboard();  // clear first buffer to prevent stuck keys
 652:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 653:quantum/quantum.c ****                         break;
 654:quantum/quantum.c ****                     case MAGIC_EE_HANDS_LEFT:
 655:quantum/quantum.c ****                         eeconfig_update_handedness(true);
 656:quantum/quantum.c ****                         break;
 657:quantum/quantum.c ****                     case MAGIC_EE_HANDS_RIGHT:
 658:quantum/quantum.c ****                         eeconfig_update_handedness(false);
 659:quantum/quantum.c ****                         break;
 660:quantum/quantum.c ****                     default:
 661:quantum/quantum.c ****                         break;
 662:quantum/quantum.c ****                 }
 663:quantum/quantum.c ****                 eeconfig_update_keymap(keymap_config.raw);
 664:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 665:quantum/quantum.c **** 
 666:quantum/quantum.c ****                 return false;
 667:quantum/quantum.c ****             }
 668:quantum/quantum.c ****             break;
 669:quantum/quantum.c **** 
 670:quantum/quantum.c ****         case GRAVE_ESC: {
 671:quantum/quantum.c ****             uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT) | MOD_BIT(KC_L
 672:quantum/quantum.c **** 
 673:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 674:quantum/quantum.c ****             // if ALT is pressed, ESC is always sent
 675:quantum/quantum.c ****             // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 676:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 677:quantum/quantum.c ****                 shifted = 0;
 678:quantum/quantum.c ****             }
 679:quantum/quantum.c **** #endif
 680:quantum/quantum.c **** 
 681:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 682:quantum/quantum.c ****             // if CTRL is pressed, ESC is always sent
 683:quantum/quantum.c ****             // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 684:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 685:quantum/quantum.c ****                 shifted = 0;
 686:quantum/quantum.c ****             }
 687:quantum/quantum.c **** #endif
 688:quantum/quantum.c **** 
 689:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 690:quantum/quantum.c ****             // if GUI is pressed, ESC is always sent
 691:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 692:quantum/quantum.c ****                 shifted = 0;
 693:quantum/quantum.c ****             }
 694:quantum/quantum.c **** #endif
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 697:quantum/quantum.c ****             // if SHIFT is pressed, ESC is always sent
 698:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 699:quantum/quantum.c ****                 shifted = 0;
 700:quantum/quantum.c ****             }
 701:quantum/quantum.c **** #endif
 702:quantum/quantum.c **** 
 703:quantum/quantum.c ****             if (record->event.pressed) {
 704:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 705:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 706:quantum/quantum.c ****             } else {
 707:quantum/quantum.c ****                 del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 708:quantum/quantum.c ****             }
 709:quantum/quantum.c **** 
 710:quantum/quantum.c ****             send_keyboard_report();
 711:quantum/quantum.c ****             return false;
 712:quantum/quantum.c ****         }
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 715:quantum/quantum.c ****         case BL_BRTG: {
 716:quantum/quantum.c ****             if (record->event.pressed) {
 717:quantum/quantum.c ****                 backlight_toggle_breathing();
 718:quantum/quantum.c ****             }
 719:quantum/quantum.c ****             return false;
 720:quantum/quantum.c ****         }
 721:quantum/quantum.c **** #endif
 722:quantum/quantum.c ****     }
 723:quantum/quantum.c **** 
 724:quantum/quantum.c ****     return process_action_kb(record);
 725:quantum/quantum.c **** }
 726:quantum/quantum.c **** 
 727:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_shift_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 728:quantum/quantum.c **** 
 729:quantum/quantum.c ****                                                                     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1
 730:quantum/quantum.c **** 
 731:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_altgr_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 732:quantum/quantum.c **** 
 733:quantum/quantum.c ****                                                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 734:quantum/quantum.c **** 
 735:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {// NUL   SOH      STX     
 736:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 737:quantum/quantum.c ****                                                                          // BS    TAB      LF      
 738:quantum/quantum.c ****                                                                          KC_BSPC, KC_TAB, KC_ENT, X
 739:quantum/quantum.c ****                                                                          // DLE   DC1      DC2     
 740:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 741:quantum/quantum.c ****                                                                          // CAN   EM       SUB     
 742:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 743:quantum/quantum.c **** 
 744:quantum/quantum.c ****                                                                          //       !        "       
 745:quantum/quantum.c ****                                                                          KC_SPC, KC_1, KC_QUOT, KC_
 746:quantum/quantum.c ****                                                                          // (     )        *       
 747:quantum/quantum.c ****                                                                          KC_9, KC_0, KC_8, KC_EQL, 
 748:quantum/quantum.c ****                                                                          // 0     1        2       
 749:quantum/quantum.c ****                                                                          KC_0, KC_1, KC_2, KC_3, KC
 750:quantum/quantum.c ****                                                                          // 8     9        :       
 751:quantum/quantum.c ****                                                                          KC_8, KC_9, KC_SCLN, KC_SC
 752:quantum/quantum.c ****                                                                          // @     A        B       
 753:quantum/quantum.c ****                                                                          KC_2, KC_A, KC_B, KC_C, KC
 754:quantum/quantum.c ****                                                                          // H     I        J       
 755:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 756:quantum/quantum.c ****                                                                          // P     Q        R       
 757:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 758:quantum/quantum.c ****                                                                          // X     Y        Z       
 759:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 760:quantum/quantum.c ****                                                                          // `     a        b       
 761:quantum/quantum.c ****                                                                          KC_GRV, KC_A, KC_B, KC_C, 
 762:quantum/quantum.c ****                                                                          // h     i        j       
 763:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 764:quantum/quantum.c ****                                                                          // p     q        r       
 765:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 766:quantum/quantum.c ****                                                                          // x     y        z       
 767:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 768:quantum/quantum.c **** 
 769:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 770:quantum/quantum.c **** 
 771:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 772:quantum/quantum.c **** 
 773:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 774:quantum/quantum.c ****     while (1) {
 775:quantum/quantum.c ****         char ascii_code = *str;
 776:quantum/quantum.c ****         if (!ascii_code) break;
 777:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 778:quantum/quantum.c ****             // tap
 779:quantum/quantum.c ****             uint8_t keycode = *(++str);
 780:quantum/quantum.c ****             register_code(keycode);
 781:quantum/quantum.c ****             unregister_code(keycode);
 782:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 783:quantum/quantum.c ****             // down
 784:quantum/quantum.c ****             uint8_t keycode = *(++str);
 785:quantum/quantum.c ****             register_code(keycode);
 786:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 787:quantum/quantum.c ****             // up
 788:quantum/quantum.c ****             uint8_t keycode = *(++str);
 789:quantum/quantum.c ****             unregister_code(keycode);
 790:quantum/quantum.c ****         } else {
 791:quantum/quantum.c ****             send_char(ascii_code);
 792:quantum/quantum.c ****         }
 793:quantum/quantum.c ****         ++str;
 794:quantum/quantum.c ****         // interval
 795:quantum/quantum.c ****         {
 796:quantum/quantum.c ****             uint8_t ms = interval;
 797:quantum/quantum.c ****             while (ms--) wait_ms(1);
 798:quantum/quantum.c ****         }
 799:quantum/quantum.c ****     }
 800:quantum/quantum.c **** }
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 803:quantum/quantum.c ****     while (1) {
 804:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 805:quantum/quantum.c ****         if (!ascii_code) break;
 806:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 807:quantum/quantum.c ****             // tap
 808:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 809:quantum/quantum.c ****             register_code(keycode);
 810:quantum/quantum.c ****             unregister_code(keycode);
 811:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 812:quantum/quantum.c ****             // down
 813:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 814:quantum/quantum.c ****             register_code(keycode);
 815:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 816:quantum/quantum.c ****             // up
 817:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 818:quantum/quantum.c ****             unregister_code(keycode);
 819:quantum/quantum.c ****         } else {
 820:quantum/quantum.c ****             send_char(ascii_code);
 821:quantum/quantum.c ****         }
 822:quantum/quantum.c ****         ++str;
 823:quantum/quantum.c ****         // interval
 824:quantum/quantum.c ****         {
 825:quantum/quantum.c ****             uint8_t ms = interval;
 826:quantum/quantum.c ****             while (ms--) wait_ms(1);
 827:quantum/quantum.c ****         }
 828:quantum/quantum.c ****     }
 829:quantum/quantum.c **** }
 830:quantum/quantum.c **** 
 831:quantum/quantum.c **** void send_char(char ascii_code) {
 678               		.loc 1 831 33 is_stmt 1 view -0
 679               		.cfi_startproc
 680               		.loc 1 831 33 is_stmt 0 view .LVU114
 681 0000 1F93      		push r17
 682               	.LCFI13:
 683               		.cfi_def_cfa_offset 3
 684               		.cfi_offset 17, -2
 685 0002 CF93      		push r28
 686               	.LCFI14:
 687               		.cfi_def_cfa_offset 4
 688               		.cfi_offset 28, -3
 689 0004 DF93      		push r29
 690               	.LCFI15:
 691               		.cfi_def_cfa_offset 5
 692               		.cfi_offset 29, -4
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 3 */
 696               	.L__stack_usage = 3
 832:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 697               		.loc 1 832 5 is_stmt 1 view .LVU115
 698               	.LBB26:
 699               		.loc 1 832 26 view .LVU116
 700 0006 90E0      		ldi r25,0
 701               	.LVL46:
 702               		.loc 1 832 26 view .LVU117
 703               		.loc 1 832 26 view .LVU118
 704 0008 FC01      		movw r30,r24
 705 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 706 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 707               	.LVL47:
 708               		.loc 1 832 26 is_stmt 0 view .LVU119
 709               	/* #APP */
 710               	 ;  832 "quantum/quantum.c" 1
 711 000e 1491      		lpm r17, Z
 712               		
 713               	 ;  0 "" 2
 714               	.LVL48:
 715               		.loc 1 832 26 is_stmt 1 view .LVU120
 716               		.loc 1 832 26 is_stmt 0 view .LVU121
 717               	/* #NOAPP */
 718               	.LBE26:
 833:quantum/quantum.c ****     bool    is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 719               		.loc 1 833 5 is_stmt 1 view .LVU122
 720               	.LBB27:
 721               		.loc 1 833 26 view .LVU123
 722               		.loc 1 833 26 view .LVU124
 723               		.loc 1 833 26 view .LVU125
 724 0010 FC01      		movw r30,r24
 725               	.LVL49:
 726               		.loc 1 833 26 is_stmt 0 view .LVU126
 727 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 728 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 729               	.LVL50:
 730               		.loc 1 833 26 view .LVU127
 731               	/* #APP */
 732               	 ;  833 "quantum/quantum.c" 1
 733 0016 D491      		lpm r29, Z
 734               		
 735               	 ;  0 "" 2
 736               	.LVL51:
 737               		.loc 1 833 26 is_stmt 1 view .LVU128
 738               		.loc 1 833 26 is_stmt 0 view .LVU129
 739               	/* #NOAPP */
 740               	.LBE27:
 834:quantum/quantum.c ****     bool    is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 741               		.loc 1 834 5 is_stmt 1 view .LVU130
 742               	.LBB28:
 743               		.loc 1 834 26 view .LVU131
 744               		.loc 1 834 26 view .LVU132
 745               		.loc 1 834 26 view .LVU133
 746 0018 8050      		subi r24,lo8(-(ascii_to_altgr_lut))
 747 001a 9040      		sbci r25,hi8(-(ascii_to_altgr_lut))
 748               	.LVL52:
 749               		.loc 1 834 26 is_stmt 0 view .LVU134
 750 001c FC01      		movw r30,r24
 751               	.LVL53:
 752               		.loc 1 834 26 view .LVU135
 753               	/* #APP */
 754               	 ;  834 "quantum/quantum.c" 1
 755 001e C491      		lpm r28, Z
 756               		
 757               	 ;  0 "" 2
 758               	.LVL54:
 759               		.loc 1 834 26 is_stmt 1 view .LVU136
 760               		.loc 1 834 26 is_stmt 0 view .LVU137
 761               	/* #NOAPP */
 762               	.LBE28:
 835:quantum/quantum.c **** 
 836:quantum/quantum.c ****     if (is_shifted) {
 763               		.loc 1 836 5 is_stmt 1 view .LVU138
 764               		.loc 1 836 8 is_stmt 0 view .LVU139
 765 0020 DD23      		tst r29
 766 0022 01F0      		breq .L61
 837:quantum/quantum.c ****         register_code(KC_LSFT);
 767               		.loc 1 837 9 is_stmt 1 view .LVU140
 768 0024 81EE      		ldi r24,lo8(-31)
 769               	.LVL55:
 770               		.loc 1 837 9 is_stmt 0 view .LVU141
 771 0026 0E94 0000 		call register_code
 772               	.LVL56:
 773               	.L61:
 838:quantum/quantum.c ****     }
 839:quantum/quantum.c ****     if (is_altgred) {
 774               		.loc 1 839 5 is_stmt 1 view .LVU142
 775               		.loc 1 839 8 is_stmt 0 view .LVU143
 776 002a CC23      		tst r28
 777 002c 01F0      		breq .L62
 840:quantum/quantum.c ****         register_code(KC_RALT);
 778               		.loc 1 840 9 is_stmt 1 view .LVU144
 779 002e 86EE      		ldi r24,lo8(-26)
 780 0030 0E94 0000 		call register_code
 781               	.LVL57:
 782               	.L62:
 841:quantum/quantum.c ****     }
 842:quantum/quantum.c ****     tap_code(keycode);
 783               		.loc 1 842 5 view .LVU145
 784 0034 812F      		mov r24,r17
 785 0036 0E94 0000 		call tap_code
 786               	.LVL58:
 843:quantum/quantum.c ****     if (is_altgred) {
 787               		.loc 1 843 5 view .LVU146
 788               		.loc 1 843 8 is_stmt 0 view .LVU147
 789 003a CC23      		tst r28
 790 003c 01F0      		breq .L63
 844:quantum/quantum.c ****         unregister_code(KC_RALT);
 791               		.loc 1 844 9 is_stmt 1 view .LVU148
 792 003e 86EE      		ldi r24,lo8(-26)
 793 0040 0E94 0000 		call unregister_code
 794               	.LVL59:
 795               	.L63:
 845:quantum/quantum.c ****     }
 846:quantum/quantum.c ****     if (is_shifted) {
 796               		.loc 1 846 5 view .LVU149
 797               		.loc 1 846 8 is_stmt 0 view .LVU150
 798 0044 DD23      		tst r29
 799 0046 01F0      		breq .L60
 847:quantum/quantum.c ****         unregister_code(KC_LSFT);
 800               		.loc 1 847 9 is_stmt 1 view .LVU151
 801 0048 81EE      		ldi r24,lo8(-31)
 802               	/* epilogue start */
 848:quantum/quantum.c ****     }
 849:quantum/quantum.c **** }
 803               		.loc 1 849 1 is_stmt 0 view .LVU152
 804 004a DF91      		pop r29
 805               	.LVL60:
 806               		.loc 1 849 1 view .LVU153
 807 004c CF91      		pop r28
 808               	.LVL61:
 809               		.loc 1 849 1 view .LVU154
 810 004e 1F91      		pop r17
 811               	.LVL62:
 847:quantum/quantum.c ****         unregister_code(KC_LSFT);
 812               		.loc 1 847 9 view .LVU155
 813 0050 0C94 0000 		jmp unregister_code
 814               	.LVL63:
 815               	.L60:
 816               	/* epilogue start */
 817               		.loc 1 849 1 view .LVU156
 818 0054 DF91      		pop r29
 819               	.LVL64:
 820               		.loc 1 849 1 view .LVU157
 821 0056 CF91      		pop r28
 822               	.LVL65:
 823               		.loc 1 849 1 view .LVU158
 824 0058 1F91      		pop r17
 825               	.LVL66:
 826               		.loc 1 849 1 view .LVU159
 827 005a 0895      		ret
 828               		.cfi_endproc
 829               	.LFE45:
 831               		.section	.text.send_string_with_delay,"ax",@progbits
 832               	.global	send_string_with_delay
 834               	send_string_with_delay:
 835               	.LVL67:
 836               	.LFB43:
 773:quantum/quantum.c ****     while (1) {
 837               		.loc 1 773 64 is_stmt 1 view -0
 838               		.cfi_startproc
 773:quantum/quantum.c ****     while (1) {
 839               		.loc 1 773 64 is_stmt 0 view .LVU161
 840 0000 FF92      		push r15
 841               	.LCFI16:
 842               		.cfi_def_cfa_offset 3
 843               		.cfi_offset 15, -2
 844 0002 0F93      		push r16
 845               	.LCFI17:
 846               		.cfi_def_cfa_offset 4
 847               		.cfi_offset 16, -3
 848 0004 1F93      		push r17
 849               	.LCFI18:
 850               		.cfi_def_cfa_offset 5
 851               		.cfi_offset 17, -4
 852 0006 CF93      		push r28
 853               	.LCFI19:
 854               		.cfi_def_cfa_offset 6
 855               		.cfi_offset 28, -5
 856 0008 DF93      		push r29
 857               	.LCFI20:
 858               		.cfi_def_cfa_offset 7
 859               		.cfi_offset 29, -6
 860               	/* prologue: function */
 861               	/* frame size = 0 */
 862               	/* stack size = 5 */
 863               	.L__stack_usage = 5
 864 000a EC01      		movw r28,r24
 865 000c F62E      		mov r15,r22
 866               	.LVL68:
 867               	.L82:
 774:quantum/quantum.c ****         char ascii_code = *str;
 868               		.loc 1 774 5 is_stmt 1 view .LVU162
 869               	.LBB29:
 775:quantum/quantum.c ****         if (!ascii_code) break;
 870               		.loc 1 775 9 view .LVU163
 775:quantum/quantum.c ****         if (!ascii_code) break;
 871               		.loc 1 775 14 is_stmt 0 view .LVU164
 872 000e 8881      		ld r24,Y
 873               	.LVL69:
 776:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 874               		.loc 1 776 9 is_stmt 1 view .LVU165
 776:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 875               		.loc 1 776 12 is_stmt 0 view .LVU166
 876 0010 8823      		tst r24
 877 0012 01F0      		breq .L74
 777:quantum/quantum.c ****             // tap
 878               		.loc 1 777 9 is_stmt 1 view .LVU167
 879 0014 8E01      		movw r16,r28
 880 0016 0F5F      		subi r16,-1
 881 0018 1F4F      		sbci r17,-1
 777:quantum/quantum.c ****             // tap
 882               		.loc 1 777 12 is_stmt 0 view .LVU168
 883 001a 8130      		cpi r24,lo8(1)
 884 001c 01F4      		brne .L76
 885               	.LBB30:
 779:quantum/quantum.c ****             register_code(keycode);
 886               		.loc 1 779 13 is_stmt 1 view .LVU169
 887               	.LVL70:
 779:quantum/quantum.c ****             register_code(keycode);
 888               		.loc 1 779 21 is_stmt 0 view .LVU170
 889 001e C981      		ldd r28,Y+1
 890               	.LVL71:
 780:quantum/quantum.c ****             unregister_code(keycode);
 891               		.loc 1 780 13 is_stmt 1 view .LVU171
 892 0020 8C2F      		mov r24,r28
 893               	.LVL72:
 780:quantum/quantum.c ****             unregister_code(keycode);
 894               		.loc 1 780 13 is_stmt 0 view .LVU172
 895 0022 0E94 0000 		call register_code
 896               	.LVL73:
 781:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 897               		.loc 1 781 13 is_stmt 1 view .LVU173
 898 0026 8C2F      		mov r24,r28
 899               	.LVL74:
 900               	.L83:
 781:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 901               		.loc 1 781 13 is_stmt 0 view .LVU174
 902               	.LBE30:
 903               	.LBB31:
 789:quantum/quantum.c ****         } else {
 904               		.loc 1 789 13 view .LVU175
 905 0028 0E94 0000 		call unregister_code
 906               	.LVL75:
 907               	.LBE31:
 908 002c 00C0      		rjmp .L77
 909               	.LVL76:
 910               	.L76:
 782:quantum/quantum.c ****             // down
 911               		.loc 1 782 16 is_stmt 1 view .LVU176
 782:quantum/quantum.c ****             // down
 912               		.loc 1 782 19 is_stmt 0 view .LVU177
 913 002e 8230      		cpi r24,lo8(2)
 914 0030 01F4      		brne .L78
 915               	.LBB32:
 784:quantum/quantum.c ****             register_code(keycode);
 916               		.loc 1 784 13 is_stmt 1 view .LVU178
 917               	.LVL77:
 785:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 918               		.loc 1 785 13 view .LVU179
 919 0032 8981      		ldd r24,Y+1
 920               	.LVL78:
 785:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 921               		.loc 1 785 13 is_stmt 0 view .LVU180
 922 0034 0E94 0000 		call register_code
 923               	.LVL79:
 924               	.L77:
 785:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 925               		.loc 1 785 13 view .LVU181
 926               	.LBE32:
 793:quantum/quantum.c ****         // interval
 927               		.loc 1 793 9 is_stmt 1 view .LVU182
 928 0038 E801      		movw r28,r16
 929 003a 2196      		adiw r28,1
 930               	.LVL80:
 931               	.LBB33:
 796:quantum/quantum.c ****             while (ms--) wait_ms(1);
 932               		.loc 1 796 13 view .LVU183
 797:quantum/quantum.c ****         }
 933               		.loc 1 797 13 view .LVU184
 796:quantum/quantum.c ****             while (ms--) wait_ms(1);
 934               		.loc 1 796 21 is_stmt 0 view .LVU185
 935 003c 8F2D      		mov r24,r15
 936               	.LVL81:
 937               	.L80:
 797:quantum/quantum.c ****         }
 938               		.loc 1 797 19 is_stmt 1 discriminator 1 view .LVU186
 797:quantum/quantum.c ****         }
 939               		.loc 1 797 22 is_stmt 0 discriminator 1 view .LVU187
 940               	.LVL82:
 941 003e 8150      		subi r24,1
 942 0040 00F0      		brcs .L82
 797:quantum/quantum.c ****         }
 943               		.loc 1 797 26 is_stmt 1 view .LVU188
 944               	.LBB34:
 945               	.LBI34:
 946               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 947               		.loc 2 166 1 view .LVU189
 948               	.LBB35:
 167:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
 949               		.loc 2 168 2 view .LVU190
 169:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 950               		.loc 2 172 2 view .LVU191
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 951               		.loc 2 173 2 view .LVU192
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 952               		.loc 2 174 2 view .LVU193
 175:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 953               		.loc 2 184 3 view .LVU194
 185:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 954               		.loc 2 187 2 view .LVU195
 955 0042 EFE9      		ldi r30,lo8(3999)
 956 0044 FFE0      		ldi r31,hi8(3999)
 957 0046 3197      	1:	sbiw r30,1
 958 0048 01F4      		brne 1b
 959 004a 00C0      		rjmp .
 960 004c 0000      		nop
 961 004e 00C0      		rjmp .L80
 962               	.LVL83:
 963               	.L78:
 964               		.loc 2 187 2 is_stmt 0 view .LVU196
 965               	.LBE35:
 966               	.LBE34:
 967               	.LBE33:
 786:quantum/quantum.c ****             // up
 968               		.loc 1 786 16 is_stmt 1 view .LVU197
 786:quantum/quantum.c ****             // up
 969               		.loc 1 786 19 is_stmt 0 view .LVU198
 970 0050 8330      		cpi r24,lo8(3)
 971 0052 01F4      		brne .L79
 972               	.LBB36:
 788:quantum/quantum.c ****             unregister_code(keycode);
 973               		.loc 1 788 13 is_stmt 1 view .LVU199
 974               	.LVL84:
 789:quantum/quantum.c ****         } else {
 975               		.loc 1 789 13 view .LVU200
 976 0054 8981      		ldd r24,Y+1
 977               	.LVL85:
 789:quantum/quantum.c ****         } else {
 978               		.loc 1 789 13 is_stmt 0 view .LVU201
 979 0056 00C0      		rjmp .L83
 980               	.LVL86:
 981               	.L79:
 789:quantum/quantum.c ****         } else {
 982               		.loc 1 789 13 view .LVU202
 983               	.LBE36:
 791:quantum/quantum.c ****         }
 984               		.loc 1 791 13 is_stmt 1 view .LVU203
 985 0058 0E94 0000 		call send_char
 986               	.LVL87:
 791:quantum/quantum.c ****         }
 987               		.loc 1 791 13 is_stmt 0 view .LVU204
 988 005c 8E01      		movw r16,r28
 989 005e 00C0      		rjmp .L77
 990               	.LVL88:
 991               	.L74:
 992               	/* epilogue start */
 791:quantum/quantum.c ****         }
 993               		.loc 1 791 13 view .LVU205
 994               	.LBE29:
 800:quantum/quantum.c **** 
 995               		.loc 1 800 1 view .LVU206
 996 0060 DF91      		pop r29
 997 0062 CF91      		pop r28
 998               	.LVL89:
 800:quantum/quantum.c **** 
 999               		.loc 1 800 1 view .LVU207
 1000 0064 1F91      		pop r17
 1001 0066 0F91      		pop r16
 1002 0068 FF90      		pop r15
 1003               	.LVL90:
 800:quantum/quantum.c **** 
 1004               		.loc 1 800 1 view .LVU208
 1005 006a 0895      		ret
 1006               		.cfi_endproc
 1007               	.LFE43:
 1009               		.section	.text.send_string,"ax",@progbits
 1010               	.global	send_string
 1012               	send_string:
 1013               	.LVL91:
 1014               	.LFB41:
 769:quantum/quantum.c **** 
 1015               		.loc 1 769 35 is_stmt 1 view -0
 1016               		.cfi_startproc
 1017               	/* prologue: function */
 1018               	/* frame size = 0 */
 1019               	/* stack size = 0 */
 1020               	.L__stack_usage = 0
 769:quantum/quantum.c **** 
 1021               		.loc 1 769 37 view .LVU210
 1022 0000 60E0      		ldi r22,0
 1023 0002 0C94 0000 		jmp send_string_with_delay
 1024               	.LVL92:
 769:quantum/quantum.c **** 
 1025               		.loc 1 769 37 is_stmt 0 view .LVU211
 1026               		.cfi_endproc
 1027               	.LFE41:
 1029               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1030               	.global	send_string_with_delay_P
 1032               	send_string_with_delay_P:
 1033               	.LVL93:
 1034               	.LFB44:
 802:quantum/quantum.c ****     while (1) {
 1035               		.loc 1 802 66 is_stmt 1 view -0
 1036               		.cfi_startproc
 802:quantum/quantum.c ****     while (1) {
 1037               		.loc 1 802 66 is_stmt 0 view .LVU213
 1038 0000 FF92      		push r15
 1039               	.LCFI21:
 1040               		.cfi_def_cfa_offset 3
 1041               		.cfi_offset 15, -2
 1042 0002 0F93      		push r16
 1043               	.LCFI22:
 1044               		.cfi_def_cfa_offset 4
 1045               		.cfi_offset 16, -3
 1046 0004 1F93      		push r17
 1047               	.LCFI23:
 1048               		.cfi_def_cfa_offset 5
 1049               		.cfi_offset 17, -4
 1050 0006 CF93      		push r28
 1051               	.LCFI24:
 1052               		.cfi_def_cfa_offset 6
 1053               		.cfi_offset 28, -5
 1054 0008 DF93      		push r29
 1055               	.LCFI25:
 1056               		.cfi_def_cfa_offset 7
 1057               		.cfi_offset 29, -6
 1058               	/* prologue: function */
 1059               	/* frame size = 0 */
 1060               	/* stack size = 5 */
 1061               	.L__stack_usage = 5
 1062 000a 8C01      		movw r16,r24
 1063 000c F62E      		mov r15,r22
 1064               	.LVL94:
 1065               	.L93:
 803:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1066               		.loc 1 803 5 is_stmt 1 view .LVU214
 1067               	.LBB37:
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1068               		.loc 1 804 9 view .LVU215
 1069               	.LBB38:
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1070               		.loc 1 804 27 view .LVU216
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1071               		.loc 1 804 27 view .LVU217
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1072               		.loc 1 804 27 view .LVU218
 1073 000e F801      		movw r30,r16
 1074               	/* #APP */
 1075               	 ;  804 "quantum/quantum.c" 1
 1076 0010 8491      		lpm r24, Z
 1077               		
 1078               	 ;  0 "" 2
 1079               	.LVL95:
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1080               		.loc 1 804 27 view .LVU219
 804:quantum/quantum.c ****         if (!ascii_code) break;
 1081               		.loc 1 804 27 is_stmt 0 view .LVU220
 1082               	/* #NOAPP */
 1083               	.LBE38:
 805:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1084               		.loc 1 805 9 is_stmt 1 view .LVU221
 805:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1085               		.loc 1 805 12 is_stmt 0 view .LVU222
 1086 0012 8823      		tst r24
 1087 0014 01F0      		breq .L85
 806:quantum/quantum.c ****             // tap
 1088               		.loc 1 806 9 is_stmt 1 view .LVU223
 1089 0016 E801      		movw r28,r16
 1090 0018 2196      		adiw r28,1
 806:quantum/quantum.c ****             // tap
 1091               		.loc 1 806 12 is_stmt 0 view .LVU224
 1092 001a 8130      		cpi r24,lo8(1)
 1093 001c 01F4      		brne .L87
 1094               	.LBB39:
 808:quantum/quantum.c ****             register_code(keycode);
 1095               		.loc 1 808 13 is_stmt 1 view .LVU225
 1096               	.LBB40:
 808:quantum/quantum.c ****             register_code(keycode);
 1097               		.loc 1 808 31 view .LVU226
 1098               	.LVL96:
 808:quantum/quantum.c ****             register_code(keycode);
 1099               		.loc 1 808 31 view .LVU227
 808:quantum/quantum.c ****             register_code(keycode);
 1100               		.loc 1 808 31 view .LVU228
 1101 001e FE01      		movw r30,r28
 1102               	/* #APP */
 1103               	 ;  808 "quantum/quantum.c" 1
 1104 0020 1491      		lpm r17, Z
 1105               		
 1106               	 ;  0 "" 2
 1107               	.LVL97:
 808:quantum/quantum.c ****             register_code(keycode);
 1108               		.loc 1 808 31 view .LVU229
 808:quantum/quantum.c ****             register_code(keycode);
 1109               		.loc 1 808 31 is_stmt 0 view .LVU230
 1110               	/* #NOAPP */
 1111               	.LBE40:
 809:quantum/quantum.c ****             unregister_code(keycode);
 1112               		.loc 1 809 13 is_stmt 1 view .LVU231
 1113 0022 812F      		mov r24,r17
 1114               	.LVL98:
 809:quantum/quantum.c ****             unregister_code(keycode);
 1115               		.loc 1 809 13 is_stmt 0 view .LVU232
 1116 0024 0E94 0000 		call register_code
 1117               	.LVL99:
 810:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1118               		.loc 1 810 13 is_stmt 1 view .LVU233
 1119 0028 812F      		mov r24,r17
 1120               	.LVL100:
 1121               	.L94:
 810:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1122               		.loc 1 810 13 is_stmt 0 view .LVU234
 1123               	.LBE39:
 1124               	.LBB41:
 1125               	.LBB42:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1126               		.loc 1 817 31 is_stmt 1 view .LVU235
 817:quantum/quantum.c ****             unregister_code(keycode);
 1127               		.loc 1 817 31 is_stmt 0 view .LVU236
 1128               	.LBE42:
 818:quantum/quantum.c ****         } else {
 1129               		.loc 1 818 13 is_stmt 1 view .LVU237
 1130 002a 0E94 0000 		call unregister_code
 1131               	.LVL101:
 818:quantum/quantum.c ****         } else {
 1132               		.loc 1 818 13 is_stmt 0 view .LVU238
 1133               	.LBE41:
 1134 002e 00C0      		rjmp .L88
 1135               	.LVL102:
 1136               	.L87:
 811:quantum/quantum.c ****             // down
 1137               		.loc 1 811 16 is_stmt 1 view .LVU239
 811:quantum/quantum.c ****             // down
 1138               		.loc 1 811 19 is_stmt 0 view .LVU240
 1139 0030 8230      		cpi r24,lo8(2)
 1140 0032 01F4      		brne .L89
 1141               	.LBB44:
 813:quantum/quantum.c ****             register_code(keycode);
 1142               		.loc 1 813 13 is_stmt 1 view .LVU241
 1143               	.LBB45:
 813:quantum/quantum.c ****             register_code(keycode);
 1144               		.loc 1 813 31 view .LVU242
 1145               	.LVL103:
 813:quantum/quantum.c ****             register_code(keycode);
 1146               		.loc 1 813 31 view .LVU243
 813:quantum/quantum.c ****             register_code(keycode);
 1147               		.loc 1 813 31 view .LVU244
 1148 0034 FE01      		movw r30,r28
 1149               	/* #APP */
 1150               	 ;  813 "quantum/quantum.c" 1
 1151 0036 8491      		lpm r24, Z
 1152               		
 1153               	 ;  0 "" 2
 1154               	.LVL104:
 813:quantum/quantum.c ****             register_code(keycode);
 1155               		.loc 1 813 31 view .LVU245
 813:quantum/quantum.c ****             register_code(keycode);
 1156               		.loc 1 813 31 is_stmt 0 view .LVU246
 1157               	/* #NOAPP */
 1158               	.LBE45:
 814:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1159               		.loc 1 814 13 is_stmt 1 view .LVU247
 1160 0038 0E94 0000 		call register_code
 1161               	.LVL105:
 1162               	.L88:
 814:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1163               		.loc 1 814 13 is_stmt 0 view .LVU248
 1164               	.LBE44:
 822:quantum/quantum.c ****         // interval
 1165               		.loc 1 822 9 is_stmt 1 view .LVU249
 822:quantum/quantum.c ****         // interval
 1166               		.loc 1 822 9 is_stmt 0 view .LVU250
 1167 003c 8E01      		movw r16,r28
 1168 003e 0F5F      		subi r16,-1
 1169 0040 1F4F      		sbci r17,-1
 1170               	.LVL106:
 1171               	.LBB46:
 825:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1172               		.loc 1 825 13 is_stmt 1 view .LVU251
 826:quantum/quantum.c ****         }
 1173               		.loc 1 826 13 view .LVU252
 825:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1174               		.loc 1 825 21 is_stmt 0 view .LVU253
 1175 0042 8F2D      		mov r24,r15
 1176               	.LVL107:
 1177               	.L91:
 826:quantum/quantum.c ****         }
 1178               		.loc 1 826 19 is_stmt 1 discriminator 1 view .LVU254
 826:quantum/quantum.c ****         }
 1179               		.loc 1 826 22 is_stmt 0 discriminator 1 view .LVU255
 1180               	.LVL108:
 1181 0044 8150      		subi r24,1
 1182 0046 00F0      		brcs .L93
 826:quantum/quantum.c ****         }
 1183               		.loc 1 826 26 is_stmt 1 view .LVU256
 1184               	.LBB47:
 1185               	.LBI47:
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 1186               		.loc 2 166 1 view .LVU257
 1187               	.LBB48:
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1188               		.loc 2 168 2 view .LVU258
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1189               		.loc 2 172 2 view .LVU259
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1190               		.loc 2 173 2 view .LVU260
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 1191               		.loc 2 174 2 view .LVU261
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 1192               		.loc 2 184 3 view .LVU262
 1193               		.loc 2 187 2 view .LVU263
 1194 0048 EFE9      		ldi r30,lo8(3999)
 1195 004a FFE0      		ldi r31,hi8(3999)
 1196 004c 3197      	1:	sbiw r30,1
 1197 004e 01F4      		brne 1b
 1198 0050 00C0      		rjmp .
 1199 0052 0000      		nop
 1200 0054 00C0      		rjmp .L91
 1201               	.LVL109:
 1202               	.L89:
 1203               		.loc 2 187 2 is_stmt 0 view .LVU264
 1204               	.LBE48:
 1205               	.LBE47:
 1206               	.LBE46:
 815:quantum/quantum.c ****             // up
 1207               		.loc 1 815 16 is_stmt 1 view .LVU265
 815:quantum/quantum.c ****             // up
 1208               		.loc 1 815 19 is_stmt 0 view .LVU266
 1209 0056 8330      		cpi r24,lo8(3)
 1210 0058 01F4      		brne .L90
 1211               	.LBB49:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1212               		.loc 1 817 13 is_stmt 1 view .LVU267
 1213               	.LBB43:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1214               		.loc 1 817 31 view .LVU268
 1215               	.LVL110:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1216               		.loc 1 817 31 view .LVU269
 817:quantum/quantum.c ****             unregister_code(keycode);
 1217               		.loc 1 817 31 view .LVU270
 1218 005a FE01      		movw r30,r28
 1219               	/* #APP */
 1220               	 ;  817 "quantum/quantum.c" 1
 1221 005c 8491      		lpm r24, Z
 1222               		
 1223               	 ;  0 "" 2
 1224               	.LVL111:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1225               		.loc 1 817 31 is_stmt 0 view .LVU271
 1226               	/* #NOAPP */
 1227 005e 00C0      		rjmp .L94
 1228               	.LVL112:
 1229               	.L90:
 817:quantum/quantum.c ****             unregister_code(keycode);
 1230               		.loc 1 817 31 view .LVU272
 1231               	.LBE43:
 1232               	.LBE49:
 820:quantum/quantum.c ****         }
 1233               		.loc 1 820 13 is_stmt 1 view .LVU273
 1234 0060 0E94 0000 		call send_char
 1235               	.LVL113:
 820:quantum/quantum.c ****         }
 1236               		.loc 1 820 13 is_stmt 0 view .LVU274
 1237 0064 E801      		movw r28,r16
 1238 0066 00C0      		rjmp .L88
 1239               	.LVL114:
 1240               	.L85:
 1241               	/* epilogue start */
 820:quantum/quantum.c ****         }
 1242               		.loc 1 820 13 view .LVU275
 1243               	.LBE37:
 829:quantum/quantum.c **** 
 1244               		.loc 1 829 1 view .LVU276
 1245 0068 DF91      		pop r29
 1246 006a CF91      		pop r28
 1247 006c 1F91      		pop r17
 1248 006e 0F91      		pop r16
 1249               	.LVL115:
 829:quantum/quantum.c **** 
 1250               		.loc 1 829 1 view .LVU277
 1251 0070 FF90      		pop r15
 1252               	.LVL116:
 829:quantum/quantum.c **** 
 1253               		.loc 1 829 1 view .LVU278
 1254 0072 0895      		ret
 1255               		.cfi_endproc
 1256               	.LFE44:
 1258               		.section	.text.send_string_P,"ax",@progbits
 1259               	.global	send_string_P
 1261               	send_string_P:
 1262               	.LVL117:
 1263               	.LFB42:
 771:quantum/quantum.c **** 
 1264               		.loc 1 771 37 is_stmt 1 view -0
 1265               		.cfi_startproc
 1266               	/* prologue: function */
 1267               	/* frame size = 0 */
 1268               	/* stack size = 0 */
 1269               	.L__stack_usage = 0
 771:quantum/quantum.c **** 
 1270               		.loc 1 771 39 view .LVU280
 1271 0000 60E0      		ldi r22,0
 1272 0002 0C94 0000 		jmp send_string_with_delay_P
 1273               	.LVL118:
 771:quantum/quantum.c **** 
 1274               		.loc 1 771 39 is_stmt 0 view .LVU281
 1275               		.cfi_endproc
 1276               	.LFE42:
 1278               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1279               	.global	set_single_persistent_default_layer
 1281               	set_single_persistent_default_layer:
 1282               	.LVL119:
 1283               	.LFB46:
 850:quantum/quantum.c **** 
 851:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1284               		.loc 1 851 65 is_stmt 1 view -0
 1285               		.cfi_startproc
 1286               		.loc 1 851 65 is_stmt 0 view .LVU283
 1287 0000 CF93      		push r28
 1288               	.LCFI26:
 1289               		.cfi_def_cfa_offset 3
 1290               		.cfi_offset 28, -2
 1291 0002 DF93      		push r29
 1292               	.LCFI27:
 1293               		.cfi_def_cfa_offset 4
 1294               		.cfi_offset 29, -3
 1295               	/* prologue: function */
 1296               	/* frame size = 0 */
 1297               	/* stack size = 2 */
 1298               	.L__stack_usage = 2
 852:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 853:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 854:quantum/quantum.c **** #endif
 855:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 1299               		.loc 1 855 5 is_stmt 1 view .LVU284
 1300               		.loc 1 855 38 is_stmt 0 view .LVU285
 1301 0004 C1E0      		ldi r28,lo8(1)
 1302 0006 D0E0      		ldi r29,0
 1303 0008 00C0      		rjmp 2f
 1304               		1:
 1305 000a CC0F      		lsl r28
 1306 000c DD1F      		rol r29
 1307               		2:
 1308 000e 8A95      		dec r24
 1309 0010 02F4      		brpl 1b
 1310               		.loc 1 855 5 view .LVU286
 1311 0012 8C2F      		mov r24,r28
 1312               	.LVL120:
 1313               		.loc 1 855 5 view .LVU287
 1314 0014 0E94 0000 		call eeconfig_update_default_layer
 1315               	.LVL121:
 856:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1316               		.loc 1 856 5 is_stmt 1 view .LVU288
 1317 0018 BE01      		movw r22,r28
 1318 001a 90E0      		ldi r25,0
 1319 001c 80E0      		ldi r24,0
 1320               	/* epilogue start */
 857:quantum/quantum.c **** }
 1321               		.loc 1 857 1 is_stmt 0 view .LVU289
 1322 001e DF91      		pop r29
 1323 0020 CF91      		pop r28
 856:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1324               		.loc 1 856 5 view .LVU290
 1325 0022 0C94 0000 		jmp default_layer_set
 1326               	.LVL122:
 1327               		.cfi_endproc
 1328               	.LFE46:
 1330               		.section	.text.update_tri_layer_state,"ax",@progbits
 1331               	.global	update_tri_layer_state
 1333               	update_tri_layer_state:
 1334               	.LVL123:
 1335               	.LFB47:
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 1336               		.loc 1 859 107 is_stmt 1 view -0
 1337               		.cfi_startproc
 1338               		.loc 1 859 107 is_stmt 0 view .LVU292
 1339 0000 8F92      		push r8
 1340               	.LCFI28:
 1341               		.cfi_def_cfa_offset 3
 1342               		.cfi_offset 8, -2
 1343 0002 9F92      		push r9
 1344               	.LCFI29:
 1345               		.cfi_def_cfa_offset 4
 1346               		.cfi_offset 9, -3
 1347 0004 AF92      		push r10
 1348               	.LCFI30:
 1349               		.cfi_def_cfa_offset 5
 1350               		.cfi_offset 10, -4
 1351 0006 BF92      		push r11
 1352               	.LCFI31:
 1353               		.cfi_def_cfa_offset 6
 1354               		.cfi_offset 11, -5
 1355 0008 CF92      		push r12
 1356               	.LCFI32:
 1357               		.cfi_def_cfa_offset 7
 1358               		.cfi_offset 12, -6
 1359 000a DF92      		push r13
 1360               	.LCFI33:
 1361               		.cfi_def_cfa_offset 8
 1362               		.cfi_offset 13, -7
 1363 000c EF92      		push r14
 1364               	.LCFI34:
 1365               		.cfi_def_cfa_offset 9
 1366               		.cfi_offset 14, -8
 1367 000e FF92      		push r15
 1368               	.LCFI35:
 1369               		.cfi_def_cfa_offset 10
 1370               		.cfi_offset 15, -9
 1371 0010 0F93      		push r16
 1372               	.LCFI36:
 1373               		.cfi_def_cfa_offset 11
 1374               		.cfi_offset 16, -10
 1375 0012 1F93      		push r17
 1376               	.LCFI37:
 1377               		.cfi_def_cfa_offset 12
 1378               		.cfi_offset 17, -11
 1379               	/* prologue: function */
 1380               	/* frame size = 0 */
 1381               	/* stack size = 10 */
 1382               	.L__stack_usage = 10
 1383 0014 6B01      		movw r12,r22
 1384 0016 7C01      		movw r14,r24
 860:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1385               		.loc 1 860 5 is_stmt 1 view .LVU293
 1386               		.loc 1 860 33 is_stmt 0 view .LVU294
 1387 0018 81E0      		ldi r24,lo8(1)
 1388 001a 90E0      		ldi r25,0
 1389 001c A0E0      		ldi r26,0
 1390 001e B0E0      		ldi r27,0
 1391 0020 4C01      		movw r8,r24
 1392 0022 5D01      		movw r10,r26
 1393 0024 00C0      		rjmp 2f
 1394               		1:
 1395 0026 880C      		lsl r8
 1396 0028 991C      		rol r9
 1397 002a AA1C      		rol r10
 1398 002c BB1C      		rol r11
 1399               		2:
 1400 002e 4A95      		dec r20
 1401 0030 02F4      		brpl 1b
 1402 0032 B501      		movw r22,r10
 1403               	.LVL124:
 1404               		.loc 1 860 33 view .LVU295
 1405 0034 A401      		movw r20,r8
 1406               	.LVL125:
 1407               		.loc 1 860 51 view .LVU296
 1408 0036 4C01      		movw r8,r24
 1409 0038 5D01      		movw r10,r26
 1410 003a 00C0      		rjmp 2f
 1411               		1:
 1412 003c 880C      		lsl r8
 1413 003e 991C      		rol r9
 1414 0040 AA1C      		rol r10
 1415 0042 BB1C      		rol r11
 1416               		2:
 1417 0044 2A95      		dec r18
 1418 0046 02F4      		brpl 1b
 1419               		.loc 1 860 19 view .LVU297
 1420 0048 4829      		or r20,r8
 1421 004a 5929      		or r21,r9
 1422 004c 6A29      		or r22,r10
 1423 004e 7B29      		or r23,r11
 1424               	.LVL126:
 861:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 1425               		.loc 1 861 5 is_stmt 1 view .LVU298
 1426               		.loc 1 861 19 is_stmt 0 view .LVU299
 1427 0050 00C0      		rjmp 2f
 1428               		1:
 1429 0052 880F      		lsl r24
 1430 0054 991F      		rol r25
 1431 0056 AA1F      		rol r26
 1432 0058 BB1F      		rol r27
 1433               		2:
 1434 005a 0A95      		dec r16
 1435 005c 02F4      		brpl 1b
 1436               	.LVL127:
 862:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1437               		.loc 1 862 5 is_stmt 1 view .LVU300
 1438               		.loc 1 862 19 is_stmt 0 view .LVU301
 1439 005e 8A01      		movw r16,r20
 1440               	.LVL128:
 1441               		.loc 1 862 19 view .LVU302
 1442 0060 9B01      		movw r18,r22
 1443               	.LVL129:
 1444               		.loc 1 862 19 view .LVU303
 1445 0062 0C21      		and r16,r12
 1446 0064 1D21      		and r17,r13
 1447 0066 2E21      		and r18,r14
 1448 0068 3F21      		and r19,r15
 1449               		.loc 1 862 57 view .LVU304
 1450 006a 0417      		cp r16,r20
 1451 006c 1507      		cpc r17,r21
 1452 006e 2607      		cpc r18,r22
 1453 0070 3707      		cpc r19,r23
 1454 0072 01F4      		brne .L98
 1455               		.loc 1 862 57 discriminator 1 view .LVU305
 1456 0074 8C29      		or r24,r12
 1457               	.LVL130:
 1458               		.loc 1 862 57 discriminator 1 view .LVU306
 1459 0076 9D29      		or r25,r13
 1460 0078 AE29      		or r26,r14
 1461 007a BF29      		or r27,r15
 1462               	.L97:
 863:quantum/quantum.c **** }
 1463               		.loc 1 863 1 view .LVU307
 1464 007c BC01      		movw r22,r24
 1465 007e CD01      		movw r24,r26
 1466               	/* epilogue start */
 1467 0080 1F91      		pop r17
 1468               	.LVL131:
 1469               		.loc 1 863 1 view .LVU308
 1470 0082 0F91      		pop r16
 1471               	.LVL132:
 1472               		.loc 1 863 1 view .LVU309
 1473 0084 FF90      		pop r15
 1474 0086 EF90      		pop r14
 1475 0088 DF90      		pop r13
 1476 008a CF90      		pop r12
 1477 008c BF90      		pop r11
 1478 008e AF90      		pop r10
 1479 0090 9F90      		pop r9
 1480 0092 8F90      		pop r8
 1481               	.LVL133:
 1482               		.loc 1 863 1 view .LVU310
 1483 0094 0895      		ret
 1484               	.LVL134:
 1485               	.L98:
 862:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1486               		.loc 1 862 68 discriminator 2 view .LVU311
 1487 0096 8095      		com r24
 1488 0098 9095      		com r25
 1489 009a A095      		com r26
 1490 009c B095      		com r27
 1491               	.LVL135:
 862:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1492               		.loc 1 862 57 discriminator 2 view .LVU312
 1493 009e 8C21      		and r24,r12
 1494               	.LVL136:
 862:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1495               		.loc 1 862 57 discriminator 2 view .LVU313
 1496 00a0 9D21      		and r25,r13
 1497 00a2 AE21      		and r26,r14
 1498 00a4 BF21      		and r27,r15
 1499 00a6 00C0      		rjmp .L97
 1500               		.cfi_endproc
 1501               	.LFE47:
 1503               		.section	.text.update_tri_layer,"ax",@progbits
 1504               	.global	update_tri_layer
 1506               	update_tri_layer:
 1507               	.LVL137:
 1508               	.LFB48:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 1509               		.loc 1 865 71 is_stmt 1 view -0
 1510               		.cfi_startproc
 1511               		.loc 1 865 71 is_stmt 0 view .LVU315
 1512 0000 0F93      		push r16
 1513               	.LCFI38:
 1514               		.cfi_def_cfa_offset 3
 1515               		.cfi_offset 16, -2
 1516               	/* prologue: function */
 1517               	/* frame size = 0 */
 1518               	/* stack size = 1 */
 1519               	.L__stack_usage = 1
 1520 0002 382F      		mov r19,r24
 1521 0004 262F      		mov r18,r22
 1522               		.loc 1 865 73 is_stmt 1 view .LVU316
 1523 0006 6091 0000 		lds r22,layer_state
 1524 000a 7091 0000 		lds r23,layer_state+1
 1525 000e 8091 0000 		lds r24,layer_state+2
 1526 0012 9091 0000 		lds r25,layer_state+3
 1527               	.LVL138:
 1528               		.loc 1 865 73 is_stmt 0 view .LVU317
 1529 0016 042F      		mov r16,r20
 1530 0018 432F      		mov r20,r19
 1531               	.LVL139:
 1532               		.loc 1 865 73 view .LVU318
 1533 001a 0E94 0000 		call update_tri_layer_state
 1534               	.LVL140:
 1535               	/* epilogue start */
 1536               		.loc 1 865 1 view .LVU319
 1537 001e 0F91      		pop r16
 1538               	.LVL141:
 1539               		.loc 1 865 73 view .LVU320
 1540 0020 0C94 0000 		jmp layer_state_set
 1541               	.LVL142:
 1542               		.cfi_endproc
 1543               	.LFE48:
 1545               		.section	.text.tap_random_base64,"ax",@progbits
 1546               	.global	tap_random_base64
 1548               	tap_random_base64:
 1549               	.LFB49:
 866:quantum/quantum.c **** 
 867:quantum/quantum.c **** void tap_random_base64(void) {
 1550               		.loc 1 867 30 is_stmt 1 view -0
 1551               		.cfi_startproc
 1552 0000 CF93      		push r28
 1553               	.LCFI39:
 1554               		.cfi_def_cfa_offset 3
 1555               		.cfi_offset 28, -2
 1556 0002 DF93      		push r29
 1557               	.LCFI40:
 1558               		.cfi_def_cfa_offset 4
 1559               		.cfi_offset 29, -3
 1560               	/* prologue: function */
 1561               	/* frame size = 0 */
 1562               	/* stack size = 2 */
 1563               	.L__stack_usage = 2
 868:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 869:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 870:quantum/quantum.c **** #else
 871:quantum/quantum.c ****     uint8_t key = rand() % 64;
 1564               		.loc 1 871 5 view .LVU322
 1565               		.loc 1 871 19 is_stmt 0 view .LVU323
 1566 0004 0E94 0000 		call rand
 1567               	.LVL143:
 1568               		.loc 1 871 26 view .LVU324
 1569 0008 60E4      		ldi r22,lo8(64)
 1570 000a 70E0      		ldi r23,0
 1571 000c 0E94 0000 		call __divmodhi4
 1572 0010 EC01      		movw r28,r24
 1573               	.LVL144:
 872:quantum/quantum.c **** #endif
 873:quantum/quantum.c ****     switch (key) {
 1574               		.loc 1 873 5 is_stmt 1 view .LVU325
 1575 0012 9927      		clr r25
 1576               	.LVL145:
 1577               		.loc 1 873 5 is_stmt 0 view .LVU326
 1578 0014 8433      		cpi r24,52
 1579 0016 9105      		cpc r25,__zero_reg__
 1580 0018 01F0      		breq .L102
 1581 001a 04F4      		brge .L103
 1582 001c 4A97      		sbiw r24,26
 1583 001e 04F4      		brge .L110
 874:quantum/quantum.c ****         case 0 ... 25:
 875:quantum/quantum.c ****             register_code(KC_LSFT);
 1584               		.loc 1 875 13 is_stmt 1 view .LVU327
 1585 0020 81EE      		ldi r24,lo8(-31)
 1586 0022 0E94 0000 		call register_code
 1587               	.LVL146:
 876:quantum/quantum.c ****             register_code(key + KC_A);
 1588               		.loc 1 876 13 view .LVU328
 1589 0026 CC5F      		subi r28,lo8(-(4))
 1590               	.LVL147:
 1591               		.loc 1 876 13 is_stmt 0 view .LVU329
 1592 0028 8C2F      		mov r24,r28
 1593 002a 0E94 0000 		call register_code
 1594               	.LVL148:
 877:quantum/quantum.c ****             unregister_code(key + KC_A);
 1595               		.loc 1 877 13 is_stmt 1 view .LVU330
 1596 002e 8C2F      		mov r24,r28
 1597               	.L113:
 878:quantum/quantum.c ****             unregister_code(KC_LSFT);
 879:quantum/quantum.c ****             break;
 880:quantum/quantum.c ****         case 26 ... 51:
 881:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 882:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 883:quantum/quantum.c ****             break;
 884:quantum/quantum.c ****         case 52:
 885:quantum/quantum.c ****             register_code(KC_0);
 886:quantum/quantum.c ****             unregister_code(KC_0);
 887:quantum/quantum.c ****             break;
 888:quantum/quantum.c ****         case 53 ... 61:
 889:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 890:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 891:quantum/quantum.c ****             break;
 892:quantum/quantum.c ****         case 62:
 893:quantum/quantum.c ****             register_code(KC_LSFT);
 894:quantum/quantum.c ****             register_code(KC_EQL);
 895:quantum/quantum.c ****             unregister_code(KC_EQL);
 1598               		.loc 1 895 13 is_stmt 0 view .LVU331
 1599 0030 0E94 0000 		call unregister_code
 1600               	.LVL149:
 896:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1601               		.loc 1 896 13 is_stmt 1 view .LVU332
 1602 0034 81EE      		ldi r24,lo8(-31)
 1603 0036 00C0      		rjmp .L112
 1604               	.LVL150:
 1605               	.L103:
 873:quantum/quantum.c ****         case 0 ... 25:
 1606               		.loc 1 873 5 is_stmt 0 view .LVU333
 1607 0038 8E33      		cpi r24,62
 1608 003a 9105      		cpc r25,__zero_reg__
 1609 003c 01F0      		breq .L107
 1610 003e 04F0      		brlt .L108
 1611 0040 CF97      		sbiw r24,63
 1612 0042 01F0      		breq .L109
 1613               	/* epilogue start */
 897:quantum/quantum.c ****             break;
 898:quantum/quantum.c ****         case 63:
 899:quantum/quantum.c ****             register_code(KC_SLSH);
 900:quantum/quantum.c ****             unregister_code(KC_SLSH);
 901:quantum/quantum.c ****             break;
 902:quantum/quantum.c ****     }
 903:quantum/quantum.c **** }
 1614               		.loc 1 903 1 view .LVU334
 1615 0044 DF91      		pop r29
 1616 0046 CF91      		pop r28
 1617               	.LVL151:
 1618               		.loc 1 903 1 view .LVU335
 1619 0048 0895      		ret
 1620               	.LVL152:
 1621               	.L110:
 881:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 1622               		.loc 1 881 13 is_stmt 1 view .LVU336
 1623 004a C651      		subi r28,lo8(-(-22))
 1624               	.LVL153:
 1625               	.L114:
 889:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1626               		.loc 1 889 13 is_stmt 0 view .LVU337
 1627 004c 8C2F      		mov r24,r28
 1628 004e 0E94 0000 		call register_code
 1629               	.LVL154:
 890:quantum/quantum.c ****             break;
 1630               		.loc 1 890 13 is_stmt 1 view .LVU338
 1631 0052 8C2F      		mov r24,r28
 1632 0054 00C0      		rjmp .L112
 1633               	.LVL155:
 1634               	.L102:
 885:quantum/quantum.c ****             unregister_code(KC_0);
 1635               		.loc 1 885 13 view .LVU339
 1636 0056 87E2      		ldi r24,lo8(39)
 1637 0058 0E94 0000 		call register_code
 1638               	.LVL156:
 886:quantum/quantum.c ****             break;
 1639               		.loc 1 886 13 view .LVU340
 1640 005c 87E2      		ldi r24,lo8(39)
 1641               	.LVL157:
 1642               	.L112:
 1643               	/* epilogue start */
 1644               		.loc 1 903 1 is_stmt 0 view .LVU341
 1645 005e DF91      		pop r29
 1646 0060 CF91      		pop r28
 900:quantum/quantum.c ****             break;
 1647               		.loc 1 900 13 view .LVU342
 1648 0062 0C94 0000 		jmp unregister_code
 1649               	.LVL158:
 1650               	.L108:
 889:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1651               		.loc 1 889 13 is_stmt 1 view .LVU343
 1652 0066 C751      		subi r28,lo8(-(-23))
 1653               	.LVL159:
 889:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1654               		.loc 1 889 13 is_stmt 0 view .LVU344
 1655 0068 00C0      		rjmp .L114
 1656               	.LVL160:
 1657               	.L107:
 893:quantum/quantum.c ****             register_code(KC_EQL);
 1658               		.loc 1 893 13 is_stmt 1 view .LVU345
 1659 006a 81EE      		ldi r24,lo8(-31)
 1660 006c 0E94 0000 		call register_code
 1661               	.LVL161:
 894:quantum/quantum.c ****             unregister_code(KC_EQL);
 1662               		.loc 1 894 13 view .LVU346
 1663 0070 8EE2      		ldi r24,lo8(46)
 1664 0072 0E94 0000 		call register_code
 1665               	.LVL162:
 895:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1666               		.loc 1 895 13 view .LVU347
 1667 0076 8EE2      		ldi r24,lo8(46)
 1668 0078 00C0      		rjmp .L113
 1669               	.L109:
 899:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1670               		.loc 1 899 13 view .LVU348
 1671 007a 88E3      		ldi r24,lo8(56)
 1672 007c 0E94 0000 		call register_code
 1673               	.LVL163:
 900:quantum/quantum.c ****             break;
 1674               		.loc 1 900 13 view .LVU349
 1675 0080 88E3      		ldi r24,lo8(56)
 1676 0082 00C0      		rjmp .L112
 1677               		.cfi_endproc
 1678               	.LFE49:
 1680               		.section	.text.bootmagic_lite,"ax",@progbits
 1681               		.weak	bootmagic_lite
 1683               	bootmagic_lite:
 1684               	.LFB50:
 904:quantum/quantum.c **** 
 905:quantum/quantum.c **** __attribute__((weak)) void bootmagic_lite(void) {
 1685               		.loc 1 905 49 view -0
 1686               		.cfi_startproc
 1687               	/* prologue: function */
 1688               	/* frame size = 0 */
 1689               	/* stack size = 0 */
 1690               	.L__stack_usage = 0
 906:quantum/quantum.c ****     // The lite version of TMK's bootmagic based on Wilba.
 907:quantum/quantum.c ****     // 100% less potential for accidentally making the
 908:quantum/quantum.c ****     // keyboard do stupid things.
 909:quantum/quantum.c **** 
 910:quantum/quantum.c ****     // We need multiple scans because debouncing can't be turned off.
 911:quantum/quantum.c ****     matrix_scan();
 1691               		.loc 1 911 5 view .LVU351
 1692 0000 0E94 0000 		call matrix_scan
 1693               	.LVL164:
 912:quantum/quantum.c **** #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 913:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 1694               		.loc 1 913 5 view .LVU352
 1695               	.LBB50:
 1696               	.LBI50:
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 1697               		.loc 2 166 1 view .LVU353
 1698               	.LBB51:
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1699               		.loc 2 168 2 view .LVU354
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1700               		.loc 2 172 2 view .LVU355
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1701               		.loc 2 173 2 view .LVU356
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 1702               		.loc 2 174 2 view .LVU357
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 1703               		.loc 2 184 3 view .LVU358
 1704               		.loc 2 187 2 view .LVU359
 1705 0004 8FE3      		ldi r24,lo8(-25537)
 1706 0006 9CE9      		ldi r25,hi8(-25537)
 1707 0008 0197      	1:	sbiw r24,1
 1708 000a 01F4      		brne 1b
 1709 000c 00C0      		rjmp .
 1710 000e 0000      		nop
 1711               	.LVL165:
 1712               		.loc 2 187 2 is_stmt 0 view .LVU360
 1713               	.LBE51:
 1714               	.LBE50:
 914:quantum/quantum.c **** #elif defined(DEBOUNCE) && DEBOUNCE > 0
 915:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 916:quantum/quantum.c **** #else
 917:quantum/quantum.c ****     wait_ms(30);
 918:quantum/quantum.c **** #endif
 919:quantum/quantum.c ****     matrix_scan();
 1715               		.loc 1 919 5 is_stmt 1 view .LVU361
 1716 0010 0E94 0000 		call matrix_scan
 1717               	.LVL166:
 920:quantum/quantum.c **** 
 921:quantum/quantum.c ****     // If the Esc and space bar are held down on power up,
 922:quantum/quantum.c ****     // reset the EEPROM valid state and jump to bootloader.
 923:quantum/quantum.c ****     // Assumes Esc is at [0,0].
 924:quantum/quantum.c ****     // This isn't very generalized, but we need something that doesn't
 925:quantum/quantum.c ****     // rely on user's keymaps in firmware or EEPROM.
 926:quantum/quantum.c ****     if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1718               		.loc 1 926 5 view .LVU362
 1719               		.loc 1 926 9 is_stmt 0 view .LVU363
 1720 0014 80E0      		ldi r24,0
 1721 0016 0E94 0000 		call matrix_get_row
 1722               	.LVL167:
 1723               		.loc 1 926 8 view .LVU364
 1724 001a 80FF      		sbrs r24,0
 1725 001c 00C0      		rjmp .L115
 927:quantum/quantum.c ****         eeconfig_disable();
 1726               		.loc 1 927 9 is_stmt 1 view .LVU365
 1727 001e 0E94 0000 		call eeconfig_disable
 1728               	.LVL168:
 928:quantum/quantum.c ****         // Jump to bootloader.
 929:quantum/quantum.c ****         bootloader_jump();
 1729               		.loc 1 929 9 view .LVU366
 1730 0022 0C94 0000 		jmp bootloader_jump
 1731               	.LVL169:
 1732               	.L115:
 1733               	/* epilogue start */
 930:quantum/quantum.c ****     }
 931:quantum/quantum.c **** }
 1734               		.loc 1 931 1 is_stmt 0 view .LVU367
 1735 0026 0895      		ret
 1736               		.cfi_endproc
 1737               	.LFE50:
 1739               		.section	.text.matrix_init_quantum,"ax",@progbits
 1740               	.global	matrix_init_quantum
 1742               	matrix_init_quantum:
 1743               	.LFB51:
 932:quantum/quantum.c **** 
 933:quantum/quantum.c **** void matrix_init_quantum() {
 1744               		.loc 1 933 28 is_stmt 1 view -0
 1745               		.cfi_startproc
 1746               	/* prologue: function */
 1747               	/* frame size = 0 */
 1748               	/* stack size = 0 */
 1749               	.L__stack_usage = 0
 934:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 935:quantum/quantum.c ****     bootmagic_lite();
 936:quantum/quantum.c **** #endif
 937:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1750               		.loc 1 937 5 view .LVU369
 1751               		.loc 1 937 10 is_stmt 0 view .LVU370
 1752 0000 0E94 0000 		call eeconfig_is_enabled
 1753               	.LVL170:
 1754               		.loc 1 937 8 view .LVU371
 1755 0004 8111      		cpse r24,__zero_reg__
 1756 0006 00C0      		rjmp .L118
 938:quantum/quantum.c ****         eeconfig_init();
 1757               		.loc 1 938 9 is_stmt 1 view .LVU372
 1758 0008 0E94 0000 		call eeconfig_init
 1759               	.LVL171:
 1760               	.L118:
 939:quantum/quantum.c ****     }
 940:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 941:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 942:quantum/quantum.c ****     led_matrix_init();
 943:quantum/quantum.c **** #    else
 944:quantum/quantum.c ****     backlight_init_ports();
 945:quantum/quantum.c **** #    endif
 946:quantum/quantum.c **** #endif
 947:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 948:quantum/quantum.c ****     audio_init();
 949:quantum/quantum.c **** #endif
 950:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 951:quantum/quantum.c ****     rgb_matrix_init();
 952:quantum/quantum.c **** #endif
 953:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 954:quantum/quantum.c ****     encoder_init();
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 957:quantum/quantum.c ****     unicode_input_mode_init();
 958:quantum/quantum.c **** #endif
 959:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 960:quantum/quantum.c ****     haptic_init();
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 963:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 964:quantum/quantum.c **** #endif
 965:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 966:quantum/quantum.c ****     dip_switch_init();
 967:quantum/quantum.c **** #endif
 968:quantum/quantum.c **** 
 969:quantum/quantum.c ****     matrix_init_kb();
 1761               		.loc 1 969 5 view .LVU373
 1762 000c 0C94 0000 		jmp matrix_init_kb
 1763               	.LVL172:
 1764               		.cfi_endproc
 1765               	.LFE51:
 1767               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1768               	.global	matrix_scan_quantum
 1770               	matrix_scan_quantum:
 1771               	.LFB52:
 970:quantum/quantum.c **** }
 971:quantum/quantum.c **** 
 972:quantum/quantum.c **** void matrix_scan_quantum() {
 1772               		.loc 1 972 28 view -0
 1773               		.cfi_startproc
 1774               	/* prologue: function */
 1775               	/* frame size = 0 */
 1776               	/* stack size = 0 */
 1777               	.L__stack_usage = 0
 973:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 974:quantum/quantum.c ****     matrix_scan_music();
 975:quantum/quantum.c **** #endif
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 978:quantum/quantum.c ****     matrix_scan_tap_dance();
 979:quantum/quantum.c **** #endif
 980:quantum/quantum.c **** 
 981:quantum/quantum.c **** #ifdef COMBO_ENABLE
 982:quantum/quantum.c ****     matrix_scan_combo();
 983:quantum/quantum.c **** #endif
 984:quantum/quantum.c **** 
 985:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE)
 986:quantum/quantum.c **** #    if defined(LED_MATRIX_ENABLE)
 987:quantum/quantum.c ****     led_matrix_task();
 988:quantum/quantum.c **** #    elif defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS)
 989:quantum/quantum.c ****     backlight_task();
 990:quantum/quantum.c **** #    endif
 991:quantum/quantum.c **** #endif
 992:quantum/quantum.c **** 
 993:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 994:quantum/quantum.c ****     rgb_matrix_task();
 995:quantum/quantum.c **** #endif
 996:quantum/quantum.c **** 
 997:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 998:quantum/quantum.c ****     encoder_read();
 999:quantum/quantum.c **** #endif
1000:quantum/quantum.c **** 
1001:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
1002:quantum/quantum.c ****     haptic_task();
1003:quantum/quantum.c **** #endif
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
1006:quantum/quantum.c ****     dip_switch_read(false);
1007:quantum/quantum.c **** #endif
1008:quantum/quantum.c **** 
1009:quantum/quantum.c ****     matrix_scan_kb();
 1778               		.loc 1 1009 5 view .LVU375
 1779 0000 0C94 0000 		jmp matrix_scan_kb
 1780               	.LVL173:
 1781               		.cfi_endproc
 1782               	.LFE52:
 1784               		.section	.text.send_nibble,"ax",@progbits
 1785               	.global	send_nibble
 1787               	send_nibble:
 1788               	.LVL174:
 1789               	.LFB56:
1010:quantum/quantum.c **** }
1011:quantum/quantum.c **** 
1012:quantum/quantum.c **** #ifdef HD44780_ENABLED
1013:quantum/quantum.c **** #    include "hd44780.h"
1014:quantum/quantum.c **** #endif
1015:quantum/quantum.c **** 
1016:quantum/quantum.c **** // Functions for spitting out values
1017:quantum/quantum.c **** //
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** void send_dword(uint32_t number) {  // this might not actually work
1020:quantum/quantum.c ****     uint16_t word = (number >> 16);
1021:quantum/quantum.c ****     send_word(word);
1022:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1023:quantum/quantum.c **** }
1024:quantum/quantum.c **** 
1025:quantum/quantum.c **** void send_word(uint16_t number) {
1026:quantum/quantum.c ****     uint8_t byte = number >> 8;
1027:quantum/quantum.c ****     send_byte(byte);
1028:quantum/quantum.c ****     send_byte(number & 0xFF);
1029:quantum/quantum.c **** }
1030:quantum/quantum.c **** 
1031:quantum/quantum.c **** void send_byte(uint8_t number) {
1032:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1033:quantum/quantum.c ****     send_nibble(nibble);
1034:quantum/quantum.c ****     send_nibble(number & 0xF);
1035:quantum/quantum.c **** }
1036:quantum/quantum.c **** 
1037:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1790               		.loc 1 1037 34 view -0
 1791               		.cfi_startproc
 1792               		.loc 1 1037 34 is_stmt 0 view .LVU377
 1793 0000 CF93      		push r28
 1794               	.LCFI41:
 1795               		.cfi_def_cfa_offset 3
 1796               		.cfi_offset 28, -2
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 1 */
 1800               	.L__stack_usage = 1
1038:quantum/quantum.c ****     switch (number) {
 1801               		.loc 1 1038 5 is_stmt 1 view .LVU378
 1802 0002 8A30      		cpi r24,lo8(10)
 1803 0004 00F4      		brsh .L121
 1804 0006 8823      		tst r24
 1805 0008 01F0      		breq .L126
1039:quantum/quantum.c ****         case 0:
1040:quantum/quantum.c ****             register_code(KC_0);
1041:quantum/quantum.c ****             unregister_code(KC_0);
1042:quantum/quantum.c ****             break;
1043:quantum/quantum.c ****         case 1 ... 9:
1044:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1806               		.loc 1 1044 13 view .LVU379
 1807 000a CDE1      		ldi r28,lo8(29)
 1808               	.L129:
1045:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1046:quantum/quantum.c ****             break;
1047:quantum/quantum.c ****         case 0xA ... 0xF:
1048:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1809               		.loc 1 1048 13 is_stmt 0 view .LVU380
 1810 000c C80F      		add r28,r24
 1811 000e 8C2F      		mov r24,r28
 1812               	.LVL175:
 1813               		.loc 1 1048 13 view .LVU381
 1814 0010 0E94 0000 		call register_code
 1815               	.LVL176:
1049:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1816               		.loc 1 1049 13 is_stmt 1 view .LVU382
 1817 0014 8C2F      		mov r24,r28
 1818 0016 00C0      		rjmp .L128
 1819               	.LVL177:
 1820               	.L121:
1048:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1821               		.loc 1 1048 13 is_stmt 0 view .LVU383
 1822 0018 CAEF      		ldi r28,lo8(-6)
1038:quantum/quantum.c ****         case 0:
 1823               		.loc 1 1038 5 view .LVU384
 1824 001a 8031      		cpi r24,lo8(16)
 1825 001c 00F0      		brlo .L129
 1826               	/* epilogue start */
1050:quantum/quantum.c ****             break;
1051:quantum/quantum.c ****     }
1052:quantum/quantum.c **** }
 1827               		.loc 1 1052 1 view .LVU385
 1828 001e CF91      		pop r28
 1829 0020 0895      		ret
 1830               	.L126:
1040:quantum/quantum.c ****             unregister_code(KC_0);
 1831               		.loc 1 1040 13 is_stmt 1 view .LVU386
 1832 0022 87E2      		ldi r24,lo8(39)
 1833               	.LVL178:
1040:quantum/quantum.c ****             unregister_code(KC_0);
 1834               		.loc 1 1040 13 is_stmt 0 view .LVU387
 1835 0024 0E94 0000 		call register_code
 1836               	.LVL179:
1041:quantum/quantum.c ****             break;
 1837               		.loc 1 1041 13 is_stmt 1 view .LVU388
 1838 0028 87E2      		ldi r24,lo8(39)
 1839               	.L128:
 1840               	/* epilogue start */
 1841               		.loc 1 1052 1 is_stmt 0 view .LVU389
 1842 002a CF91      		pop r28
1049:quantum/quantum.c ****             break;
 1843               		.loc 1 1049 13 view .LVU390
 1844 002c 0C94 0000 		jmp unregister_code
 1845               	.LVL180:
 1846               		.cfi_endproc
 1847               	.LFE56:
 1849               		.section	.text.send_byte,"ax",@progbits
 1850               	.global	send_byte
 1852               	send_byte:
 1853               	.LVL181:
 1854               	.LFB55:
1031:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1855               		.loc 1 1031 32 is_stmt 1 view -0
 1856               		.cfi_startproc
1031:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1857               		.loc 1 1031 32 is_stmt 0 view .LVU392
 1858 0000 CF93      		push r28
 1859               	.LCFI42:
 1860               		.cfi_def_cfa_offset 3
 1861               		.cfi_offset 28, -2
 1862               	/* prologue: function */
 1863               	/* frame size = 0 */
 1864               	/* stack size = 1 */
 1865               	.L__stack_usage = 1
 1866 0002 C82F      		mov r28,r24
1032:quantum/quantum.c ****     send_nibble(nibble);
 1867               		.loc 1 1032 5 is_stmt 1 view .LVU393
 1868               	.LVL182:
1033:quantum/quantum.c ****     send_nibble(number & 0xF);
 1869               		.loc 1 1033 5 view .LVU394
 1870 0004 8295      		swap r24
 1871               	.LVL183:
1033:quantum/quantum.c ****     send_nibble(number & 0xF);
 1872               		.loc 1 1033 5 is_stmt 0 view .LVU395
 1873 0006 8F70      		andi r24,lo8(15)
 1874 0008 0E94 0000 		call send_nibble
 1875               	.LVL184:
1034:quantum/quantum.c **** }
 1876               		.loc 1 1034 5 is_stmt 1 view .LVU396
 1877 000c 8C2F      		mov r24,r28
 1878 000e 8F70      		andi r24,lo8(15)
 1879               	/* epilogue start */
1035:quantum/quantum.c **** 
 1880               		.loc 1 1035 1 is_stmt 0 view .LVU397
 1881 0010 CF91      		pop r28
 1882               	.LVL185:
1034:quantum/quantum.c **** }
 1883               		.loc 1 1034 5 view .LVU398
 1884 0012 0C94 0000 		jmp send_nibble
 1885               	.LVL186:
 1886               		.cfi_endproc
 1887               	.LFE55:
 1889               		.section	.text.send_word,"ax",@progbits
 1890               	.global	send_word
 1892               	send_word:
 1893               	.LVL187:
 1894               	.LFB54:
1025:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1895               		.loc 1 1025 33 is_stmt 1 view -0
 1896               		.cfi_startproc
1025:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1897               		.loc 1 1025 33 is_stmt 0 view .LVU400
 1898 0000 CF93      		push r28
 1899               	.LCFI43:
 1900               		.cfi_def_cfa_offset 3
 1901               		.cfi_offset 28, -2
 1902               	/* prologue: function */
 1903               	/* frame size = 0 */
 1904               	/* stack size = 1 */
 1905               	.L__stack_usage = 1
 1906 0002 C82F      		mov r28,r24
1026:quantum/quantum.c ****     send_byte(byte);
 1907               		.loc 1 1026 5 is_stmt 1 view .LVU401
 1908               	.LVL188:
1027:quantum/quantum.c ****     send_byte(number & 0xFF);
 1909               		.loc 1 1027 5 view .LVU402
 1910 0004 892F      		mov r24,r25
 1911               	.LVL189:
1027:quantum/quantum.c ****     send_byte(number & 0xFF);
 1912               		.loc 1 1027 5 is_stmt 0 view .LVU403
 1913 0006 0E94 0000 		call send_byte
 1914               	.LVL190:
1028:quantum/quantum.c **** }
 1915               		.loc 1 1028 5 is_stmt 1 view .LVU404
 1916 000a 8C2F      		mov r24,r28
 1917               	/* epilogue start */
1029:quantum/quantum.c **** 
 1918               		.loc 1 1029 1 is_stmt 0 view .LVU405
 1919 000c CF91      		pop r28
1028:quantum/quantum.c **** }
 1920               		.loc 1 1028 5 view .LVU406
 1921 000e 0C94 0000 		jmp send_byte
 1922               	.LVL191:
 1923               		.cfi_endproc
 1924               	.LFE54:
 1926               		.section	.text.send_dword,"ax",@progbits
 1927               	.global	send_dword
 1929               	send_dword:
 1930               	.LVL192:
 1931               	.LFB53:
1019:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1932               		.loc 1 1019 34 is_stmt 1 view -0
 1933               		.cfi_startproc
1019:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1934               		.loc 1 1019 34 is_stmt 0 view .LVU408
 1935 0000 CF92      		push r12
 1936               	.LCFI44:
 1937               		.cfi_def_cfa_offset 3
 1938               		.cfi_offset 12, -2
 1939 0002 DF92      		push r13
 1940               	.LCFI45:
 1941               		.cfi_def_cfa_offset 4
 1942               		.cfi_offset 13, -3
 1943 0004 EF92      		push r14
 1944               	.LCFI46:
 1945               		.cfi_def_cfa_offset 5
 1946               		.cfi_offset 14, -4
 1947 0006 FF92      		push r15
 1948               	.LCFI47:
 1949               		.cfi_def_cfa_offset 6
 1950               		.cfi_offset 15, -5
 1951               	/* prologue: function */
 1952               	/* frame size = 0 */
 1953               	/* stack size = 4 */
 1954               	.L__stack_usage = 4
 1955 0008 6B01      		movw r12,r22
1020:quantum/quantum.c ****     send_word(word);
 1956               		.loc 1 1020 5 is_stmt 1 view .LVU409
1021:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1957               		.loc 1 1021 5 view .LVU410
 1958 000a 0E94 0000 		call send_word
 1959               	.LVL193:
1022:quantum/quantum.c **** }
 1960               		.loc 1 1022 5 view .LVU411
 1961 000e C601      		movw r24,r12
 1962               	/* epilogue start */
1023:quantum/quantum.c **** 
 1963               		.loc 1 1023 1 is_stmt 0 view .LVU412
 1964 0010 FF90      		pop r15
 1965 0012 EF90      		pop r14
 1966 0014 DF90      		pop r13
 1967 0016 CF90      		pop r12
1022:quantum/quantum.c **** }
 1968               		.loc 1 1022 5 view .LVU413
 1969 0018 0C94 0000 		jmp send_word
 1970               	.LVL194:
 1971               		.cfi_endproc
 1972               	.LFE53:
 1974               		.section	.text.hex_to_keycode,"ax",@progbits
 1975               		.weak	hex_to_keycode
 1977               	hex_to_keycode:
 1978               	.LVL195:
 1979               	.LFB57:
1053:quantum/quantum.c **** 
1054:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 1980               		.loc 1 1054 60 is_stmt 1 view -0
 1981               		.cfi_startproc
 1982               	/* prologue: function */
 1983               	/* frame size = 0 */
 1984               	/* stack size = 0 */
 1985               	.L__stack_usage = 0
1055:quantum/quantum.c ****     hex = hex & 0xF;
 1986               		.loc 1 1055 5 view .LVU415
 1987               		.loc 1 1055 9 is_stmt 0 view .LVU416
 1988 0000 282F      		mov r18,r24
 1989 0002 2F70      		andi r18,lo8(15)
 1990               	.LVL196:
1056:quantum/quantum.c ****     if (hex == 0x0) {
 1991               		.loc 1 1056 5 is_stmt 1 view .LVU417
 1992               		.loc 1 1056 8 is_stmt 0 view .LVU418
 1993 0004 01F0      		breq .L136
1057:quantum/quantum.c ****         return KC_0;
1058:quantum/quantum.c ****     } else if (hex < 0xA) {
 1994               		.loc 1 1058 12 is_stmt 1 view .LVU419
 1995 0006 822F      		mov r24,r18
 1996 0008 90E0      		ldi r25,0
 1997               		.loc 1 1058 15 is_stmt 0 view .LVU420
 1998 000a 2A30      		cpi r18,lo8(10)
 1999 000c 00F4      		brsh .L135
1059:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 2000               		.loc 1 1059 9 is_stmt 1 view .LVU421
 2001               		.loc 1 1059 21 is_stmt 0 view .LVU422
 2002 000e 4D96      		adiw r24,29
 2003 0010 0895      		ret
 2004               	.L135:
1060:quantum/quantum.c ****     } else {
1061:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 2005               		.loc 1 1061 9 is_stmt 1 view .LVU423
 2006               		.loc 1 1061 21 is_stmt 0 view .LVU424
 2007 0012 0697      		sbiw r24,6
 2008 0014 0895      		ret
 2009               	.L136:
1057:quantum/quantum.c ****     } else if (hex < 0xA) {
 2010               		.loc 1 1057 16 view .LVU425
 2011 0016 87E2      		ldi r24,lo8(39)
 2012 0018 90E0      		ldi r25,0
 2013               	/* epilogue start */
1062:quantum/quantum.c ****     }
1063:quantum/quantum.c **** }
 2014               		.loc 1 1063 1 view .LVU426
 2015 001a 0895      		ret
 2016               		.cfi_endproc
 2017               	.LFE57:
 2019               		.section	.text.api_send_unicode,"ax",@progbits
 2020               	.global	api_send_unicode
 2022               	api_send_unicode:
 2023               	.LVL197:
 2024               	.LFB58:
1064:quantum/quantum.c **** 
1065:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2025               		.loc 1 1065 41 is_stmt 1 view -0
 2026               		.cfi_startproc
 2027               	/* prologue: function */
 2028               	/* frame size = 0 */
 2029               	/* stack size = 0 */
 2030               	.L__stack_usage = 0
1066:quantum/quantum.c **** #ifdef API_ENABLE
1067:quantum/quantum.c ****     uint8_t chunk[4];
1068:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1069:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1070:quantum/quantum.c **** #endif
1071:quantum/quantum.c **** }
 2031               		.loc 1 1071 1 view .LVU428
 2032               	/* epilogue start */
 2033 0000 0895      		ret
 2034               		.cfi_endproc
 2035               	.LFE58:
 2037               		.section	.text.led_set_user,"ax",@progbits
 2038               		.weak	led_set_user
 2040               	led_set_user:
 2041               	.LVL198:
 2042               	.LFB59:
1072:quantum/quantum.c **** 
1073:quantum/quantum.c **** /** \brief Lock LED set callback - keymap/user level
1074:quantum/quantum.c ****  *
1075:quantum/quantum.c ****  * \deprecated Use led_update_user() instead.
1076:quantum/quantum.c ****  */
1077:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 2043               		.loc 1 1077 58 view -0
 2044               		.cfi_startproc
 2045               	/* prologue: function */
 2046               	/* frame size = 0 */
 2047               	/* stack size = 0 */
 2048               	.L__stack_usage = 0
 2049               		.loc 1 1077 59 view .LVU430
 2050               	/* epilogue start */
 2051               		.loc 1 1077 1 is_stmt 0 view .LVU431
 2052 0000 0895      		ret
 2053               		.cfi_endproc
 2054               	.LFE59:
 2056               		.section	.text.led_set_kb,"ax",@progbits
 2057               		.weak	led_set_kb
 2059               	led_set_kb:
 2060               	.LVL199:
 2061               	.LFB60:
1078:quantum/quantum.c **** 
1079:quantum/quantum.c **** /** \brief Lock LED set callback - keyboard level
1080:quantum/quantum.c ****  *
1081:quantum/quantum.c ****  * \deprecated Use led_update_kb() instead.
1082:quantum/quantum.c ****  */
1083:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 2062               		.loc 1 1083 56 is_stmt 1 view -0
 2063               		.cfi_startproc
 2064               	/* prologue: function */
 2065               	/* frame size = 0 */
 2066               	/* stack size = 0 */
 2067               	.L__stack_usage = 0
 2068               		.loc 1 1083 58 view .LVU433
 2069 0000 0C94 0000 		jmp led_set_user
 2070               	.LVL200:
 2071               		.loc 1 1083 58 is_stmt 0 view .LVU434
 2072               		.cfi_endproc
 2073               	.LFE60:
 2075               		.section	.text.led_update_user,"ax",@progbits
 2076               		.weak	led_update_user
 2078               	led_update_user:
 2079               	.LVL201:
 2080               	.LFB61:
1084:quantum/quantum.c **** 
1085:quantum/quantum.c **** /** \brief Lock LED update callback - keymap/user level
1086:quantum/quantum.c ****  *
1087:quantum/quantum.c ****  * \return True if led_update_kb() should run its own code, false otherwise.
1088:quantum/quantum.c ****  */
1089:quantum/quantum.c **** __attribute__((weak)) bool led_update_user(led_t led_state) { return true; }
 2081               		.loc 1 1089 61 is_stmt 1 view -0
 2082               		.cfi_startproc
 2083               	/* prologue: function */
 2084               	/* frame size = 0 */
 2085               	/* stack size = 0 */
 2086               	.L__stack_usage = 0
 2087               		.loc 1 1089 63 view .LVU436
 2088               		.loc 1 1089 1 is_stmt 0 view .LVU437
 2089 0000 81E0      		ldi r24,lo8(1)
 2090               	.LVL202:
 2091               	/* epilogue start */
 2092               		.loc 1 1089 1 view .LVU438
 2093 0002 0895      		ret
 2094               		.cfi_endproc
 2095               	.LFE61:
 2097               		.section	.text.led_update_kb,"ax",@progbits
 2098               		.weak	led_update_kb
 2100               	led_update_kb:
 2101               	.LVL203:
 2102               	.LFB62:
1090:quantum/quantum.c **** 
1091:quantum/quantum.c **** /** \brief Lock LED update callback - keyboard level
1092:quantum/quantum.c ****  *
1093:quantum/quantum.c ****  * \return Ignored for now.
1094:quantum/quantum.c ****  */
1095:quantum/quantum.c **** __attribute__((weak)) bool led_update_kb(led_t led_state) { return led_update_user(led_state); }
 2103               		.loc 1 1095 59 is_stmt 1 view -0
 2104               		.cfi_startproc
 2105               	/* prologue: function */
 2106               	/* frame size = 0 */
 2107               	/* stack size = 0 */
 2108               	.L__stack_usage = 0
 2109               		.loc 1 1095 61 view .LVU440
 2110               		.loc 1 1095 68 is_stmt 0 view .LVU441
 2111 0000 0C94 0000 		jmp led_update_user
 2112               	.LVL204:
 2113               		.loc 1 1095 68 view .LVU442
 2114               		.cfi_endproc
 2115               	.LFE62:
 2117               		.section	.text.led_init_ports,"ax",@progbits
 2118               		.weak	led_init_ports
 2120               	led_init_ports:
 2121               	.LFB63:
1096:quantum/quantum.c **** 
1097:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
 2122               		.loc 1 1097 49 is_stmt 1 view -0
 2123               		.cfi_startproc
 2124               	/* prologue: function */
 2125               	/* frame size = 0 */
 2126               	/* stack size = 0 */
 2127               	.L__stack_usage = 0
 2128               		.loc 1 1097 50 view .LVU444
 2129               	/* epilogue start */
 2130               		.loc 1 1097 1 is_stmt 0 view .LVU445
 2131 0000 0895      		ret
 2132               		.cfi_endproc
 2133               	.LFE63:
 2135               		.section	.text.led_set,"ax",@progbits
 2136               		.weak	led_set
 2138               	led_set:
 2139               	.LVL205:
 2140               	.LFB64:
1098:quantum/quantum.c **** 
1099:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 2141               		.loc 1 1099 53 is_stmt 1 view -0
 2142               		.cfi_startproc
 2143               		.loc 1 1099 53 is_stmt 0 view .LVU447
 2144 0000 CF93      		push r28
 2145               	.LCFI48:
 2146               		.cfi_def_cfa_offset 3
 2147               		.cfi_offset 28, -2
 2148               	/* prologue: function */
 2149               	/* frame size = 0 */
 2150               	/* stack size = 1 */
 2151               	.L__stack_usage = 1
 2152 0002 C82F      		mov r28,r24
1100:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1101:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
1102:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
1103:quantum/quantum.c **** 
1104:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1105:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
1106:quantum/quantum.c ****         // Toggling backlight to the brightest level
1107:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
1108:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1109:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
1110:quantum/quantum.c ****         // Toggling backlight and restoring config level
1111:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
1112:quantum/quantum.c ****     }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
1115:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
1116:quantum/quantum.c **** #endif
1117:quantum/quantum.c **** 
1118:quantum/quantum.c ****     led_set_kb(usb_led);
 2153               		.loc 1 1118 5 is_stmt 1 view .LVU448
 2154 0004 0E94 0000 		call led_set_kb
 2155               	.LVL206:
1119:quantum/quantum.c ****     led_update_kb((led_t) usb_led);
 2156               		.loc 1 1119 5 view .LVU449
 2157 0008 8C2F      		mov r24,r28
 2158               	/* epilogue start */
1120:quantum/quantum.c **** }
 2159               		.loc 1 1120 1 is_stmt 0 view .LVU450
 2160 000a CF91      		pop r28
 2161               	.LVL207:
1119:quantum/quantum.c ****     led_update_kb((led_t) usb_led);
 2162               		.loc 1 1119 5 view .LVU451
 2163 000c 0C94 0000 		jmp led_update_kb
 2164               	.LVL208:
1119:quantum/quantum.c ****     led_update_kb((led_t) usb_led);
 2165               		.loc 1 1119 5 view .LVU452
 2166               		.cfi_endproc
 2167               	.LFE64:
 2169               		.section	.text.startup_user,"ax",@progbits
 2170               		.weak	startup_user
 2172               	startup_user:
 2173               	.LFB68:
 2174               		.cfi_startproc
 2175               	/* prologue: function */
 2176               	/* frame size = 0 */
 2177               	/* stack size = 0 */
 2178               	.L__stack_usage = 0
 2179               	/* epilogue start */
 2180 0000 0895      		ret
 2181               		.cfi_endproc
 2182               	.LFE68:
 2184               		.section	.text.shutdown_user,"ax",@progbits
 2185               		.weak	shutdown_user
 2187               	shutdown_user:
 2188               	.LFB70:
 2189               		.cfi_startproc
 2190               	/* prologue: function */
 2191               	/* frame size = 0 */
 2192               	/* stack size = 0 */
 2193               	.L__stack_usage = 0
 2194               	/* epilogue start */
 2195 0000 0895      		ret
 2196               		.cfi_endproc
 2197               	.LFE70:
 2199               		.section	.text.reset_keyboard,"ax",@progbits
 2200               	.global	reset_keyboard
 2202               	reset_keyboard:
 2203               	.LFB37:
 139:quantum/quantum.c ****     clear_keyboard();
 2204               		.loc 1 139 27 is_stmt 1 view -0
 2205               		.cfi_startproc
 2206               	/* prologue: function */
 2207               	/* frame size = 0 */
 2208               	/* stack size = 0 */
 2209               	.L__stack_usage = 0
 140:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2210               		.loc 1 140 5 view .LVU454
 2211 0000 0E94 0000 		call clear_keyboard
 2212               	.LVL209:
 154:quantum/quantum.c ****     wait_ms(250);
 2213               		.loc 1 154 5 view .LVU455
 2214 0004 0E94 0000 		call shutdown_user
 2215               	.LVL210:
 155:quantum/quantum.c **** #endif
 2216               		.loc 1 155 5 view .LVU456
 2217               	.LBB52:
 2218               	.LBI52:
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 2219               		.loc 2 166 1 view .LVU457
 2220               	.LBB53:
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2221               		.loc 2 168 2 view .LVU458
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2222               		.loc 2 172 2 view .LVU459
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2223               		.loc 2 173 2 view .LVU460
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 2224               		.loc 2 174 2 view .LVU461
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 2225               		.loc 2 184 3 view .LVU462
 2226               		.loc 2 187 2 view .LVU463
 2227 0008 2FEF      		ldi r18,lo8(799999)
 2228 000a 84E3      		ldi r24,hi8(799999)
 2229 000c 9CE0      		ldi r25,hlo8(799999)
 2230 000e 2150      	1:	subi r18,1
 2231 0010 8040      		sbci r24,0
 2232 0012 9040      		sbci r25,0
 2233 0014 01F4      		brne 1b
 2234 0016 00C0      		rjmp .
 2235 0018 0000      		nop
 2236               	.LVL211:
 2237               		.loc 2 187 2 is_stmt 0 view .LVU464
 2238               	.LBE53:
 2239               	.LBE52:
 164:quantum/quantum.c **** }
 2240               		.loc 1 164 5 is_stmt 1 view .LVU465
 2241 001a 0C94 0000 		jmp bootloader_jump
 2242               	.LVL212:
 2243               		.cfi_endproc
 2244               	.LFE37:
 2246               		.section	.text.process_record_quantum,"ax",@progbits
 2247               	.global	process_record_quantum
 2249               	process_record_quantum:
 2250               	.LVL213:
 2251               	.LFB40:
 199:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2252               		.loc 1 199 50 view -0
 2253               		.cfi_startproc
 199:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2254               		.loc 1 199 50 is_stmt 0 view .LVU467
 2255 0000 0F93      		push r16
 2256               	.LCFI49:
 2257               		.cfi_def_cfa_offset 3
 2258               		.cfi_offset 16, -2
 2259 0002 1F93      		push r17
 2260               	.LCFI50:
 2261               		.cfi_def_cfa_offset 4
 2262               		.cfi_offset 17, -3
 2263 0004 CF93      		push r28
 2264               	.LCFI51:
 2265               		.cfi_def_cfa_offset 5
 2266               		.cfi_offset 28, -4
 2267 0006 DF93      		push r29
 2268               	.LCFI52:
 2269               		.cfi_def_cfa_offset 6
 2270               		.cfi_offset 29, -5
 2271               	/* prologue: function */
 2272               	/* frame size = 0 */
 2273               	/* stack size = 4 */
 2274               	.L__stack_usage = 4
 2275 0008 8C01      		movw r16,r24
 200:quantum/quantum.c **** 
 2276               		.loc 1 200 5 is_stmt 1 view .LVU468
 200:quantum/quantum.c **** 
 2277               		.loc 1 200 24 is_stmt 0 view .LVU469
 2278 000a 0E94 0000 		call get_record_keycode
 2279               	.LVL214:
 200:quantum/quantum.c **** 
 2280               		.loc 1 200 24 view .LVU470
 2281 000e EC01      		movw r28,r24
 2282               	.LVL215:
 220:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 2283               		.loc 1 220 5 is_stmt 1 view .LVU471
 238:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2284               		.loc 1 238 13 is_stmt 0 view .LVU472
 2285 0010 B801      		movw r22,r16
 2286 0012 0E94 0000 		call process_record_kb
 2287               	.LVL216:
 238:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2288               		.loc 1 238 48 view .LVU473
 2289 0016 8823      		tst r24
 2290 0018 01F4      		brne .+2
 2291 001a 00C0      		rjmp .L147
 273:quantum/quantum.c **** #endif
 2292               		.loc 1 273 13 discriminator 2 view .LVU474
 2293 001c B801      		movw r22,r16
 2294 001e CE01      		movw r24,r28
 2295 0020 0E94 0000 		call process_space_cadet
 2296               	.LVL217:
 238:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2297               		.loc 1 238 48 discriminator 2 view .LVU475
 2298 0024 8823      		tst r24
 2299 0026 01F4      		brne .+2
 2300 0028 00C0      		rjmp .L147
 281:quantum/quantum.c ****         case RESET:
 2301               		.loc 1 281 5 is_stmt 1 view .LVU476
 2302 002a C631      		cpi r28,22
 2303 002c 8CE5      		ldi r24,92
 2304 002e D807      		cpc r29,r24
 2305 0030 01F4      		brne .+2
 2306 0032 00C0      		rjmp .L151
 2307 0034 00F4      		brsh .L152
 2308 0036 C130      		cpi r28,1
 2309 0038 FCE5      		ldi r31,92
 2310 003a DF07      		cpc r29,r31
 2311 003c 01F4      		brne .+2
 2312 003e 00C0      		rjmp .L153
 2313 0040 00F4      		brsh .L154
 2314 0042 C115      		cp r28,__zero_reg__
 2315 0044 DC45      		sbci r29,92
 2316 0046 01F4      		brne .+2
 2317 0048 00C0      		rjmp .L155
 2318               	.L156:
 724:quantum/quantum.c **** }
 2319               		.loc 1 724 5 view .LVU477
 724:quantum/quantum.c **** }
 2320               		.loc 1 724 12 is_stmt 0 view .LVU478
 2321 004a C801      		movw r24,r16
 2322               	/* epilogue start */
 725:quantum/quantum.c **** 
 2323               		.loc 1 725 1 view .LVU479
 2324 004c DF91      		pop r29
 2325 004e CF91      		pop r28
 2326               	.LVL218:
 725:quantum/quantum.c **** 
 2327               		.loc 1 725 1 view .LVU480
 2328 0050 1F91      		pop r17
 2329 0052 0F91      		pop r16
 2330               	.LVL219:
 724:quantum/quantum.c **** }
 2331               		.loc 1 724 12 view .LVU481
 2332 0054 0C94 0000 		jmp process_action_kb
 2333               	.LVL220:
 2334               	.L152:
 281:quantum/quantum.c ****         case RESET:
 2335               		.loc 1 281 5 view .LVU482
 2336 0058 CE3D      		cpi r28,-34
 2337 005a FCE5      		ldi r31,92
 2338 005c DF07      		cpc r29,r31
 2339 005e 01F4      		brne .+2
 2340 0060 00C0      		rjmp .L157
 2341 0062 00F4      		brsh .L158
 2342 0064 CC3D      		cpi r28,-36
 2343 0066 ECE5      		ldi r30,92
 2344 0068 DE07      		cpc r29,r30
 2345 006a 01F4      		brne .+2
 2346 006c 00C0      		rjmp .L159
 2347 006e CD3D      		cpi r28,-35
 2348 0070 DC45      		sbci r29,92
 2349 0072 01F4      		brne .L156
 520:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 2350               		.loc 1 520 13 is_stmt 1 view .LVU483
 520:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 2351               		.loc 1 520 16 is_stmt 0 view .LVU484
 2352 0074 F801      		movw r30,r16
 2353 0076 8281      		ldd r24,Z+2
 2354 0078 8823      		tst r24
 2355 007a 01F4      		brne .+2
 2356 007c 00C0      		rjmp .L147
 521:quantum/quantum.c ****             }
 2357               		.loc 1 521 17 is_stmt 1 view .LVU485
 2358 007e 82E0      		ldi r24,lo8(2)
 2359 0080 00C0      		rjmp .L236
 2360               	.L158:
 281:quantum/quantum.c ****         case RESET:
 2361               		.loc 1 281 5 is_stmt 0 view .LVU486
 2362 0082 CE01      		movw r24,r28
 2363 0084 8A5F      		subi r24,-6
 2364 0086 9C45      		sbci r25,92
 2365 0088 0997      		sbiw r24,9
 2366 008a 00F4      		brsh .L156
 2367               	.L154:
 534:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 2368               		.loc 1 534 13 is_stmt 1 view .LVU487
 534:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 2369               		.loc 1 534 16 is_stmt 0 view .LVU488
 2370 008c F801      		movw r30,r16
 2371 008e 8281      		ldd r24,Z+2
 2372 0090 8823      		tst r24
 2373 0092 01F0      		breq .L156
 536:quantum/quantum.c ****                     eeconfig_init();
 2374               		.loc 1 536 17 is_stmt 1 view .LVU489
 536:quantum/quantum.c ****                     eeconfig_init();
 2375               		.loc 1 536 22 is_stmt 0 view .LVU490
 2376 0094 0E94 0000 		call eeconfig_is_enabled
 2377               	.LVL221:
 536:quantum/quantum.c ****                     eeconfig_init();
 2378               		.loc 1 536 20 view .LVU491
 2379 0098 8111      		cpse r24,__zero_reg__
 2380 009a 00C0      		rjmp .L162
 537:quantum/quantum.c ****                 }
 2381               		.loc 1 537 21 is_stmt 1 view .LVU492
 2382 009c 0E94 0000 		call eeconfig_init
 2383               	.LVL222:
 2384               	.L162:
 540:quantum/quantum.c ****                 switch (keycode) {
 2385               		.loc 1 540 17 view .LVU493
 540:quantum/quantum.c ****                 switch (keycode) {
 2386               		.loc 1 540 37 is_stmt 0 view .LVU494
 2387 00a0 0E94 0000 		call eeconfig_read_keymap
 2388               	.LVL223:
 540:quantum/quantum.c ****                 switch (keycode) {
 2389               		.loc 1 540 35 view .LVU495
 2390 00a4 9093 0000 		sts keymap_config+1,r25
 2391 00a8 8093 0000 		sts keymap_config,r24
 541:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2392               		.loc 1 541 17 is_stmt 1 view .LVU496
 2393 00ac C031      		cpi r28,16
 2394 00ae FCE5      		ldi r31,92
 2395 00b0 DF07      		cpc r29,r31
 2396 00b2 01F4      		brne .+2
 2397 00b4 00C0      		rjmp .L163
 2398 00b6 00F0      		brlo .+2
 2399 00b8 00C0      		rjmp .L164
 2400 00ba C830      		cpi r28,8
 2401 00bc ECE5      		ldi r30,92
 2402 00be DE07      		cpc r29,r30
 2403 00c0 01F4      		brne .+2
 2404 00c2 00C0      		rjmp .L165
 2405 00c4 00F0      		brlo .+2
 2406 00c6 00C0      		rjmp .L166
 2407 00c8 C430      		cpi r28,4
 2408 00ca 8CE5      		ldi r24,92
 2409 00cc D807      		cpc r29,r24
 2410 00ce 01F4      		brne .+2
 2411 00d0 00C0      		rjmp .L167
 2412 00d2 00F0      		brlo .+2
 2413 00d4 00C0      		rjmp .L168
 2414 00d6 C230      		cpi r28,2
 2415 00d8 FCE5      		ldi r31,92
 2416 00da DF07      		cpc r29,r31
 2417 00dc 01F4      		brne .+2
 2418 00de 00C0      		rjmp .L169
 2419 00e0 C330      		cpi r28,3
 2420 00e2 DC45      		sbci r29,92
 2421 00e4 01F4      		brne .+2
 2422 00e6 00C0      		rjmp .L170
 2423               	.L171:
 663:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 2424               		.loc 1 663 17 view .LVU497
 2425 00e8 8091 0000 		lds r24,keymap_config
 2426 00ec 9091 0000 		lds r25,keymap_config+1
 2427 00f0 0E94 0000 		call eeconfig_update_keymap
 2428               	.LVL224:
 664:quantum/quantum.c **** 
 2429               		.loc 1 664 17 view .LVU498
 2430 00f4 0E94 0000 		call clear_keyboard
 2431               	.LVL225:
 666:quantum/quantum.c ****             }
 2432               		.loc 1 666 17 view .LVU499
 666:quantum/quantum.c ****             }
 2433               		.loc 1 666 24 is_stmt 0 view .LVU500
 2434 00f8 00C0      		rjmp .L147
 2435               	.L155:
 283:quantum/quantum.c ****                 reset_keyboard();
 2436               		.loc 1 283 13 is_stmt 1 view .LVU501
 283:quantum/quantum.c ****                 reset_keyboard();
 2437               		.loc 1 283 16 is_stmt 0 view .LVU502
 2438 00fa F801      		movw r30,r16
 2439 00fc 8281      		ldd r24,Z+2
 2440 00fe 8111      		cpse r24,__zero_reg__
 284:quantum/quantum.c ****             }
 2441               		.loc 1 284 17 is_stmt 1 view .LVU503
 2442 0100 0E94 0000 		call reset_keyboard
 2443               	.LVL226:
 2444               	.L147:
 725:quantum/quantum.c **** 
 2445               		.loc 1 725 1 is_stmt 0 view .LVU504
 2446 0104 80E0      		ldi r24,0
 2447               	/* epilogue start */
 2448 0106 DF91      		pop r29
 2449 0108 CF91      		pop r28
 2450               	.LVL227:
 725:quantum/quantum.c **** 
 2451               		.loc 1 725 1 view .LVU505
 2452 010a 1F91      		pop r17
 2453 010c 0F91      		pop r16
 2454               	.LVL228:
 725:quantum/quantum.c **** 
 2455               		.loc 1 725 1 view .LVU506
 2456 010e 0895      		ret
 2457               	.LVL229:
 2458               	.L153:
 288:quantum/quantum.c ****                 debug_enable ^= 1;
 2459               		.loc 1 288 13 is_stmt 1 view .LVU507
 288:quantum/quantum.c ****                 debug_enable ^= 1;
 2460               		.loc 1 288 16 is_stmt 0 view .LVU508
 2461 0110 F801      		movw r30,r16
 2462 0112 8281      		ldd r24,Z+2
 2463 0114 8823      		tst r24
 2464 0116 01F0      		breq .L147
 289:quantum/quantum.c ****                 if (debug_enable) {
 2465               		.loc 1 289 17 is_stmt 1 view .LVU509
 289:quantum/quantum.c ****                 if (debug_enable) {
 2466               		.loc 1 289 30 is_stmt 0 view .LVU510
 2467 0118 9091 0000 		lds r25,debug_config
 2468 011c 892F      		mov r24,r25
 2469 011e 8E7F      		andi r24,~(1<<0)
 2470 0120 90FF      		sbrs r25,0
 2471 0122 8160      		ori r24,1<<0
 2472 0124 8093 0000 		sts debug_config,r24
 290:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 2473               		.loc 1 290 17 is_stmt 1 view .LVU511
 290:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 2474               		.loc 1 290 20 is_stmt 0 view .LVU512
 2475 0128 80FF      		sbrs r24,0
 2476 012a 00C0      		rjmp .L161
 291:quantum/quantum.c ****                 } else {
 2477               		.loc 1 291 21 is_stmt 1 view .LVU513
 2478               	.LBB54:
 291:quantum/quantum.c ****                 } else {
 2479               		.loc 1 291 21 view .LVU514
 291:quantum/quantum.c ****                 } else {
 2480               		.loc 1 291 21 view .LVU515
 2481               	.LBE54:
 2482 012c 80E0      		ldi r24,lo8(__c.3444)
 2483 012e 90E0      		ldi r25,hi8(__c.3444)
 2484               	.L235:
 293:quantum/quantum.c ****                 }
 2485               		.loc 1 293 21 is_stmt 0 view .LVU516
 2486 0130 0E94 0000 		call xputs
 2487               	.LVL230:
 2488 0134 00C0      		rjmp .L147
 2489               	.L161:
 293:quantum/quantum.c ****                 }
 2490               		.loc 1 293 21 is_stmt 1 view .LVU517
 2491               	.LBB55:
 293:quantum/quantum.c ****                 }
 2492               		.loc 1 293 21 view .LVU518
 293:quantum/quantum.c ****                 }
 2493               		.loc 1 293 21 view .LVU519
 2494               	.LBE55:
 2495 0136 80E0      		ldi r24,lo8(__c.3446)
 2496 0138 90E0      		ldi r25,hi8(__c.3446)
 2497 013a 00C0      		rjmp .L235
 2498               	.L157:
 298:quantum/quantum.c ****                 eeconfig_init();
 2499               		.loc 1 298 13 view .LVU520
 298:quantum/quantum.c ****                 eeconfig_init();
 2500               		.loc 1 298 16 is_stmt 0 view .LVU521
 2501 013c F801      		movw r30,r16
 2502 013e 8281      		ldd r24,Z+2
 2503 0140 8823      		tst r24
 2504 0142 01F0      		breq .L147
 299:quantum/quantum.c ****             }
 2505               		.loc 1 299 17 is_stmt 1 view .LVU522
 2506 0144 0E94 0000 		call eeconfig_init
 2507               	.LVL231:
 2508 0148 00C0      		rjmp .L147
 2509               	.L159:
 515:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 2510               		.loc 1 515 13 view .LVU523
 515:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 2511               		.loc 1 515 16 is_stmt 0 view .LVU524
 2512 014a F801      		movw r30,r16
 2513 014c 8281      		ldd r24,Z+2
 2514 014e 8823      		tst r24
 2515 0150 01F0      		breq .L147
 516:quantum/quantum.c ****             }
 2516               		.loc 1 516 17 is_stmt 1 view .LVU525
 2517 0152 80E0      		ldi r24,0
 2518               	.L236:
 521:quantum/quantum.c ****             }
 2519               		.loc 1 521 17 is_stmt 0 view .LVU526
 2520 0154 0E94 0000 		call set_output
 2521               	.LVL232:
 2522 0158 00C0      		rjmp .L147
 2523               	.L168:
 561:quantum/quantum.c ****                         break;
 2524               		.loc 1 561 46 view .LVU527
 2525 015a 8091 0000 		lds r24,keymap_config
 2526 015e 8061      		ori r24,lo8(1<<4)
 2527 0160 C630      		cpi r28,6
 2528 0162 ECE5      		ldi r30,92
 2529 0164 DE07      		cpc r29,r30
 2530 0166 01F4      		brne .+2
 2531 0168 00C0      		rjmp .L232
 552:quantum/quantum.c ****                         break;
 2532               		.loc 1 552 54 view .LVU528
 2533 016a 8091 0000 		lds r24,keymap_config
 2534 016e 8860      		ori r24,lo8(1<<3)
 2535 0170 C730      		cpi r28,7
 2536 0172 DC45      		sbci r29,92
 2537 0174 00F4      		brsh .+2
 2538 0176 00C0      		rjmp .L232
 564:quantum/quantum.c ****                         break;
 2539               		.loc 1 564 25 is_stmt 1 view .LVU529
 564:quantum/quantum.c ****                         break;
 2540               		.loc 1 564 54 is_stmt 0 view .LVU530
 2541 0178 8091 0000 		lds r24,keymap_config
 2542 017c 8062      		ori r24,lo8(1<<5)
 2543 017e 00C0      		rjmp .L232
 2544               	.L166:
 2545 0180 CC30      		cpi r28,12
 2546 0182 8CE5      		ldi r24,92
 2547 0184 D807      		cpc r29,r24
 2548 0186 01F4      		brne .+2
 2549 0188 00C0      		rjmp .L175
 2550 018a 00F4      		brsh .L176
 574:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2551               		.loc 1 574 54 view .LVU531
 2552 018c 8091 0000 		lds r24,keymap_config
 2553 0190 8C60      		ori r24,lo8(12)
 2554 0192 CA30      		cpi r28,10
 2555 0194 FCE5      		ldi r31,92
 2556 0196 DF07      		cpc r29,r31
 2557 0198 01F4      		brne .+2
 2558 019a 00C0      		rjmp .L232
 2559 019c 00F4      		brsh .+2
 2560 019e 00C0      		rjmp .L229
 586:quantum/quantum.c ****                         break;
 2561               		.loc 1 586 25 is_stmt 1 view .LVU532
 586:quantum/quantum.c ****                         break;
 2562               		.loc 1 586 61 is_stmt 0 view .LVU533
 2563 01a0 8091 0000 		lds r24,keymap_config
 2564 01a4 8E7F      		andi r24,lo8(~(1<<0))
 2565 01a6 00C0      		rjmp .L232
 2566               	.L176:
 595:quantum/quantum.c ****                         break;
 2567               		.loc 1 595 54 view .LVU534
 2568 01a8 8091 0000 		lds r24,keymap_config
 2569 01ac 877F      		andi r24,lo8(~(1<<3))
 2570 01ae CE30      		cpi r28,14
 2571 01b0 ECE5      		ldi r30,92
 2572 01b2 DE07      		cpc r29,r30
 2573 01b4 01F4      		brne .+2
 2574 01b6 00C0      		rjmp .L232
 592:quantum/quantum.c ****                         break;
 2575               		.loc 1 592 54 view .LVU535
 2576 01b8 8091 0000 		lds r24,keymap_config
 2577 01bc 8B7F      		andi r24,lo8(~(1<<2))
 2578 01be CF30      		cpi r28,15
 2579 01c0 DC45      		sbci r29,92
 2580 01c2 00F4      		brsh .+2
 2581 01c4 00C0      		rjmp .L232
 604:quantum/quantum.c ****                         break;
 2582               		.loc 1 604 25 is_stmt 1 view .LVU536
 604:quantum/quantum.c ****                         break;
 2583               		.loc 1 604 46 is_stmt 0 view .LVU537
 2584 01c6 8091 0000 		lds r24,keymap_config
 2585 01ca 8F7E      		andi r24,lo8(~(1<<4))
 2586 01cc 00C0      		rjmp .L232
 2587               	.L164:
 2588 01ce CB3F      		cpi r28,-5
 2589 01d0 8CE5      		ldi r24,92
 2590 01d2 D807      		cpc r29,r24
 2591 01d4 01F4      		brne .+2
 2592 01d6 00C0      		rjmp .L183
 2593 01d8 00F4      		brsh .L184
 2594 01da C331      		cpi r28,19
 2595 01dc FCE5      		ldi r31,92
 2596 01de DF07      		cpc r29,r31
 2597 01e0 01F4      		brne .+2
 2598 01e2 00C0      		rjmp .L185
 2599 01e4 00F4      		brsh .L186
 2600 01e6 C131      		cpi r28,17
 2601 01e8 ECE5      		ldi r30,92
 2602 01ea DE07      		cpc r29,r30
 2603 01ec 01F4      		brne .+2
 2604 01ee 00C0      		rjmp .L187
 2605 01f0 C231      		cpi r28,18
 2606 01f2 DC45      		sbci r29,92
 2607 01f4 01F0      		breq .+2
 2608 01f6 00C0      		rjmp .L171
 613:quantum/quantum.c ****                         keymap_config.nkro = false;
 2609               		.loc 1 613 25 is_stmt 1 view .LVU538
 2610 01f8 0E94 0000 		call clear_keyboard
 2611               	.LVL233:
 614:quantum/quantum.c ****                         break;
 2612               		.loc 1 614 25 view .LVU539
 614:quantum/quantum.c ****                         break;
 2613               		.loc 1 614 44 is_stmt 0 view .LVU540
 2614 01fc 8091 0000 		lds r24,keymap_config
 2615 0200 8F77      		andi r24,lo8(~(1<<7))
 2616 0202 00C0      		rjmp .L232
 2617               	.L186:
 2618 0204 C531      		cpi r28,21
 2619 0206 8CE5      		ldi r24,92
 2620 0208 D807      		cpc r29,r24
 2621 020a 01F4      		brne .+2
 2622 020c 00C0      		rjmp .L189
 2623 020e 00F4      		brsh .+2
 2624 0210 00C0      		rjmp .L190
 555:quantum/quantum.c ****                         break;
 2625               		.loc 1 555 54 view .LVU541
 2626 0212 8091 0000 		lds r24,keymap_config+1
 2627 0216 8160      		ori r24,lo8(1<<0)
 2628 0218 CA3F      		cpi r28,-6
 2629 021a DC45      		sbci r29,92
 2630 021c 01F0      		breq .+2
 2631 021e 00C0      		rjmp .L171
 2632               	.L234:
 558:quantum/quantum.c ****                         break;
 2633               		.loc 1 558 54 view .LVU542
 2634 0220 8093 0000 		sts keymap_config+1,r24
 559:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 2635               		.loc 1 559 25 is_stmt 1 view .LVU543
 2636 0224 00C0      		rjmp .L171
 2637               	.L184:
 2638 0226 CF3F      		cpi r28,-1
 2639 0228 8CE5      		ldi r24,92
 2640 022a D807      		cpc r29,r24
 2641 022c 01F4      		brne .+2
 2642 022e 00C0      		rjmp .L192
 2643 0230 00F4      		brsh .L193
 601:quantum/quantum.c ****                         break;
 2644               		.loc 1 601 54 is_stmt 0 view .LVU544
 2645 0232 8091 0000 		lds r24,keymap_config+1
 2646 0236 8D7F      		andi r24,lo8(~(1<<1))
 2647 0238 CD3F      		cpi r28,-3
 2648 023a FCE5      		ldi r31,92
 2649 023c DF07      		cpc r29,r31
 2650 023e 01F0      		breq .L234
 2651 0240 00F0      		brlo .L231
 580:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2652               		.loc 1 580 25 is_stmt 1 view .LVU545
 580:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2653               		.loc 1 580 54 is_stmt 0 view .LVU546
 2654 0242 8091 0000 		lds r24,keymap_config+1
 2655 0246 8360      		ori r24,lo8(3)
 2656 0248 00C0      		rjmp .L234
 2657               	.L193:
 2658 024a C130      		cpi r28,1
 2659 024c EDE5      		ldi r30,93
 2660 024e DE07      		cpc r29,r30
 2661 0250 01F4      		brne .+2
 2662 0252 00C0      		rjmp .L197
 2663 0254 00F4      		brsh .+2
 2664 0256 00C0      		rjmp .L198
 2665 0258 C230      		cpi r28,2
 2666 025a DD45      		sbci r29,93
 2667 025c 01F0      		breq .+2
 2668 025e 00C0      		rjmp .L171
 658:quantum/quantum.c ****                         break;
 2669               		.loc 1 658 25 is_stmt 1 view .LVU547
 2670 0260 80E0      		ldi r24,0
 2671 0262 00C0      		rjmp .L233
 2672               	.L169:
 543:quantum/quantum.c ****                         break;
 2673               		.loc 1 543 25 view .LVU548
 543:quantum/quantum.c ****                         break;
 2674               		.loc 1 543 61 is_stmt 0 view .LVU549
 2675 0264 8091 0000 		lds r24,keymap_config
 2676 0268 8160      		ori r24,lo8(1<<0)
 2677               	.L232:
 546:quantum/quantum.c ****                         break;
 2678               		.loc 1 546 59 view .LVU550
 2679 026a 8093 0000 		sts keymap_config,r24
 547:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 2680               		.loc 1 547 25 is_stmt 1 view .LVU551
 2681 026e 00C0      		rjmp .L171
 2682               	.L170:
 546:quantum/quantum.c ****                         break;
 2683               		.loc 1 546 25 view .LVU552
 546:quantum/quantum.c ****                         break;
 2684               		.loc 1 546 59 is_stmt 0 view .LVU553
 2685 0270 8091 0000 		lds r24,keymap_config
 2686 0274 8260      		ori r24,lo8(1<<1)
 2687 0276 00C0      		rjmp .L232
 2688               	.L167:
 549:quantum/quantum.c ****                         break;
 2689               		.loc 1 549 25 is_stmt 1 view .LVU554
 549:quantum/quantum.c ****                         break;
 2690               		.loc 1 549 54 is_stmt 0 view .LVU555
 2691 0278 8091 0000 		lds r24,keymap_config
 2692 027c 8460      		ori r24,lo8(1<<2)
 2693 027e 00C0      		rjmp .L232
 2694               	.L183:
 558:quantum/quantum.c ****                         break;
 2695               		.loc 1 558 25 is_stmt 1 view .LVU556
 558:quantum/quantum.c ****                         break;
 2696               		.loc 1 558 54 is_stmt 0 view .LVU557
 2697 0280 8091 0000 		lds r24,keymap_config+1
 2698 0284 8260      		ori r24,lo8(1<<1)
 2699 0286 00C0      		rjmp .L234
 2700               	.L165:
 567:quantum/quantum.c ****                         break;
 2701               		.loc 1 567 25 is_stmt 1 view .LVU558
 567:quantum/quantum.c ****                         break;
 2702               		.loc 1 567 64 is_stmt 0 view .LVU559
 2703 0288 8091 0000 		lds r24,keymap_config
 2704 028c 8064      		ori r24,lo8(1<<6)
 2705 028e 00C0      		rjmp .L232
 2706               	.L229:
 570:quantum/quantum.c ****                         keymap_config.nkro = true;
 2707               		.loc 1 570 25 is_stmt 1 view .LVU560
 2708 0290 0E94 0000 		call clear_keyboard
 2709               	.LVL234:
 571:quantum/quantum.c ****                         break;
 2710               		.loc 1 571 25 view .LVU561
 571:quantum/quantum.c ****                         break;
 2711               		.loc 1 571 44 is_stmt 0 view .LVU562
 2712 0294 8091 0000 		lds r24,keymap_config
 2713 0298 8068      		ori r24,lo8(1<<7)
 2714 029a 00C0      		rjmp .L232
 2715               	.L175:
 589:quantum/quantum.c ****                         break;
 2716               		.loc 1 589 25 is_stmt 1 view .LVU563
 589:quantum/quantum.c ****                         break;
 2717               		.loc 1 589 59 is_stmt 0 view .LVU564
 2718 029c 8091 0000 		lds r24,keymap_config
 2719 02a0 8D7F      		andi r24,lo8(~(1<<1))
 2720 02a2 00C0      		rjmp .L232
 2721               	.L231:
 598:quantum/quantum.c ****                         break;
 2722               		.loc 1 598 25 is_stmt 1 view .LVU565
 598:quantum/quantum.c ****                         break;
 2723               		.loc 1 598 54 is_stmt 0 view .LVU566
 2724 02a4 8091 0000 		lds r24,keymap_config+1
 2725 02a8 8E7F      		andi r24,lo8(~(1<<0))
 2726 02aa 00C0      		rjmp .L234
 2727               	.L163:
 607:quantum/quantum.c ****                         break;
 2728               		.loc 1 607 25 is_stmt 1 view .LVU567
 607:quantum/quantum.c ****                         break;
 2729               		.loc 1 607 54 is_stmt 0 view .LVU568
 2730 02ac 8091 0000 		lds r24,keymap_config
 2731 02b0 8F7D      		andi r24,lo8(~(1<<5))
 2732 02b2 00C0      		rjmp .L232
 2733               	.L187:
 610:quantum/quantum.c ****                         break;
 2734               		.loc 1 610 25 is_stmt 1 view .LVU569
 610:quantum/quantum.c ****                         break;
 2735               		.loc 1 610 64 is_stmt 0 view .LVU570
 2736 02b4 8091 0000 		lds r24,keymap_config
 2737 02b8 8F7B      		andi r24,lo8(~(1<<6))
 2738 02ba 00C0      		rjmp .L232
 2739               	.L185:
 617:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2740               		.loc 1 617 25 is_stmt 1 view .LVU571
 617:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2741               		.loc 1 617 54 is_stmt 0 view .LVU572
 2742 02bc 8091 0000 		lds r24,keymap_config
 2743 02c0 837F      		andi r24,lo8(-13)
 2744 02c2 00C0      		rjmp .L232
 2745               	.L192:
 623:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2746               		.loc 1 623 25 is_stmt 1 view .LVU573
 623:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2747               		.loc 1 623 54 is_stmt 0 view .LVU574
 2748 02c4 8091 0000 		lds r24,keymap_config+1
 2749 02c8 8C7F      		andi r24,lo8(-4)
 2750 02ca 00C0      		rjmp .L234
 2751               	.L189:
 629:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2752               		.loc 1 629 25 is_stmt 1 view .LVU575
 629:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2753               		.loc 1 629 70 is_stmt 0 view .LVU576
 2754 02cc 8091 0000 		lds r24,keymap_config
 2755 02d0 82FB      		bst r24,2
 2756 02d2 9927      		clr r25
 2757 02d4 90F9      		bld r25,0
 629:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2758               		.loc 1 629 25 view .LVU577
 2759 02d6 21E0      		ldi r18,lo8(1)
 2760 02d8 9227      		eor r25,r18
 629:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2761               		.loc 1 629 54 view .LVU578
 2762 02da 90FB      		bst r25,0
 2763 02dc 82F9      		bld r24,2
 630:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2764               		.loc 1 630 25 is_stmt 1 view .LVU579
 630:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2765               		.loc 1 630 54 is_stmt 0 view .LVU580
 2766 02de 90FB      		bst r25,0
 2767 02e0 83F9      		bld r24,3
 2768 02e2 00C0      		rjmp .L232
 2769               	.L198:
 640:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2770               		.loc 1 640 25 is_stmt 1 view .LVU581
 640:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2771               		.loc 1 640 70 is_stmt 0 view .LVU582
 2772 02e4 8091 0000 		lds r24,keymap_config+1
 640:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2773               		.loc 1 640 25 view .LVU583
 2774 02e8 982F      		mov r25,r24
 2775 02ea 9095      		com r25
 2776 02ec 9170      		andi r25,lo8(1)
 640:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2777               		.loc 1 640 54 view .LVU584
 2778 02ee 8E7F      		andi r24,lo8(-2)
 641:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2779               		.loc 1 641 25 is_stmt 1 view .LVU585
 641:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2780               		.loc 1 641 54 is_stmt 0 view .LVU586
 2781 02f0 892B      		or r24,r25
 2782 02f2 90FB      		bst r25,0
 2783 02f4 81F9      		bld r24,1
 2784 02f6 00C0      		rjmp .L234
 2785               	.L190:
 651:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 2786               		.loc 1 651 25 is_stmt 1 view .LVU587
 2787 02f8 0E94 0000 		call clear_keyboard
 2788               	.LVL235:
 652:quantum/quantum.c ****                         break;
 2789               		.loc 1 652 25 view .LVU588
 652:quantum/quantum.c ****                         break;
 2790               		.loc 1 652 60 is_stmt 0 view .LVU589
 2791 02fc 9091 0000 		lds r25,keymap_config
 652:quantum/quantum.c ****                         break;
 2792               		.loc 1 652 44 view .LVU590
 2793 0300 892F      		mov r24,r25
 2794 0302 97FB      		bst r25,7
 2795 0304 87F9      		bld r24,7
 2796 0306 8058      		subi r24,0x80
 2797 0308 00C0      		rjmp .L232
 2798               	.L197:
 655:quantum/quantum.c ****                         break;
 2799               		.loc 1 655 25 is_stmt 1 view .LVU591
 2800 030a 81E0      		ldi r24,lo8(1)
 2801               	.L233:
 658:quantum/quantum.c ****                         break;
 2802               		.loc 1 658 25 is_stmt 0 view .LVU592
 2803 030c 0E94 0000 		call eeconfig_update_handedness
 2804               	.LVL236:
 659:quantum/quantum.c ****                     default:
 2805               		.loc 1 659 25 is_stmt 1 view .LVU593
 2806 0310 00C0      		rjmp .L171
 2807               	.L151:
 2808               	.LBB56:
 671:quantum/quantum.c **** 
 2809               		.loc 1 671 13 view .LVU594
 671:quantum/quantum.c **** 
 2810               		.loc 1 671 31 is_stmt 0 view .LVU595
 2811 0312 0E94 0000 		call get_mods
 2812               	.LVL237:
 703:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 2813               		.loc 1 703 13 is_stmt 1 view .LVU596
 703:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 2814               		.loc 1 703 16 is_stmt 0 view .LVU597
 2815 0316 F801      		movw r30,r16
 2816 0318 9281      		ldd r25,Z+2
 2817 031a 9923      		tst r25
 2818 031c 01F0      		breq .L200
 671:quantum/quantum.c **** 
 2819               		.loc 1 671 21 view .LVU598
 2820 031e 8A7A      		andi r24,lo8(-86)
 2821               	.LVL238:
 704:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2822               		.loc 1 704 17 is_stmt 1 view .LVU599
 704:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2823               		.loc 1 704 39 is_stmt 0 view .LVU600
 2824 0320 91E0      		ldi r25,lo8(1)
 2825 0322 01F4      		brne .L201
 2826 0324 90E0      		ldi r25,0
 2827               	.L201:
 2828 0326 9093 0000 		sts grave_esc_was_shifted,r25
 705:quantum/quantum.c ****             } else {
 2829               		.loc 1 705 17 is_stmt 1 view .LVU601
 2830 032a 8111      		cpse r24,__zero_reg__
 2831 032c 00C0      		rjmp .L205
 2832 032e 89E2      		ldi r24,lo8(41)
 2833               	.LVL239:
 2834               	.L202:
 705:quantum/quantum.c ****             } else {
 2835               		.loc 1 705 17 is_stmt 0 discriminator 4 view .LVU602
 2836 0330 0E94 0000 		call add_key
 2837               	.LVL240:
 2838               	.L203:
 710:quantum/quantum.c ****             return false;
 2839               		.loc 1 710 13 is_stmt 1 view .LVU603
 2840 0334 0E94 0000 		call send_keyboard_report
 2841               	.LVL241:
 711:quantum/quantum.c ****         }
 2842               		.loc 1 711 13 view .LVU604
 711:quantum/quantum.c ****         }
 2843               		.loc 1 711 20 is_stmt 0 view .LVU605
 2844 0338 00C0      		rjmp .L147
 2845               	.LVL242:
 2846               	.L205:
 705:quantum/quantum.c ****             } else {
 2847               		.loc 1 705 17 view .LVU606
 2848 033a 85E3      		ldi r24,lo8(53)
 2849               	.LVL243:
 705:quantum/quantum.c ****             } else {
 2850               		.loc 1 705 17 view .LVU607
 2851 033c 00C0      		rjmp .L202
 2852               	.LVL244:
 2853               	.L200:
 707:quantum/quantum.c ****             }
 2854               		.loc 1 707 17 is_stmt 1 view .LVU608
 2855 033e 8091 0000 		lds r24,grave_esc_was_shifted
 2856               	.LVL245:
 707:quantum/quantum.c ****             }
 2857               		.loc 1 707 17 is_stmt 0 view .LVU609
 2858 0342 8111      		cpse r24,__zero_reg__
 2859 0344 00C0      		rjmp .L206
 2860 0346 89E2      		ldi r24,lo8(41)
 2861               	.L204:
 707:quantum/quantum.c ****             }
 2862               		.loc 1 707 17 discriminator 4 view .LVU610
 2863 0348 0E94 0000 		call del_key
 2864               	.LVL246:
 2865 034c 00C0      		rjmp .L203
 2866               	.L206:
 707:quantum/quantum.c ****             }
 2867               		.loc 1 707 17 view .LVU611
 2868 034e 85E3      		ldi r24,lo8(53)
 2869 0350 00C0      		rjmp .L204
 2870               	.LBE56:
 2871               		.cfi_endproc
 2872               	.LFE40:
 2874               		.section	.progmem.data.__c.3446,"a"
 2877               	__c.3446:
 2878 0000 4445 4255 		.string	"DEBUG: disabled.\n"
 2878      473A 2064 
 2878      6973 6162 
 2878      6C65 642E 
 2878      0A00 
 2879               		.section	.progmem.data.__c.3444,"a"
 2882               	__c.3444:
 2883 0000 4445 4255 		.string	"DEBUG: enabled.\n"
 2883      473A 2065 
 2883      6E61 626C 
 2883      6564 2E0A 
 2883      00
 2884               		.weak	ascii_to_keycode_lut
 2885               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2888               	ascii_to_keycode_lut:
 2889 0000 00        		.byte	0
 2890 0001 00        		.byte	0
 2891 0002 00        		.byte	0
 2892 0003 00        		.byte	0
 2893 0004 00        		.byte	0
 2894 0005 00        		.byte	0
 2895 0006 00        		.byte	0
 2896 0007 00        		.byte	0
 2897 0008 2A        		.byte	42
 2898 0009 2B        		.byte	43
 2899 000a 28        		.byte	40
 2900 000b 00        		.byte	0
 2901 000c 00        		.byte	0
 2902 000d 00        		.byte	0
 2903 000e 00        		.byte	0
 2904 000f 00        		.byte	0
 2905 0010 00        		.byte	0
 2906 0011 00        		.byte	0
 2907 0012 00        		.byte	0
 2908 0013 00        		.byte	0
 2909 0014 00        		.byte	0
 2910 0015 00        		.byte	0
 2911 0016 00        		.byte	0
 2912 0017 00        		.byte	0
 2913 0018 00        		.byte	0
 2914 0019 00        		.byte	0
 2915 001a 00        		.byte	0
 2916 001b 29        		.byte	41
 2917 001c 00        		.byte	0
 2918 001d 00        		.byte	0
 2919 001e 00        		.byte	0
 2920 001f 00        		.byte	0
 2921 0020 2C        		.byte	44
 2922 0021 1E        		.byte	30
 2923 0022 34        		.byte	52
 2924 0023 20        		.byte	32
 2925 0024 21        		.byte	33
 2926 0025 22        		.byte	34
 2927 0026 24        		.byte	36
 2928 0027 34        		.byte	52
 2929 0028 26        		.byte	38
 2930 0029 27        		.byte	39
 2931 002a 25        		.byte	37
 2932 002b 2E        		.byte	46
 2933 002c 36        		.byte	54
 2934 002d 2D        		.byte	45
 2935 002e 37        		.byte	55
 2936 002f 38        		.byte	56
 2937 0030 27        		.byte	39
 2938 0031 1E        		.byte	30
 2939 0032 1F        		.byte	31
 2940 0033 20        		.byte	32
 2941 0034 21        		.byte	33
 2942 0035 22        		.byte	34
 2943 0036 23        		.byte	35
 2944 0037 24        		.byte	36
 2945 0038 25        		.byte	37
 2946 0039 26        		.byte	38
 2947 003a 33        		.byte	51
 2948 003b 33        		.byte	51
 2949 003c 36        		.byte	54
 2950 003d 2E        		.byte	46
 2951 003e 37        		.byte	55
 2952 003f 38        		.byte	56
 2953 0040 1F        		.byte	31
 2954 0041 04        		.byte	4
 2955 0042 05        		.byte	5
 2956 0043 06        		.byte	6
 2957 0044 07        		.byte	7
 2958 0045 08        		.byte	8
 2959 0046 09        		.byte	9
 2960 0047 0A        		.byte	10
 2961 0048 0B        		.byte	11
 2962 0049 0C        		.byte	12
 2963 004a 0D        		.byte	13
 2964 004b 0E        		.byte	14
 2965 004c 0F        		.byte	15
 2966 004d 10        		.byte	16
 2967 004e 11        		.byte	17
 2968 004f 12        		.byte	18
 2969 0050 13        		.byte	19
 2970 0051 14        		.byte	20
 2971 0052 15        		.byte	21
 2972 0053 16        		.byte	22
 2973 0054 17        		.byte	23
 2974 0055 18        		.byte	24
 2975 0056 19        		.byte	25
 2976 0057 1A        		.byte	26
 2977 0058 1B        		.byte	27
 2978 0059 1C        		.byte	28
 2979 005a 1D        		.byte	29
 2980 005b 2F        		.byte	47
 2981 005c 31        		.byte	49
 2982 005d 30        		.byte	48
 2983 005e 23        		.byte	35
 2984 005f 2D        		.byte	45
 2985 0060 35        		.byte	53
 2986 0061 04        		.byte	4
 2987 0062 05        		.byte	5
 2988 0063 06        		.byte	6
 2989 0064 07        		.byte	7
 2990 0065 08        		.byte	8
 2991 0066 09        		.byte	9
 2992 0067 0A        		.byte	10
 2993 0068 0B        		.byte	11
 2994 0069 0C        		.byte	12
 2995 006a 0D        		.byte	13
 2996 006b 0E        		.byte	14
 2997 006c 0F        		.byte	15
 2998 006d 10        		.byte	16
 2999 006e 11        		.byte	17
 3000 006f 12        		.byte	18
 3001 0070 13        		.byte	19
 3002 0071 14        		.byte	20
 3003 0072 15        		.byte	21
 3004 0073 16        		.byte	22
 3005 0074 17        		.byte	23
 3006 0075 18        		.byte	24
 3007 0076 19        		.byte	25
 3008 0077 1A        		.byte	26
 3009 0078 1B        		.byte	27
 3010 0079 1C        		.byte	28
 3011 007a 1D        		.byte	29
 3012 007b 2F        		.byte	47
 3013 007c 31        		.byte	49
 3014 007d 30        		.byte	48
 3015 007e 35        		.byte	53
 3016 007f 4C        		.byte	76
 3017               		.weak	ascii_to_altgr_lut
 3018               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 3021               	ascii_to_altgr_lut:
 3022 0000 0000 0000 		.zero	128
 3022      0000 0000 
 3022      0000 0000 
 3022      0000 0000 
 3022      0000 0000 
 3023               		.weak	ascii_to_shift_lut
 3024               		.section	.progmem.data.ascii_to_shift_lut,"a"
 3027               	ascii_to_shift_lut:
 3028 0000 00        		.byte	0
 3029 0001 00        		.byte	0
 3030 0002 00        		.byte	0
 3031 0003 00        		.byte	0
 3032 0004 00        		.byte	0
 3033 0005 00        		.byte	0
 3034 0006 00        		.byte	0
 3035 0007 00        		.byte	0
 3036 0008 00        		.byte	0
 3037 0009 00        		.byte	0
 3038 000a 00        		.byte	0
 3039 000b 00        		.byte	0
 3040 000c 00        		.byte	0
 3041 000d 00        		.byte	0
 3042 000e 00        		.byte	0
 3043 000f 00        		.byte	0
 3044 0010 00        		.byte	0
 3045 0011 00        		.byte	0
 3046 0012 00        		.byte	0
 3047 0013 00        		.byte	0
 3048 0014 00        		.byte	0
 3049 0015 00        		.byte	0
 3050 0016 00        		.byte	0
 3051 0017 00        		.byte	0
 3052 0018 00        		.byte	0
 3053 0019 00        		.byte	0
 3054 001a 00        		.byte	0
 3055 001b 00        		.byte	0
 3056 001c 00        		.byte	0
 3057 001d 00        		.byte	0
 3058 001e 00        		.byte	0
 3059 001f 00        		.byte	0
 3060 0020 00        		.byte	0
 3061 0021 01        		.byte	1
 3062 0022 01        		.byte	1
 3063 0023 01        		.byte	1
 3064 0024 01        		.byte	1
 3065 0025 01        		.byte	1
 3066 0026 01        		.byte	1
 3067 0027 00        		.byte	0
 3068 0028 01        		.byte	1
 3069 0029 01        		.byte	1
 3070 002a 01        		.byte	1
 3071 002b 01        		.byte	1
 3072 002c 00        		.byte	0
 3073 002d 00        		.byte	0
 3074 002e 00        		.byte	0
 3075 002f 00        		.byte	0
 3076 0030 00        		.byte	0
 3077 0031 00        		.byte	0
 3078 0032 00        		.byte	0
 3079 0033 00        		.byte	0
 3080 0034 00        		.byte	0
 3081 0035 00        		.byte	0
 3082 0036 00        		.byte	0
 3083 0037 00        		.byte	0
 3084 0038 00        		.byte	0
 3085 0039 00        		.byte	0
 3086 003a 01        		.byte	1
 3087 003b 00        		.byte	0
 3088 003c 01        		.byte	1
 3089 003d 00        		.byte	0
 3090 003e 01        		.byte	1
 3091 003f 01        		.byte	1
 3092 0040 01        		.byte	1
 3093 0041 01        		.byte	1
 3094 0042 01        		.byte	1
 3095 0043 01        		.byte	1
 3096 0044 01        		.byte	1
 3097 0045 01        		.byte	1
 3098 0046 01        		.byte	1
 3099 0047 01        		.byte	1
 3100 0048 01        		.byte	1
 3101 0049 01        		.byte	1
 3102 004a 01        		.byte	1
 3103 004b 01        		.byte	1
 3104 004c 01        		.byte	1
 3105 004d 01        		.byte	1
 3106 004e 01        		.byte	1
 3107 004f 01        		.byte	1
 3108 0050 01        		.byte	1
 3109 0051 01        		.byte	1
 3110 0052 01        		.byte	1
 3111 0053 01        		.byte	1
 3112 0054 01        		.byte	1
 3113 0055 01        		.byte	1
 3114 0056 01        		.byte	1
 3115 0057 01        		.byte	1
 3116 0058 01        		.byte	1
 3117 0059 01        		.byte	1
 3118 005a 01        		.byte	1
 3119 005b 00        		.byte	0
 3120 005c 00        		.byte	0
 3121 005d 00        		.byte	0
 3122 005e 01        		.byte	1
 3123 005f 01        		.byte	1
 3124 0060 00        		.byte	0
 3125 0061 00        		.byte	0
 3126 0062 00        		.byte	0
 3127 0063 00        		.byte	0
 3128 0064 00        		.byte	0
 3129 0065 00        		.byte	0
 3130 0066 00        		.byte	0
 3131 0067 00        		.byte	0
 3132 0068 00        		.byte	0
 3133 0069 00        		.byte	0
 3134 006a 00        		.byte	0
 3135 006b 00        		.byte	0
 3136 006c 00        		.byte	0
 3137 006d 00        		.byte	0
 3138 006e 00        		.byte	0
 3139 006f 00        		.byte	0
 3140 0070 00        		.byte	0
 3141 0071 00        		.byte	0
 3142 0072 00        		.byte	0
 3143 0073 00        		.byte	0
 3144 0074 00        		.byte	0
 3145 0075 00        		.byte	0
 3146 0076 00        		.byte	0
 3147 0077 00        		.byte	0
 3148 0078 00        		.byte	0
 3149 0079 00        		.byte	0
 3150 007a 00        		.byte	0
 3151 007b 01        		.byte	1
 3152 007c 01        		.byte	1
 3153 007d 01        		.byte	1
 3154 007e 01        		.byte	1
 3155 007f 00        		.byte	0
 3156               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 3159               	grave_esc_was_shifted:
 3160 0000 00        		.zero	1
 3161               		.text
 3162               	.Letext0:
 3163               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdint.h"
 3164               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.4.0/lib/avr-gcc/8/gcc/avr/8.4.0/include/stddef.h"
 3165               		.file 5 "tmk_core/common/keyboard.h"
 3166               		.file 6 "tmk_core/common/action.h"
 3167               		.file 7 "tmk_core/common/report.h"
 3168               		.file 8 "tmk_core/common/led.h"
 3169               		.file 9 "tmk_core/common/host.h"
 3170               		.file 10 "tmk_core/common/avr/xprintf.h"
 3171               		.file 11 "tmk_core/common/debug.h"
 3172               		.file 12 "quantum/keycode_config.h"
 3173               		.file 13 "tmk_core/common/keycode.h"
 3174               		.file 14 "quantum/quantum_keycodes.h"
 3175               		.file 15 "quantum/keymap.h"
 3176               		.file 16 "tmk_core/common/action_layer.h"
 3177               		.file 17 "tmk_core/common/timer.h"
 3178               		.file 18 "tmk_core/common/action_util.h"
 3179               		.file 19 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdlib.h"
 3180               		.file 20 "quantum/quantum.h"
 3181               		.file 21 "tmk_core/protocol/lufa/outputselect.h"
 3182               		.file 22 "quantum/rgb.h"
 3183               		.file 23 "tmk_core/common/eeconfig.h"
 3184               		.file 24 "tmk_core/common/matrix.h"
 3185               		.file 25 "tmk_core/common/bootloader.h"
 3186               		.file 26 "quantum/process_keycode/process_space_cadet.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:4      *ABS*:000000000000003f __SREG__
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:155    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:170    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:185    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:200    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:215    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:230    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:245    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:260    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:275    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:290    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:305    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:320    .text.register_code16:0000000000000000 register_code16
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:378    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:436    .text.tap_code16:0000000000000000 tap_code16
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:475    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:497    .text.process_record_user:0000000000000000 process_record_user
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:519    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:539    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:646    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:675    .text.send_char:0000000000000000 send_char
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2888   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:3027   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:3021   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:834    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1012   .text.send_string:0000000000000000 send_string
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1032   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1261   .text.send_string_P:0000000000000000 send_string_P
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1281   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1333   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1506   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1548   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1683   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1742   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1770   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1787   .text.send_nibble:0000000000000000 send_nibble
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1852   .text.send_byte:0000000000000000 send_byte
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1892   .text.send_word:0000000000000000 send_word
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1929   .text.send_dword:0000000000000000 send_dword
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:1977   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2022   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2040   .text.led_set_user:0000000000000000 led_set_user
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2059   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2078   .text.led_update_user:0000000000000000 led_update_user
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2100   .text.led_update_kb:0000000000000000 led_update_kb
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2120   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2138   .text.led_set:0000000000000000 led_set
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2172   .text.startup_user:0000000000000000 startup_user
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2187   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2202   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2249   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2882   .progmem.data.__c.3444:0000000000000000 __c.3444
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:2877   .progmem.data.__c.3446:0000000000000000 __c.3446
/var/folders/hg/m293bnw975q820z9tg0f9gdw0000gn/T//cc3RRkTD.s:3159   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted

UNDEFINED SYMBOLS
register_weak_mods
register_mods
register_code
unregister_code
unregister_weak_mods
unregister_mods
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
rand
__divmodhi4
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
matrix_init_kb
matrix_scan_kb
clear_keyboard
process_space_cadet
eeconfig_read_keymap
keymap_config
eeconfig_update_keymap
debug_config
xputs
set_output
eeconfig_update_handedness
get_mods
add_key
send_keyboard_report
del_key
__do_clear_bss
