   1               		.file	"split_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.waitForUsb,"ax",@progbits
  11               	.global	waitForUsb
  13               	waitForUsb:
  14               	.LFB20:
  15               		.file 1 "quantum/split_common/split_util.c"
   1:quantum/split_common/split_util.c **** #include "split_util.h"
   2:quantum/split_common/split_util.c **** #include "matrix.h"
   3:quantum/split_common/split_util.c **** #include "keyboard.h"
   4:quantum/split_common/split_util.c **** #include "config.h"
   5:quantum/split_common/split_util.c **** #include "timer.h"
   6:quantum/split_common/split_util.c **** #include "transport.h"
   7:quantum/split_common/split_util.c **** #include "quantum.h"
   8:quantum/split_common/split_util.c **** 
   9:quantum/split_common/split_util.c **** #ifdef EE_HANDS
  10:quantum/split_common/split_util.c **** #    include "eeconfig.h"
  11:quantum/split_common/split_util.c **** #endif
  12:quantum/split_common/split_util.c **** 
  13:quantum/split_common/split_util.c **** #if defined(RGBLIGHT_ENABLE) && defined(RGBLED_SPLIT)
  14:quantum/split_common/split_util.c **** #    include "rgblight.h"
  15:quantum/split_common/split_util.c **** #endif
  16:quantum/split_common/split_util.c **** 
  17:quantum/split_common/split_util.c **** #ifndef SPLIT_USB_TIMEOUT
  18:quantum/split_common/split_util.c **** #    define SPLIT_USB_TIMEOUT 2500
  19:quantum/split_common/split_util.c **** #endif
  20:quantum/split_common/split_util.c **** 
  21:quantum/split_common/split_util.c **** volatile bool isLeftHand = true;
  22:quantum/split_common/split_util.c **** 
  23:quantum/split_common/split_util.c **** bool waitForUsb(void) {
  16               		.loc 1 23 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  23               		.loc 1 23 0
  24 0000 89E1      		ldi r24,lo8(25)
  25               	.LVL1:
  26               	.L3:
  27               	.LBB7:
  24:quantum/split_common/split_util.c ****     for (uint8_t i = 0; i < (SPLIT_USB_TIMEOUT / 100); i++) {
  25:quantum/split_common/split_util.c ****         // This will return true of a USB connection has been established
  26:quantum/split_common/split_util.c **** #if defined(__AVR__)
  27:quantum/split_common/split_util.c ****         if (UDADDR & _BV(ADDEN)) {
  28               		.loc 1 27 0
  29 0002 9091 E300 		lds r25,227
  30 0006 97FD      		sbrc r25,7
  31 0008 00C0      		rjmp .L4
  32               	.LVL2:
  33               	.LBB8:
  34               	.LBB9:
  35               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  36               		.loc 2 187 0
  37 000a 2FEF      		ldi r18,lo8(319999)
  38 000c 31EE      		ldi r19,hi8(319999)
  39 000e 94E0      		ldi r25,hlo8(319999)
  40 0010 2150      	1:	subi r18,1
  41 0012 3040      		sbci r19,0
  42 0014 9040      		sbci r25,0
  43 0016 01F4      		brne 1b
  44 0018 00C0      		rjmp .
  45 001a 0000      		nop
  46               	.LVL3:
  47 001c 8150      		subi r24,lo8(-(-1))
  48               	.LVL4:
  49               	.LBE9:
  50               	.LBE8:
  24:quantum/split_common/split_util.c ****     for (uint8_t i = 0; i < (SPLIT_USB_TIMEOUT / 100); i++) {
  51               		.loc 1 24 0
  52 001e 01F4      		brne .L3
  53               	.LBE7:
  28:quantum/split_common/split_util.c **** #else
  29:quantum/split_common/split_util.c ****         if (usbGetDriverStateI(&USBD1) == USB_ACTIVE) {
  30:quantum/split_common/split_util.c **** #endif
  31:quantum/split_common/split_util.c ****             return true;
  32:quantum/split_common/split_util.c ****         }
  33:quantum/split_common/split_util.c ****         wait_ms(100);
  34:quantum/split_common/split_util.c ****     }
  35:quantum/split_common/split_util.c **** 
  36:quantum/split_common/split_util.c **** #if defined(__AVR__)
  37:quantum/split_common/split_util.c ****     // Avoid NO_USB_STARTUP_CHECK - Disable USB as the previous checks seem to enable it somehow
  38:quantum/split_common/split_util.c ****     (USBCON &= ~(_BV(USBE) | _BV(OTGPADE)));
  54               		.loc 1 38 0
  55 0020 8091 D800 		lds r24,216
  56               	.LVL5:
  57 0024 8F76      		andi r24,lo8(111)
  58 0026 8093 D800 		sts 216,r24
  39:quantum/split_common/split_util.c **** #endif
  40:quantum/split_common/split_util.c **** 
  41:quantum/split_common/split_util.c ****     return false;
  59               		.loc 1 41 0
  60 002a 80E0      		ldi r24,0
  61 002c 0895      		ret
  62               	.LVL6:
  63               	.L4:
  64               	.LBB10:
  31:quantum/split_common/split_util.c ****         }
  65               		.loc 1 31 0
  66 002e 81E0      		ldi r24,lo8(1)
  67               	.LVL7:
  68               	.LBE10:
  42:quantum/split_common/split_util.c **** }
  69               		.loc 1 42 0
  70 0030 0895      		ret
  71               		.cfi_endproc
  72               	.LFE20:
  74               		.section	.text.is_keyboard_left,"ax",@progbits
  75               		.weak	is_keyboard_left
  77               	is_keyboard_left:
  78               	.LFB21:
  43:quantum/split_common/split_util.c **** 
  44:quantum/split_common/split_util.c **** __attribute__((weak)) bool is_keyboard_left(void) {
  79               		.loc 1 44 0
  80               		.cfi_startproc
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  45:quantum/split_common/split_util.c **** #if defined(SPLIT_HAND_PIN)
  46:quantum/split_common/split_util.c ****     // Test pin SPLIT_HAND_PIN for High/Low, if low it's right hand
  47:quantum/split_common/split_util.c ****     setPinInput(SPLIT_HAND_PIN);
  48:quantum/split_common/split_util.c ****     return readPin(SPLIT_HAND_PIN);
  49:quantum/split_common/split_util.c **** #elif defined(EE_HANDS)
  50:quantum/split_common/split_util.c ****     return eeconfig_read_handedness();
  85               		.loc 1 50 0
  86 0000 0C94 0000 		jmp eeconfig_read_handedness
  87               	.LVL8:
  88               		.cfi_endproc
  89               	.LFE21:
  91               		.section	.text.is_keyboard_master,"ax",@progbits
  92               		.weak	is_keyboard_master
  94               	is_keyboard_master:
  95               	.LFB22:
  51:quantum/split_common/split_util.c **** #elif defined(MASTER_RIGHT)
  52:quantum/split_common/split_util.c ****     return !is_keyboard_master();
  53:quantum/split_common/split_util.c **** #endif
  54:quantum/split_common/split_util.c **** 
  55:quantum/split_common/split_util.c ****     return is_keyboard_master();
  56:quantum/split_common/split_util.c **** }
  57:quantum/split_common/split_util.c **** 
  58:quantum/split_common/split_util.c **** __attribute__((weak)) bool is_keyboard_master(void) {
  96               		.loc 1 58 0
  97               		.cfi_startproc
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  59:quantum/split_common/split_util.c ****     static enum { UNKNOWN, MASTER, SLAVE } usbstate = UNKNOWN;
  60:quantum/split_common/split_util.c **** 
  61:quantum/split_common/split_util.c ****     // only check once, as this is called often
  62:quantum/split_common/split_util.c ****     if (usbstate == UNKNOWN) {
 102               		.loc 1 62 0
 103 0000 8091 0000 		lds r24,usbstate.3622
 104 0004 8111      		cpse r24,__zero_reg__
 105 0006 00C0      		rjmp .L9
  63:quantum/split_common/split_util.c **** #if defined(SPLIT_USB_DETECT) || defined(PROTOCOL_CHIBIOS)
  64:quantum/split_common/split_util.c ****         usbstate = waitForUsb() ? MASTER : SLAVE;
  65:quantum/split_common/split_util.c **** #elif defined(__AVR__)
  66:quantum/split_common/split_util.c ****         USBCON |= (1 << OTGPADE);  // enables VBUS pad
 106               		.loc 1 66 0
 107 0008 8091 D800 		lds r24,216
 108 000c 8061      		ori r24,lo8(16)
 109 000e 8093 D800 		sts 216,r24
 110               	.LVL9:
 111               	.LBB11:
 112               	.LBB12:
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 113               		.loc 2 276 0
 114 0012 8AE1      		ldi r24,lo8(26)
 115 0014 8A95      	1:	dec r24
 116 0016 01F4      		brne 1b
 117 0018 00C0      		rjmp .
 118               	.LVL10:
 119               	.LBE12:
 120               	.LBE11:
  67:quantum/split_common/split_util.c ****         wait_us(5);
  68:quantum/split_common/split_util.c **** 
  69:quantum/split_common/split_util.c ****         usbstate = (USBSTA & (1 << VBUS)) ? MASTER : SLAVE;  // checks state of VBUS
 121               		.loc 1 69 0
 122 001a 8091 D900 		lds r24,217
 123 001e 80FD      		sbrc r24,0
 124 0020 00C0      		rjmp .L12
 125 0022 82E0      		ldi r24,lo8(2)
 126 0024 00C0      		rjmp .L10
 127               	.L12:
 128 0026 81E0      		ldi r24,lo8(1)
 129               	.L10:
 130               		.loc 1 69 0 is_stmt 0 discriminator 4
 131 0028 8093 0000 		sts usbstate.3622,r24
 132               	.L9:
  70:quantum/split_common/split_util.c **** #else
  71:quantum/split_common/split_util.c ****         usbstate = MASTER;
  72:quantum/split_common/split_util.c **** #endif
  73:quantum/split_common/split_util.c ****     }
  74:quantum/split_common/split_util.c **** 
  75:quantum/split_common/split_util.c ****     return (usbstate == MASTER);
 133               		.loc 1 75 0 is_stmt 1
 134 002c 81E0      		ldi r24,lo8(1)
 135 002e 9091 0000 		lds r25,usbstate.3622
 136 0032 9130      		cpi r25,lo8(1)
 137 0034 01F0      		breq .L11
 138 0036 80E0      		ldi r24,0
 139               	.L11:
  76:quantum/split_common/split_util.c **** }
 140               		.loc 1 76 0
 141 0038 0895      		ret
 142               		.cfi_endproc
 143               	.LFE22:
 145               		.section	.text.keyboard_split_setup,"ax",@progbits
 146               	.global	keyboard_split_setup
 148               	keyboard_split_setup:
 149               	.LFB25:
  77:quantum/split_common/split_util.c **** 
  78:quantum/split_common/split_util.c **** static void keyboard_master_setup(void) {
  79:quantum/split_common/split_util.c **** #if defined(USE_I2C) || defined(EH)
  80:quantum/split_common/split_util.c **** #    ifdef SSD1306OLED
  81:quantum/split_common/split_util.c ****     matrix_master_OLED_init();
  82:quantum/split_common/split_util.c **** #    endif
  83:quantum/split_common/split_util.c **** #endif
  84:quantum/split_common/split_util.c ****     transport_master_init();
  85:quantum/split_common/split_util.c **** }
  86:quantum/split_common/split_util.c **** 
  87:quantum/split_common/split_util.c **** static void keyboard_slave_setup(void) { transport_slave_init(); }
  88:quantum/split_common/split_util.c **** 
  89:quantum/split_common/split_util.c **** // this code runs before the keyboard is fully initialized
  90:quantum/split_common/split_util.c **** void keyboard_split_setup(void) {
 150               		.loc 1 90 0
 151               		.cfi_startproc
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
  91:quantum/split_common/split_util.c ****     isLeftHand = is_keyboard_left();
 156               		.loc 1 91 0
 157 0000 0E94 0000 		call is_keyboard_left
 158               	.LVL11:
 159 0004 8093 0000 		sts isLeftHand,r24
  92:quantum/split_common/split_util.c **** 
  93:quantum/split_common/split_util.c **** #if defined(RGBLIGHT_ENABLE) && defined(RGBLED_SPLIT)
  94:quantum/split_common/split_util.c ****     uint8_t num_rgb_leds_split[2] = RGBLED_SPLIT;
  95:quantum/split_common/split_util.c ****     if (isLeftHand) {
  96:quantum/split_common/split_util.c ****         rgblight_set_clipping_range(0, num_rgb_leds_split[0]);
  97:quantum/split_common/split_util.c ****     } else {
  98:quantum/split_common/split_util.c ****         rgblight_set_clipping_range(num_rgb_leds_split[0], num_rgb_leds_split[1]);
  99:quantum/split_common/split_util.c ****     }
 100:quantum/split_common/split_util.c **** #endif
 101:quantum/split_common/split_util.c **** 
 102:quantum/split_common/split_util.c ****     if (is_keyboard_master()) {
 160               		.loc 1 102 0
 161 0008 0E94 0000 		call is_keyboard_master
 162               	.LVL12:
 163 000c 8111      		cpse r24,__zero_reg__
 164               	.LBB17:
 165               	.LBB18:
  84:quantum/split_common/split_util.c **** }
 166               		.loc 1 84 0
 167 000e 0C94 0000 		jmp transport_master_init
 168               	.LVL13:
 169               	.L17:
 170               	.LBE18:
 171               	.LBE17:
 172               	.LBB19:
 173               	.LBB20:
  87:quantum/split_common/split_util.c **** 
 174               		.loc 1 87 0
 175 0012 0C94 0000 		jmp transport_slave_init
 176               	.LVL14:
 177               	.LBE20:
 178               	.LBE19:
 179               		.cfi_endproc
 180               	.LFE25:
 182               		.section	.bss.usbstate.3622,"aw",@nobits
 185               	usbstate.3622:
 186 0000 00        		.zero	1
 187               	.global	isLeftHand
 188               		.section	.data.isLeftHand,"aw",@progbits
 191               	isLeftHand:
 192 0000 01        		.byte	1
 193               		.text
 194               	.Letext0:
 195               		.file 3 "/usr/lib/avr/include/stdint.h"
 196               		.file 4 "tmk_core/common/report.h"
 197               		.file 5 "tmk_core/common/action_util.h"
 198               		.file 6 "tmk_core/common/eeconfig.h"
 199               		.file 7 "quantum/split_common/transport.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 split_util.c
     /tmp/ccIPGAPM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIPGAPM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIPGAPM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIPGAPM.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIPGAPM.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIPGAPM.s:13     .text.waitForUsb:0000000000000000 waitForUsb
     /tmp/ccIPGAPM.s:77     .text.is_keyboard_left:0000000000000000 is_keyboard_left
     /tmp/ccIPGAPM.s:94     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccIPGAPM.s:185    .bss.usbstate.3622:0000000000000000 usbstate.3622
     /tmp/ccIPGAPM.s:148    .text.keyboard_split_setup:0000000000000000 keyboard_split_setup
     /tmp/ccIPGAPM.s:191    .data.isLeftHand:0000000000000000 isLeftHand

UNDEFINED SYMBOLS
eeconfig_read_handedness
transport_master_init
transport_slave_init
__do_copy_data
__do_clear_bss
