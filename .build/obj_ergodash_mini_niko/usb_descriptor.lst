   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  44:tmk_core/protocol/usb_descriptor.c **** 
  45:tmk_core/protocol/usb_descriptor.c **** /*
  46:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  47:tmk_core/protocol/usb_descriptor.c ****  */
  48:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  49:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  50:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  51:tmk_core/protocol/usb_descriptor.c **** #else
  52:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  53:tmk_core/protocol/usb_descriptor.c **** #endif
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  55:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  57:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  58:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  59:tmk_core/protocol/usb_descriptor.c **** #endif
  60:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  61:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  69:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  73:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  74:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  82:tmk_core/protocol/usb_descriptor.c **** 
  83:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  87:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  88:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  90:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  94:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  95:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  96:tmk_core/protocol/usb_descriptor.c **** };
  97:tmk_core/protocol/usb_descriptor.c **** #endif
  98:tmk_core/protocol/usb_descriptor.c **** 
  99:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 100:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 103:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 104:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 105:tmk_core/protocol/usb_descriptor.c **** #    endif
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 107:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 109:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 110:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 111:tmk_core/protocol/usb_descriptor.c **** #    endif
 112:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 113:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 114:tmk_core/protocol/usb_descriptor.c ****             // Buttons (5 bits)
 115:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05), // Button 5
 118:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 123:tmk_core/protocol/usb_descriptor.c ****             // Button padding (3 bits)
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 127:tmk_core/protocol/usb_descriptor.c **** 
 128:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 133:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 137:tmk_core/protocol/usb_descriptor.c **** 
 138:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 142:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 143:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 145:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 150:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 153:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 155:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 156:tmk_core/protocol/usb_descriptor.c **** };
 157:tmk_core/protocol/usb_descriptor.c **** #    endif
 158:tmk_core/protocol/usb_descriptor.c **** #endif
 159:tmk_core/protocol/usb_descriptor.c **** 
 160:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 161:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 162:tmk_core/protocol/usb_descriptor.c **** #endif
 163:tmk_core/protocol/usb_descriptor.c **** 
 164:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 168:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 169:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), // System Power Down
 170:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x0083), // System Wake Up
 171:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 172:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 177:tmk_core/protocol/usb_descriptor.c **** 
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), // Consumer Control
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), // AC Distribute Vertically
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 188:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 189:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 190:tmk_core/protocol/usb_descriptor.c **** #endif
 191:tmk_core/protocol/usb_descriptor.c **** 
 192:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 195:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 196:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 197:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 206:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 211:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 213:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 215:tmk_core/protocol/usb_descriptor.c **** 
 216:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 223:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 227:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 228:tmk_core/protocol/usb_descriptor.c **** #endif
 229:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 230:tmk_core/protocol/usb_descriptor.c **** };
 231:tmk_core/protocol/usb_descriptor.c **** #endif
 232:tmk_core/protocol/usb_descriptor.c **** 
 233:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 234:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), // Vendor Defined
 236:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),         // Vendor Defined
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 238:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 245:tmk_core/protocol/usb_descriptor.c **** 
 246:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 250:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 251:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 253:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 254:tmk_core/protocol/usb_descriptor.c **** };
 255:tmk_core/protocol/usb_descriptor.c **** #endif
 256:tmk_core/protocol/usb_descriptor.c **** 
 257:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 258:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 259:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 262:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 263:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 264:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 265:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 266:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 267:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 269:tmk_core/protocol/usb_descriptor.c **** 
 270:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 271:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 274:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 275:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 276:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 277:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 278:tmk_core/protocol/usb_descriptor.c **** };
 279:tmk_core/protocol/usb_descriptor.c **** #endif
 280:tmk_core/protocol/usb_descriptor.c **** 
 281:tmk_core/protocol/usb_descriptor.c **** /*
 282:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 283:tmk_core/protocol/usb_descriptor.c ****  */
 284:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 285:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 286:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 287:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 288:tmk_core/protocol/usb_descriptor.c ****     },
 289:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(1, 1, 0),
 290:tmk_core/protocol/usb_descriptor.c **** 
 291:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 292:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 293:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 294:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 295:tmk_core/protocol/usb_descriptor.c **** #else
 296:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 297:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 298:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 299:tmk_core/protocol/usb_descriptor.c **** #endif
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 302:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 303:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 304:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 305:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 306:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 307:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 308:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 309:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 310:tmk_core/protocol/usb_descriptor.c **** };
 311:tmk_core/protocol/usb_descriptor.c **** 
 312:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 313:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 314:tmk_core/protocol/usb_descriptor.c **** #endif
 315:tmk_core/protocol/usb_descriptor.c **** 
 316:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 317:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 318:tmk_core/protocol/usb_descriptor.c **** #endif
 319:tmk_core/protocol/usb_descriptor.c **** 
 320:tmk_core/protocol/usb_descriptor.c **** /*
 321:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 322:tmk_core/protocol/usb_descriptor.c ****  */
 323:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 324:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 325:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 326:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 327:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 328:tmk_core/protocol/usb_descriptor.c ****         },
 329:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 330:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 331:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 332:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 333:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 334:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 335:tmk_core/protocol/usb_descriptor.c ****     },
 336:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 337:tmk_core/protocol/usb_descriptor.c ****     /*
 338:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 339:tmk_core/protocol/usb_descriptor.c ****      */
 340:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 341:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 342:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 343:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 344:tmk_core/protocol/usb_descriptor.c ****         },
 345:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 346:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 347:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 348:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 349:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 350:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 351:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 352:tmk_core/protocol/usb_descriptor.c ****     },
 353:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 354:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 355:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 356:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 357:tmk_core/protocol/usb_descriptor.c ****         },
 358:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 359:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 360:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 361:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 362:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 363:tmk_core/protocol/usb_descriptor.c ****     },
 364:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 365:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 366:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 367:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 368:tmk_core/protocol/usb_descriptor.c ****         },
 369:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 370:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 371:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 372:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 373:tmk_core/protocol/usb_descriptor.c ****     },
 374:tmk_core/protocol/usb_descriptor.c **** #endif
 375:tmk_core/protocol/usb_descriptor.c **** 
 376:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 377:tmk_core/protocol/usb_descriptor.c ****     /*
 378:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 379:tmk_core/protocol/usb_descriptor.c ****      */
 380:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 381:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 382:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 383:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 384:tmk_core/protocol/usb_descriptor.c ****         },
 385:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 386:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 387:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 388:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 389:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 390:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 391:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 392:tmk_core/protocol/usb_descriptor.c ****     },
 393:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 394:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 395:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 396:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 397:tmk_core/protocol/usb_descriptor.c ****         },
 398:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 399:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 400:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 401:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 402:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 403:tmk_core/protocol/usb_descriptor.c ****     },
 404:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 405:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 406:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 407:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 408:tmk_core/protocol/usb_descriptor.c ****         },
 409:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 410:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 411:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 412:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 413:tmk_core/protocol/usb_descriptor.c ****     },
 414:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 415:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 416:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 417:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 418:tmk_core/protocol/usb_descriptor.c ****         },
 419:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 420:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 421:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 422:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 423:tmk_core/protocol/usb_descriptor.c ****     },
 424:tmk_core/protocol/usb_descriptor.c **** #endif
 425:tmk_core/protocol/usb_descriptor.c **** 
 426:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 427:tmk_core/protocol/usb_descriptor.c ****     /*
 428:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 429:tmk_core/protocol/usb_descriptor.c ****      */
 430:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 431:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 432:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 433:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 434:tmk_core/protocol/usb_descriptor.c ****         },
 435:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 436:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 437:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 438:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 439:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 440:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 441:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 442:tmk_core/protocol/usb_descriptor.c ****     },
 443:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 444:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 445:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 446:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 447:tmk_core/protocol/usb_descriptor.c ****         },
 448:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 449:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 450:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 451:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 452:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 453:tmk_core/protocol/usb_descriptor.c ****     },
 454:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 455:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 456:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 457:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 458:tmk_core/protocol/usb_descriptor.c ****         },
 459:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 460:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 461:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 462:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 463:tmk_core/protocol/usb_descriptor.c ****     },
 464:tmk_core/protocol/usb_descriptor.c **** #endif
 465:tmk_core/protocol/usb_descriptor.c **** 
 466:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 467:tmk_core/protocol/usb_descriptor.c ****     /*
 468:tmk_core/protocol/usb_descriptor.c ****      * Shared
 469:tmk_core/protocol/usb_descriptor.c ****      */
 470:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 471:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 472:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 473:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 474:tmk_core/protocol/usb_descriptor.c ****         },
 475:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 476:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 477:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 478:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 479:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 480:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 481:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 482:tmk_core/protocol/usb_descriptor.c **** #    else
 483:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 484:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 485:tmk_core/protocol/usb_descriptor.c **** #    endif
 486:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 487:tmk_core/protocol/usb_descriptor.c ****     },
 488:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 489:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 490:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 491:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 492:tmk_core/protocol/usb_descriptor.c ****         },
 493:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 494:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 495:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 496:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 497:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 498:tmk_core/protocol/usb_descriptor.c ****     },
 499:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 500:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 501:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 502:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 503:tmk_core/protocol/usb_descriptor.c ****         },
 504:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 505:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 506:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 507:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 508:tmk_core/protocol/usb_descriptor.c ****     },
 509:tmk_core/protocol/usb_descriptor.c **** #endif
 510:tmk_core/protocol/usb_descriptor.c **** 
 511:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 512:tmk_core/protocol/usb_descriptor.c ****     /*
 513:tmk_core/protocol/usb_descriptor.c ****      * Console
 514:tmk_core/protocol/usb_descriptor.c ****      */
 515:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 516:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 517:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 518:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 519:tmk_core/protocol/usb_descriptor.c ****         },
 520:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 521:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 522:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 523:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 524:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 525:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 526:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 527:tmk_core/protocol/usb_descriptor.c ****     },
 528:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 529:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 530:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 531:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 532:tmk_core/protocol/usb_descriptor.c ****         },
 533:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 534:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 535:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 536:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 537:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 538:tmk_core/protocol/usb_descriptor.c ****     },
 539:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 540:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 541:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 542:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 543:tmk_core/protocol/usb_descriptor.c ****         },
 544:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 545:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 546:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 547:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 548:tmk_core/protocol/usb_descriptor.c ****     },
 549:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 550:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 551:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 552:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 553:tmk_core/protocol/usb_descriptor.c ****         },
 554:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 555:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 556:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 557:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 558:tmk_core/protocol/usb_descriptor.c ****     },
 559:tmk_core/protocol/usb_descriptor.c **** #endif
 560:tmk_core/protocol/usb_descriptor.c **** 
 561:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 562:tmk_core/protocol/usb_descriptor.c ****     /*
 563:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 564:tmk_core/protocol/usb_descriptor.c ****      */
 565:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 566:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 567:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 568:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 569:tmk_core/protocol/usb_descriptor.c ****         },
 570:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 571:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 572:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 573:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 574:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 575:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 576:tmk_core/protocol/usb_descriptor.c ****     },
 577:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 578:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 579:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 580:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 581:tmk_core/protocol/usb_descriptor.c ****         },
 582:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 583:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 584:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 585:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 586:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 587:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 588:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 589:tmk_core/protocol/usb_descriptor.c ****     },
 590:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 591:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 592:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 593:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 594:tmk_core/protocol/usb_descriptor.c ****         },
 595:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 596:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 597:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 598:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 599:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 600:tmk_core/protocol/usb_descriptor.c ****     },
 601:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 602:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 603:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 604:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 605:tmk_core/protocol/usb_descriptor.c ****         },
 606:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 607:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 608:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 609:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 610:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 611:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 612:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 613:tmk_core/protocol/usb_descriptor.c ****     },
 614:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 615:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 616:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 617:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 618:tmk_core/protocol/usb_descriptor.c ****         },
 619:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 620:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 621:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 622:tmk_core/protocol/usb_descriptor.c ****     },
 623:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 624:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 625:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 626:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 627:tmk_core/protocol/usb_descriptor.c ****         },
 628:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 629:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 630:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 631:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 632:tmk_core/protocol/usb_descriptor.c ****     },
 633:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 634:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 635:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 636:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 637:tmk_core/protocol/usb_descriptor.c ****         },
 638:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 639:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 640:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 641:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 642:tmk_core/protocol/usb_descriptor.c ****     },
 643:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 644:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 645:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 646:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 647:tmk_core/protocol/usb_descriptor.c ****         },
 648:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 649:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 650:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 651:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 652:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 653:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 654:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 655:tmk_core/protocol/usb_descriptor.c ****     },
 656:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 657:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 658:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 659:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 660:tmk_core/protocol/usb_descriptor.c ****         },
 661:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 662:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 663:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 664:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 665:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 666:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 667:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 668:tmk_core/protocol/usb_descriptor.c ****     },
 669:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 670:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 671:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 672:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 673:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 674:tmk_core/protocol/usb_descriptor.c ****             },
 675:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_OUT_EPADDR,
 676:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 677:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 678:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 679:tmk_core/protocol/usb_descriptor.c ****         },
 680:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 681:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 682:tmk_core/protocol/usb_descriptor.c ****     },
 683:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 684:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 685:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 686:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 687:tmk_core/protocol/usb_descriptor.c ****         },
 688:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 689:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 690:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 691:tmk_core/protocol/usb_descriptor.c ****     },
 692:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 693:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 694:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 695:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 696:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 697:tmk_core/protocol/usb_descriptor.c ****             },
 698:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_IN_EPADDR,
 699:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 700:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 701:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 702:tmk_core/protocol/usb_descriptor.c ****         },
 703:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 704:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 705:tmk_core/protocol/usb_descriptor.c ****     },
 706:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 707:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 708:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 709:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 710:tmk_core/protocol/usb_descriptor.c ****         },
 711:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 712:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 713:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 714:tmk_core/protocol/usb_descriptor.c ****     },
 715:tmk_core/protocol/usb_descriptor.c **** #endif
 716:tmk_core/protocol/usb_descriptor.c **** 
 717:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 718:tmk_core/protocol/usb_descriptor.c ****     /*
 719:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 720:tmk_core/protocol/usb_descriptor.c ****      */
 721:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 722:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 723:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 724:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 725:tmk_core/protocol/usb_descriptor.c ****         },
 726:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 727:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 728:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 729:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 730:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 731:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 732:tmk_core/protocol/usb_descriptor.c ****     },
 733:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 734:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 735:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 736:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 737:tmk_core/protocol/usb_descriptor.c ****         },
 738:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 739:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 740:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 741:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 742:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 743:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 744:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 745:tmk_core/protocol/usb_descriptor.c ****     },
 746:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 747:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 748:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 749:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 750:tmk_core/protocol/usb_descriptor.c ****         },
 751:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 752:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 753:tmk_core/protocol/usb_descriptor.c ****     },
 754:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 755:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 756:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 757:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 758:tmk_core/protocol/usb_descriptor.c ****         },
 759:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 760:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 761:tmk_core/protocol/usb_descriptor.c ****     },
 762:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 763:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 764:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 765:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 766:tmk_core/protocol/usb_descriptor.c ****         },
 767:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 768:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 769:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 770:tmk_core/protocol/usb_descriptor.c ****     },
 771:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 772:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 773:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 774:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 775:tmk_core/protocol/usb_descriptor.c ****         },
 776:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 777:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 778:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 779:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 780:tmk_core/protocol/usb_descriptor.c ****     },
 781:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 782:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 783:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 784:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 785:tmk_core/protocol/usb_descriptor.c ****         },
 786:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 787:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 788:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 789:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 790:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 791:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 792:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 793:tmk_core/protocol/usb_descriptor.c ****     },
 794:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 795:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 796:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 797:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 798:tmk_core/protocol/usb_descriptor.c ****         },
 799:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_OUT_EPADDR,
 800:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 801:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 802:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 803:tmk_core/protocol/usb_descriptor.c ****     },
 804:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 805:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 806:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 807:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 808:tmk_core/protocol/usb_descriptor.c ****         },
 809:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_IN_EPADDR,
 810:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 811:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 812:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 813:tmk_core/protocol/usb_descriptor.c ****     },
 814:tmk_core/protocol/usb_descriptor.c **** #endif
 815:tmk_core/protocol/usb_descriptor.c **** };
 816:tmk_core/protocol/usb_descriptor.c **** 
 817:tmk_core/protocol/usb_descriptor.c **** /*
 818:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 819:tmk_core/protocol/usb_descriptor.c ****  */
 820:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
 821:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 822:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
 823:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 824:tmk_core/protocol/usb_descriptor.c ****     },
 825:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
 826:tmk_core/protocol/usb_descriptor.c **** };
 827:tmk_core/protocol/usb_descriptor.c **** 
 828:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
 829:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 830:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
 831:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 832:tmk_core/protocol/usb_descriptor.c ****     },
 833:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
 834:tmk_core/protocol/usb_descriptor.c **** };
 835:tmk_core/protocol/usb_descriptor.c **** 
 836:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
 837:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 838:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
 839:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 840:tmk_core/protocol/usb_descriptor.c ****     },
 841:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
 842:tmk_core/protocol/usb_descriptor.c **** };
 843:tmk_core/protocol/usb_descriptor.c **** 
 844:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 845:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 846:tmk_core/protocol/usb_descriptor.c **** #endif
 847:tmk_core/protocol/usb_descriptor.c **** 
 848:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
 849:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 850:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER)) - 1), // Subtract 1 for
 851:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 852:tmk_core/protocol/usb_descriptor.c ****     },
 853:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(SERIAL_NUMBER)
 854:tmk_core/protocol/usb_descriptor.c **** };
 855:tmk_core/protocol/usb_descriptor.c **** 
 856:tmk_core/protocol/usb_descriptor.c **** // clang-format on
 857:tmk_core/protocol/usb_descriptor.c **** 
 858:tmk_core/protocol/usb_descriptor.c **** /**
 859:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 860:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 861:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 862:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 863:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 864:tmk_core/protocol/usb_descriptor.c ****  */
 865:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  16               		.loc 1 865 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 866:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
 867:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
 868:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
 869:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 870:tmk_core/protocol/usb_descriptor.c **** 
 871:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  23               		.loc 1 871 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
  26 0004 2330      		cpi r18,3
  27 0006 3105      		cpc r19,__zero_reg__
  28 0008 01F0      		breq .L3
  29 000a 00F4      		brsh .L4
  30 000c 2130      		cpi r18,1
  31 000e 3105      		cpc r19,__zero_reg__
  32 0010 01F0      		breq .L5
  33 0012 2230      		cpi r18,2
  34 0014 3105      		cpc r19,__zero_reg__
  35 0016 01F0      		breq .+2
  36 0018 00C0      		rjmp .L23
  37               	.LVL1:
 872:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 873:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 874:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 875:tmk_core/protocol/usb_descriptor.c **** 
 876:tmk_core/protocol/usb_descriptor.c ****             break;
 877:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 878:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 879:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 879 0
  39 001a 8BE3      		ldi r24,lo8(59)
  40 001c 90E0      		ldi r25,0
  41               	.LVL2:
 878:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  42               		.loc 1 878 0
  43 001e 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 0020 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 880:tmk_core/protocol/usb_descriptor.c **** 
 881:tmk_core/protocol/usb_descriptor.c ****             break;
  45               		.loc 1 881 0
  46 0022 00C0      		rjmp .L2
  47               	.LVL3:
  48               	.L4:
 871:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
  49               		.loc 1 871 0
  50 0024 2132      		cpi r18,33
  51 0026 3105      		cpc r19,__zero_reg__
  52 0028 01F0      		breq .L7
  53 002a 2232      		cpi r18,34
  54 002c 3105      		cpc r19,__zero_reg__
  55 002e 01F0      		breq .L8
  56 0030 00C0      		rjmp .L23
  57               	.L5:
 874:tmk_core/protocol/usb_descriptor.c **** 
  58               		.loc 1 874 0
  59 0032 82E1      		ldi r24,lo8(18)
  60 0034 90E0      		ldi r25,0
  61               	.LVL4:
 873:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  62               		.loc 1 873 0
  63 0036 20E0      		ldi r18,lo8(DeviceDescriptor)
  64 0038 30E0      		ldi r19,hi8(DeviceDescriptor)
  65 003a 00C0      		rjmp .L2
  66               	.LVL5:
  67               	.L3:
 882:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 883:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
  68               		.loc 1 883 0
  69 003c 9927      		clr r25
  70               	.LVL6:
  71 003e 8130      		cpi r24,1
  72 0040 9105      		cpc r25,__zero_reg__
  73 0042 01F0      		breq .L9
  74 0044 00F0      		brlo .L10
  75 0046 8230      		cpi r24,2
  76 0048 9105      		cpc r25,__zero_reg__
  77 004a 01F0      		breq .L11
  78 004c 0397      		sbiw r24,3
  79 004e 01F4      		brne .L23
  80               	.LVL7:
  81               	.LBB2:
 884:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 885:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 886:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 887:tmk_core/protocol/usb_descriptor.c **** 
 888:tmk_core/protocol/usb_descriptor.c ****                     break;
 889:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 890:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 891:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 892:tmk_core/protocol/usb_descriptor.c **** 
 893:tmk_core/protocol/usb_descriptor.c ****                     break;
 894:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 895:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 896:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 897:tmk_core/protocol/usb_descriptor.c **** 
 898:tmk_core/protocol/usb_descriptor.c ****                     break;
 899:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 900:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 901:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
  82               		.loc 1 901 0
  83 0050 E0E0      		ldi r30,lo8(SerialNumberString)
  84 0052 F0E0      		ldi r31,hi8(SerialNumberString)
  85 0054 00C0      		rjmp .L24
  86               	.LVL8:
  87               	.L10:
  88               	.LBE2:
  89               	.LBB3:
 886:tmk_core/protocol/usb_descriptor.c **** 
  90               		.loc 1 886 0
  91 0056 E0E0      		ldi r30,lo8(LanguageString)
  92 0058 F0E0      		ldi r31,hi8(LanguageString)
  93 005a 00C0      		rjmp .L24
  94               	.LVL9:
  95               	.L9:
  96               	.LBE3:
  97               	.LBB4:
 891:tmk_core/protocol/usb_descriptor.c **** 
  98               		.loc 1 891 0
  99 005c E0E0      		ldi r30,lo8(ManufacturerString)
 100 005e F0E0      		ldi r31,hi8(ManufacturerString)
 101 0060 00C0      		rjmp .L24
 102               	.LVL10:
 103               	.L11:
 104               	.LBE4:
 105               	.LBB5:
 896:tmk_core/protocol/usb_descriptor.c **** 
 106               		.loc 1 896 0
 107 0062 E0E0      		ldi r30,lo8(ProductString)
 108 0064 F0E0      		ldi r31,hi8(ProductString)
 109               	.LVL11:
 110               	.L24:
 111               	.LBE5:
 112               	.LBB6:
 113               		.loc 1 901 0
 114               	/* #APP */
 115               	 ;  901 "tmk_core/protocol/usb_descriptor.c" 1
 116 0066 8491      		lpm r24, Z
 117               		
 118               	 ;  0 "" 2
 119               	.LVL12:
 120               	/* #NOAPP */
 121               	.LBE6:
 122 0068 90E0      		ldi r25,0
 123               	.LVL13:
 900:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 124               		.loc 1 900 0
 125 006a 9F01      		movw r18,r30
 902:tmk_core/protocol/usb_descriptor.c **** 
 903:tmk_core/protocol/usb_descriptor.c ****                     break;
 126               		.loc 1 903 0
 127 006c 00C0      		rjmp .L2
 128               	.LVL14:
 129               	.L7:
 904:tmk_core/protocol/usb_descriptor.c ****             }
 905:tmk_core/protocol/usb_descriptor.c **** 
 906:tmk_core/protocol/usb_descriptor.c ****             break;
 907:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 908:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 130               		.loc 1 908 0
 131 006e 6115      		cp r22,__zero_reg__
 132 0070 7105      		cpc r23,__zero_reg__
 133 0072 01F0      		breq .L13
 134 0074 6130      		cpi r22,1
 135 0076 7105      		cpc r23,__zero_reg__
 136 0078 01F4      		brne .L23
 137               	.LVL15:
 909:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 910:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 911:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 912:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 913:tmk_core/protocol/usb_descriptor.c ****                     break;
 914:tmk_core/protocol/usb_descriptor.c **** #endif
 915:tmk_core/protocol/usb_descriptor.c **** 
 916:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 917:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 918:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 919:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 920:tmk_core/protocol/usb_descriptor.c **** 
 921:tmk_core/protocol/usb_descriptor.c ****                     break;
 922:tmk_core/protocol/usb_descriptor.c **** #endif
 923:tmk_core/protocol/usb_descriptor.c **** 
 924:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 925:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 926:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 927:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 138               		.loc 1 927 0
 139 007a 89E0      		ldi r24,lo8(9)
 140 007c 90E0      		ldi r25,0
 141               	.LVL16:
 926:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 142               		.loc 1 926 0
 143 007e 20E0      		ldi r18,lo8(ConfigurationDescriptor+43)
 144 0080 30E0      		ldi r19,hi8(ConfigurationDescriptor+43)
 145               	.LVL17:
 928:tmk_core/protocol/usb_descriptor.c **** 
 929:tmk_core/protocol/usb_descriptor.c ****                     break;
 146               		.loc 1 929 0
 147 0082 00C0      		rjmp .L2
 148               	.LVL18:
 149               	.L13:
 912:tmk_core/protocol/usb_descriptor.c ****                     break;
 150               		.loc 1 912 0
 151 0084 89E0      		ldi r24,lo8(9)
 152 0086 90E0      		ldi r25,0
 153               	.LVL19:
 911:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 154               		.loc 1 911 0
 155 0088 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 156 008a 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 157 008c 00C0      		rjmp .L2
 158               	.LVL20:
 159               	.L8:
 930:tmk_core/protocol/usb_descriptor.c **** #endif
 931:tmk_core/protocol/usb_descriptor.c **** 
 932:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 933:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 934:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 935:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 936:tmk_core/protocol/usb_descriptor.c **** 
 937:tmk_core/protocol/usb_descriptor.c ****                     break;
 938:tmk_core/protocol/usb_descriptor.c **** #endif
 939:tmk_core/protocol/usb_descriptor.c **** 
 940:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 941:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 942:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 943:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 944:tmk_core/protocol/usb_descriptor.c **** 
 945:tmk_core/protocol/usb_descriptor.c ****                     break;
 946:tmk_core/protocol/usb_descriptor.c **** #endif
 947:tmk_core/protocol/usb_descriptor.c ****             }
 948:tmk_core/protocol/usb_descriptor.c **** 
 949:tmk_core/protocol/usb_descriptor.c ****             break;
 950:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 951:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 160               		.loc 1 951 0
 161 008e 6115      		cp r22,__zero_reg__
 162 0090 7105      		cpc r23,__zero_reg__
 163 0092 01F0      		breq .L15
 164 0094 6130      		cpi r22,1
 165 0096 7105      		cpc r23,__zero_reg__
 166 0098 01F4      		brne .L23
 167               	.LVL21:
 952:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 953:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 954:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 955:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 956:tmk_core/protocol/usb_descriptor.c **** 
 957:tmk_core/protocol/usb_descriptor.c ****                     break;
 958:tmk_core/protocol/usb_descriptor.c **** #endif
 959:tmk_core/protocol/usb_descriptor.c **** 
 960:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 961:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 962:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 963:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 964:tmk_core/protocol/usb_descriptor.c **** 
 965:tmk_core/protocol/usb_descriptor.c ****                     break;
 966:tmk_core/protocol/usb_descriptor.c **** #endif
 967:tmk_core/protocol/usb_descriptor.c **** 
 968:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 969:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 970:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 971:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 168               		.loc 1 971 0
 169 009a 86E3      		ldi r24,lo8(54)
 170 009c 90E0      		ldi r25,0
 171               	.LVL22:
 970:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 172               		.loc 1 970 0
 173 009e 20E0      		ldi r18,lo8(SharedReport)
 174 00a0 30E0      		ldi r19,hi8(SharedReport)
 972:tmk_core/protocol/usb_descriptor.c **** 
 973:tmk_core/protocol/usb_descriptor.c ****                     break;
 175               		.loc 1 973 0
 176 00a2 00C0      		rjmp .L2
 177               	.LVL23:
 178               	.L15:
 955:tmk_core/protocol/usb_descriptor.c **** 
 179               		.loc 1 955 0
 180 00a4 80E4      		ldi r24,lo8(64)
 181 00a6 90E0      		ldi r25,0
 182               	.LVL24:
 954:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 183               		.loc 1 954 0
 184 00a8 20E0      		ldi r18,lo8(KeyboardReport)
 185 00aa 30E0      		ldi r19,hi8(KeyboardReport)
 186 00ac 00C0      		rjmp .L2
 187               	.L23:
 869:tmk_core/protocol/usb_descriptor.c **** 
 188               		.loc 1 869 0
 189 00ae 80E0      		ldi r24,0
 190 00b0 90E0      		ldi r25,0
 868:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 191               		.loc 1 868 0
 192 00b2 20E0      		ldi r18,0
 193 00b4 30E0      		ldi r19,0
 194               	.LVL25:
 195               	.L2:
 974:tmk_core/protocol/usb_descriptor.c **** #endif
 975:tmk_core/protocol/usb_descriptor.c **** 
 976:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 977:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 978:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 979:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 980:tmk_core/protocol/usb_descriptor.c **** 
 981:tmk_core/protocol/usb_descriptor.c ****                     break;
 982:tmk_core/protocol/usb_descriptor.c **** #endif
 983:tmk_core/protocol/usb_descriptor.c **** 
 984:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 985:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 986:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 987:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 988:tmk_core/protocol/usb_descriptor.c **** 
 989:tmk_core/protocol/usb_descriptor.c ****                     break;
 990:tmk_core/protocol/usb_descriptor.c **** #endif
 991:tmk_core/protocol/usb_descriptor.c ****             }
 992:tmk_core/protocol/usb_descriptor.c **** 
 993:tmk_core/protocol/usb_descriptor.c ****             break;
 994:tmk_core/protocol/usb_descriptor.c ****     }
 995:tmk_core/protocol/usb_descriptor.c **** 
 996:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 196               		.loc 1 996 0
 197 00b6 FA01      		movw r30,r20
 198 00b8 3183      		std Z+1,r19
 199 00ba 2083      		st Z,r18
 997:tmk_core/protocol/usb_descriptor.c **** 
 998:tmk_core/protocol/usb_descriptor.c ****     return Size;
 999:tmk_core/protocol/usb_descriptor.c **** }
 200               		.loc 1 999 0
 201 00bc 0895      		ret
 202               		.cfi_endproc
 203               	.LFE100:
 205               	.global	SerialNumberString
 206               		.section	.progmem.data.SerialNumberString,"a",@progbits
 209               	SerialNumberString:
 210 0000 04        		.byte	4
 211 0001 03        		.byte	3
 212 0002 3000      		.string	"0"
 213 0004 00        		.string	""
 214 0005 00        		.string	""
 215               	.global	ProductString
 216               		.section	.progmem.data.ProductString,"a",@progbits
 219               	ProductString:
 220 0000 1A        		.byte	26
 221 0001 03        		.byte	3
 222 0002 4500      		.string	"E"
 223 0004 7200      		.string	"r"
 224 0006 6700      		.string	"g"
 225 0008 6F00      		.string	"o"
 226 000a 4400      		.string	"D"
 227 000c 6100      		.string	"a"
 228 000e 7300      		.string	"s"
 229 0010 6800      		.string	"h"
 230 0012 6D00      		.string	"m"
 231 0014 6900      		.string	"i"
 232 0016 6E00      		.string	"n"
 233 0018 6900      		.string	"i"
 234 001a 00        		.string	""
 235 001b 00        		.string	""
 236               	.global	ManufacturerString
 237               		.section	.progmem.data.ManufacturerString,"a",@progbits
 240               	ManufacturerString:
 241 0000 0C        		.byte	12
 242 0001 03        		.byte	3
 243 0002 4F00      		.string	"O"
 244 0004 6D00      		.string	"m"
 245 0006 6B00      		.string	"k"
 246 0008 6200      		.string	"b"
 247 000a 6400      		.string	"d"
 248 000c 00        		.string	""
 249 000d 00        		.string	""
 250               	.global	LanguageString
 251               		.section	.progmem.data.LanguageString,"a",@progbits
 254               	LanguageString:
 255 0000 04        		.byte	4
 256 0001 03        		.byte	3
 257 0002 0904      		.word	1033
 258               	.global	ConfigurationDescriptor
 259               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 262               	ConfigurationDescriptor:
 263 0000 09        		.byte	9
 264 0001 02        		.byte	2
 265 0002 3B00      		.word	59
 266 0004 02        		.byte	2
 267 0005 01        		.byte	1
 268 0006 00        		.byte	0
 269 0007 A0        		.byte	-96
 270 0008 FA        		.byte	-6
 271 0009 09        		.byte	9
 272 000a 04        		.byte	4
 273 000b 00        		.byte	0
 274 000c 00        		.byte	0
 275 000d 01        		.byte	1
 276 000e 03        		.byte	3
 277 000f 01        		.byte	1
 278 0010 01        		.byte	1
 279 0011 00        		.byte	0
 280 0012 09        		.byte	9
 281 0013 21        		.byte	33
 282 0014 1101      		.word	273
 283 0016 00        		.byte	0
 284 0017 01        		.byte	1
 285 0018 22        		.byte	34
 286 0019 4000      		.word	64
 287 001b 07        		.byte	7
 288 001c 05        		.byte	5
 289 001d 81        		.byte	-127
 290 001e 03        		.byte	3
 291 001f 0800      		.word	8
 292 0021 0A        		.byte	10
 293 0022 09        		.byte	9
 294 0023 04        		.byte	4
 295 0024 01        		.byte	1
 296 0025 00        		.byte	0
 297 0026 01        		.byte	1
 298 0027 03        		.byte	3
 299 0028 00        		.byte	0
 300 0029 00        		.byte	0
 301 002a 00        		.byte	0
 302 002b 09        		.byte	9
 303 002c 21        		.byte	33
 304 002d 1101      		.word	273
 305 002f 00        		.byte	0
 306 0030 01        		.byte	1
 307 0031 22        		.byte	34
 308 0032 3600      		.word	54
 309 0034 07        		.byte	7
 310 0035 05        		.byte	5
 311 0036 82        		.byte	-126
 312 0037 03        		.byte	3
 313 0038 2000      		.word	32
 314 003a 0A        		.byte	10
 315               	.global	DeviceDescriptor
 316               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 319               	DeviceDescriptor:
 320 0000 12        		.byte	18
 321 0001 01        		.byte	1
 322 0002 1001      		.word	272
 323 0004 00        		.byte	0
 324 0005 00        		.byte	0
 325 0006 00        		.byte	0
 326 0007 08        		.byte	8
 327 0008 EDFE      		.word	-275
 328 000a 6060      		.word	24672
 329 000c 0001      		.word	256
 330 000e 01        		.byte	1
 331 000f 02        		.byte	2
 332 0010 03        		.byte	3
 333 0011 01        		.byte	1
 334               	.global	SharedReport
 335               		.section	.progmem.data.SharedReport,"a",@progbits
 338               	SharedReport:
 339 0000 05        		.byte	5
 340 0001 01        		.byte	1
 341 0002 09        		.byte	9
 342 0003 80        		.byte	-128
 343 0004 A1        		.byte	-95
 344 0005 01        		.byte	1
 345 0006 85        		.byte	-123
 346 0007 03        		.byte	3
 347 0008 1A        		.byte	26
 348 0009 81        		.byte	-127
 349 000a 00        		.byte	0
 350 000b 2A        		.byte	42
 351 000c 83        		.byte	-125
 352 000d 00        		.byte	0
 353 000e 16        		.byte	22
 354 000f 01        		.byte	1
 355 0010 00        		.byte	0
 356 0011 26        		.byte	38
 357 0012 03        		.byte	3
 358 0013 00        		.byte	0
 359 0014 95        		.byte	-107
 360 0015 01        		.byte	1
 361 0016 75        		.byte	117
 362 0017 10        		.byte	16
 363 0018 81        		.byte	-127
 364 0019 00        		.byte	0
 365 001a C0        		.byte	-64
 366 001b 05        		.byte	5
 367 001c 0C        		.byte	12
 368 001d 09        		.byte	9
 369 001e 01        		.byte	1
 370 001f A1        		.byte	-95
 371 0020 01        		.byte	1
 372 0021 85        		.byte	-123
 373 0022 04        		.byte	4
 374 0023 1A        		.byte	26
 375 0024 01        		.byte	1
 376 0025 00        		.byte	0
 377 0026 2A        		.byte	42
 378 0027 9C        		.byte	-100
 379 0028 02        		.byte	2
 380 0029 16        		.byte	22
 381 002a 01        		.byte	1
 382 002b 00        		.byte	0
 383 002c 26        		.byte	38
 384 002d 9C        		.byte	-100
 385 002e 02        		.byte	2
 386 002f 95        		.byte	-107
 387 0030 01        		.byte	1
 388 0031 75        		.byte	117
 389 0032 10        		.byte	16
 390 0033 81        		.byte	-127
 391 0034 00        		.byte	0
 392 0035 C0        		.byte	-64
 393               	.global	KeyboardReport
 394               		.section	.progmem.data.KeyboardReport,"a",@progbits
 397               	KeyboardReport:
 398 0000 05        		.byte	5
 399 0001 01        		.byte	1
 400 0002 09        		.byte	9
 401 0003 06        		.byte	6
 402 0004 A1        		.byte	-95
 403 0005 01        		.byte	1
 404 0006 05        		.byte	5
 405 0007 07        		.byte	7
 406 0008 19        		.byte	25
 407 0009 E0        		.byte	-32
 408 000a 29        		.byte	41
 409 000b E7        		.byte	-25
 410 000c 15        		.byte	21
 411 000d 00        		.byte	0
 412 000e 25        		.byte	37
 413 000f 01        		.byte	1
 414 0010 95        		.byte	-107
 415 0011 08        		.byte	8
 416 0012 75        		.byte	117
 417 0013 01        		.byte	1
 418 0014 81        		.byte	-127
 419 0015 02        		.byte	2
 420 0016 95        		.byte	-107
 421 0017 01        		.byte	1
 422 0018 75        		.byte	117
 423 0019 08        		.byte	8
 424 001a 81        		.byte	-127
 425 001b 01        		.byte	1
 426 001c 05        		.byte	5
 427 001d 07        		.byte	7
 428 001e 19        		.byte	25
 429 001f 00        		.byte	0
 430 0020 29        		.byte	41
 431 0021 FF        		.byte	-1
 432 0022 15        		.byte	21
 433 0023 00        		.byte	0
 434 0024 26        		.byte	38
 435 0025 FF        		.byte	-1
 436 0026 00        		.byte	0
 437 0027 95        		.byte	-107
 438 0028 06        		.byte	6
 439 0029 75        		.byte	117
 440 002a 08        		.byte	8
 441 002b 81        		.byte	-127
 442 002c 00        		.byte	0
 443 002d 05        		.byte	5
 444 002e 08        		.byte	8
 445 002f 19        		.byte	25
 446 0030 01        		.byte	1
 447 0031 29        		.byte	41
 448 0032 05        		.byte	5
 449 0033 95        		.byte	-107
 450 0034 05        		.byte	5
 451 0035 75        		.byte	117
 452 0036 01        		.byte	1
 453 0037 91        		.byte	-111
 454 0038 02        		.byte	2
 455 0039 95        		.byte	-107
 456 003a 01        		.byte	1
 457 003b 75        		.byte	117
 458 003c 03        		.byte	3
 459 003d 91        		.byte	-111
 460 003e 01        		.byte	1
 461 003f C0        		.byte	-64
 462               		.text
 463               	.Letext0:
 464               		.file 2 "/usr/lib/avr/include/stdint.h"
 465               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 466               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 467               		.file 5 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 468               		.file 6 "tmk_core/protocol/usb_descriptor.h"
 469               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/cc82cgaU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc82cgaU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc82cgaU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc82cgaU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc82cgaU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc82cgaU.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/cc82cgaU.s:262    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/cc82cgaU.s:319    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/cc82cgaU.s:209    .progmem.data.SerialNumberString:0000000000000000 SerialNumberString
     /tmp/cc82cgaU.s:254    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/cc82cgaU.s:240    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/cc82cgaU.s:219    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/cc82cgaU.s:338    .progmem.data.SharedReport:0000000000000000 SharedReport
     /tmp/cc82cgaU.s:397    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport

NO UNDEFINED SYMBOLS
