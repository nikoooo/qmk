   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB6:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  34:tmk_core/common/keyboard.c **** #    include "backlight.h"
  35:tmk_core/common/keyboard.c **** #endif
  36:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  37:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  38:tmk_core/common/keyboard.c **** #else
  39:tmk_core/common/keyboard.c **** #    include "magic.h"
  40:tmk_core/common/keyboard.c **** #endif
  41:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  42:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  43:tmk_core/common/keyboard.c **** #endif
  44:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  45:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  46:tmk_core/common/keyboard.c **** #endif
  47:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  48:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  49:tmk_core/common/keyboard.c **** #endif
  50:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  51:tmk_core/common/keyboard.c **** #    include "adb.h"
  52:tmk_core/common/keyboard.c **** #endif
  53:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  54:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  55:tmk_core/common/keyboard.c **** #endif
  56:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  57:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  58:tmk_core/common/keyboard.c **** #endif
  59:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  60:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  61:tmk_core/common/keyboard.c **** #endif
  62:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  63:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  64:tmk_core/common/keyboard.c **** #endif
  65:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  66:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  67:tmk_core/common/keyboard.c **** #endif
  68:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  69:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  70:tmk_core/common/keyboard.c **** #endif
  71:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  72:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  73:tmk_core/common/keyboard.c **** #endif
  74:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  75:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  76:tmk_core/common/keyboard.c **** #endif
  77:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  78:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  79:tmk_core/common/keyboard.c **** #endif
  80:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  81:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  82:tmk_core/common/keyboard.c **** #endif
  83:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  84:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  85:tmk_core/common/keyboard.c **** #endif
  86:tmk_core/common/keyboard.c **** 
  87:tmk_core/common/keyboard.c **** // Only enable this if console is enabled to print to
  88:tmk_core/common/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
  89:tmk_core/common/keyboard.c **** static uint32_t matrix_timer      = 0;
  90:tmk_core/common/keyboard.c **** static uint32_t matrix_scan_count = 0;
  91:tmk_core/common/keyboard.c **** 
  92:tmk_core/common/keyboard.c **** void matrix_scan_perf_task(void) {
  93:tmk_core/common/keyboard.c ****     matrix_scan_count++;
  94:tmk_core/common/keyboard.c **** 
  95:tmk_core/common/keyboard.c ****     uint32_t timer_now = timer_read32();
  96:tmk_core/common/keyboard.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer) > 1000) {
  97:tmk_core/common/keyboard.c ****         dprintf("matrix scan frequency: %d\n", matrix_scan_count);
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c ****         matrix_timer      = timer_now;
 100:tmk_core/common/keyboard.c ****         matrix_scan_count = 0;
 101:tmk_core/common/keyboard.c ****     }
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** #else
 104:tmk_core/common/keyboard.c **** #    define matrix_scan_perf_task()
 105:tmk_core/common/keyboard.c **** #endif
 106:tmk_core/common/keyboard.c **** 
 107:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 108:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 109:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
 110:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
 111:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 112:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
 113:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
 114:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
 115:tmk_core/common/keyboard.c ****             out |= 1 << col;
 116:tmk_core/common/keyboard.c ****         }
 117:tmk_core/common/keyboard.c ****     }
 118:tmk_core/common/keyboard.c ****     return out;
 119:tmk_core/common/keyboard.c **** }
 120:tmk_core/common/keyboard.c **** 
 121:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 122:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 123:tmk_core/common/keyboard.c ****     return rowdata;
 124:tmk_core/common/keyboard.c **** }
 125:tmk_core/common/keyboard.c **** 
 126:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 127:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 128:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 129:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 130:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 131:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 132:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 133:tmk_core/common/keyboard.c ****         return false;
 134:tmk_core/common/keyboard.c ****     }
 135:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 136:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 137:tmk_core/common/keyboard.c ****     so they are filtered out.
 138:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 139:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 140:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 141:tmk_core/common/keyboard.c ****     */
 142:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 143:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 144:tmk_core/common/keyboard.c ****             return true;
 145:tmk_core/common/keyboard.c ****         }
 146:tmk_core/common/keyboard.c ****     }
 147:tmk_core/common/keyboard.c ****     return false;
 148:tmk_core/common/keyboard.c **** }
 149:tmk_core/common/keyboard.c **** 
 150:tmk_core/common/keyboard.c **** #endif
 151:tmk_core/common/keyboard.c **** 
 152:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 152 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 153:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 154:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 155:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  22               		.loc 1 155 0
  23 0000 85B7      		in r24,0x35
  24 0002 8068      		ori r24,lo8(-128)
  25 0004 85BF      		out 0x35,r24
 156:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  26               		.loc 1 156 0
  27 0006 85B7      		in r24,0x35
  28 0008 8068      		ori r24,lo8(-128)
  29 000a 85BF      		out 0x35,r24
  30 000c 0895      		ret
  31               		.cfi_endproc
  32               	.LFE6:
  34               		.section	.text.keyboard_post_init_user,"ax",@progbits
  35               		.weak	keyboard_post_init_user
  37               	keyboard_post_init_user:
  38               	.LFB10:
 157:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 158:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 159:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 160:tmk_core/common/keyboard.c **** #endif
 161:tmk_core/common/keyboard.c **** }
 162:tmk_core/common/keyboard.c **** 
 163:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 164:tmk_core/common/keyboard.c ****  *
 165:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 166:tmk_core/common/keyboard.c ****  */
 167:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 168:tmk_core/common/keyboard.c **** 
 169:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 170:tmk_core/common/keyboard.c ****  *
 171:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 172:tmk_core/common/keyboard.c ****  */
 173:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
 174:tmk_core/common/keyboard.c **** 
 175:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 176:tmk_core/common/keyboard.c ****  *
 177:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 178:tmk_core/common/keyboard.c ****  */
 179:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
 180:tmk_core/common/keyboard.c **** 
 181:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 182:tmk_core/common/keyboard.c ****  *
 183:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 184:tmk_core/common/keyboard.c ****  */
 185:tmk_core/common/keyboard.c **** 
 186:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
  39               		.loc 1 186 0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45 0000 0895      		ret
  46               		.cfi_endproc
  47               	.LFE10:
  49               		.set	keyboard_post_init_user.localalias.0,keyboard_post_init_user
  50               		.section	.text.keyboard_pre_init_user,"ax",@progbits
  51               		.weak	keyboard_pre_init_user
  53               	keyboard_pre_init_user:
  54               	.LFB18:
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60 0000 0C94 0000 		jmp keyboard_post_init_user.localalias.0
  61               		.cfi_endproc
  62               	.LFE18:
  64               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
  65               		.weak	keyboard_pre_init_kb
  67               	keyboard_pre_init_kb:
  68               	.LFB9:
 179:tmk_core/common/keyboard.c **** 
  69               		.loc 1 179 0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 179:tmk_core/common/keyboard.c **** 
  75               		.loc 1 179 0
  76 0000 0C94 0000 		jmp keyboard_pre_init_user
  77               	.LVL0:
  78               		.cfi_endproc
  79               	.LFE9:
  81               		.section	.text.matrix_setup,"ax",@progbits
  82               		.weak	matrix_setup
  84               	matrix_setup:
  85               	.LFB20:
  86               		.cfi_startproc
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91 0000 0C94 0000 		jmp keyboard_post_init_user.localalias.0
  92               		.cfi_endproc
  93               	.LFE20:
  95               		.section	.text.keyboard_post_init_kb,"ax",@progbits
  96               		.weak	keyboard_post_init_kb
  98               	keyboard_post_init_kb:
  99               	.LFB11:
 187:tmk_core/common/keyboard.c **** 
 188:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 189:tmk_core/common/keyboard.c ****  *
 190:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 191:tmk_core/common/keyboard.c ****  */
 192:tmk_core/common/keyboard.c **** 
 193:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 100               		.loc 1 193 0
 101               		.cfi_startproc
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 0 */
 105               	.L__stack_usage = 0
 106               		.loc 1 193 0
 107 0000 0C94 0000 		jmp keyboard_post_init_user
 108               	.LVL1:
 109               		.cfi_endproc
 110               	.LFE11:
 112               		.section	.text.keyboard_setup,"ax",@progbits
 113               	.global	keyboard_setup
 115               	keyboard_setup:
 116               	.LFB12:
 194:tmk_core/common/keyboard.c **** 
 195:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 196:tmk_core/common/keyboard.c ****  *
 197:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 198:tmk_core/common/keyboard.c ****  */
 199:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 117               		.loc 1 199 0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 200:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 201:tmk_core/common/keyboard.c ****     disable_jtag();
 123               		.loc 1 201 0
 124 0000 0E94 0000 		call disable_jtag
 125               	.LVL2:
 202:tmk_core/common/keyboard.c **** #endif
 203:tmk_core/common/keyboard.c ****     matrix_setup();
 126               		.loc 1 203 0
 127 0004 0E94 0000 		call matrix_setup
 128               	.LVL3:
 204:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 129               		.loc 1 204 0
 130 0008 0C94 0000 		jmp keyboard_pre_init_kb
 131               	.LVL4:
 132               		.cfi_endproc
 133               	.LFE12:
 135               		.section	.text.is_keyboard_master,"ax",@progbits
 136               		.weak	is_keyboard_master
 138               	is_keyboard_master:
 139               	.LFB13:
 205:tmk_core/common/keyboard.c **** }
 206:tmk_core/common/keyboard.c **** 
 207:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 208:tmk_core/common/keyboard.c ****  *
 209:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 210:tmk_core/common/keyboard.c ****  */
 211:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 140               		.loc 1 211 0
 141               		.cfi_startproc
 142               	/* prologue: function */
 143               	/* frame size = 0 */
 144               	/* stack size = 0 */
 145               	.L__stack_usage = 0
 146               		.loc 1 211 0
 147 0000 81E0      		ldi r24,lo8(1)
 148 0002 0895      		ret
 149               		.cfi_endproc
 150               	.LFE13:
 152               		.section	.text.keyboard_init,"ax",@progbits
 153               	.global	keyboard_init
 155               	keyboard_init:
 156               	.LFB14:
 212:tmk_core/common/keyboard.c **** 
 213:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 214:tmk_core/common/keyboard.c ****  *
 215:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 216:tmk_core/common/keyboard.c ****  */
 217:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 157               		.loc 1 217 0
 158               		.cfi_startproc
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 218:tmk_core/common/keyboard.c ****     timer_init();
 163               		.loc 1 218 0
 164 0000 0E94 0000 		call timer_init
 165               	.LVL5:
 219:tmk_core/common/keyboard.c ****     matrix_init();
 166               		.loc 1 219 0
 167 0004 0E94 0000 		call matrix_init
 168               	.LVL6:
 220:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 221:tmk_core/common/keyboard.c ****     qwiic_init();
 222:tmk_core/common/keyboard.c **** #endif
 223:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 224:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 225:tmk_core/common/keyboard.c **** #endif
 226:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 227:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 228:tmk_core/common/keyboard.c **** #endif
 229:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 230:tmk_core/common/keyboard.c ****     serial_mouse_init();
 231:tmk_core/common/keyboard.c **** #endif
 232:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 233:tmk_core/common/keyboard.c ****     adb_mouse_init();
 234:tmk_core/common/keyboard.c **** #endif
 235:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 236:tmk_core/common/keyboard.c ****     bootmagic();
 237:tmk_core/common/keyboard.c **** #else
 238:tmk_core/common/keyboard.c ****     magic();
 169               		.loc 1 238 0
 170 0008 0E94 0000 		call magic
 171               	.LVL7:
 239:tmk_core/common/keyboard.c **** #endif
 240:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 241:tmk_core/common/keyboard.c ****     backlight_init();
 242:tmk_core/common/keyboard.c **** #endif
 243:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 244:tmk_core/common/keyboard.c ****     rgblight_init();
 245:tmk_core/common/keyboard.c **** #endif
 246:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 247:tmk_core/common/keyboard.c ****     steno_init();
 248:tmk_core/common/keyboard.c **** #endif
 249:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 250:tmk_core/common/keyboard.c ****     fauxclicky_init();
 251:tmk_core/common/keyboard.c **** #endif
 252:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 253:tmk_core/common/keyboard.c ****     pointing_device_init();
 254:tmk_core/common/keyboard.c **** #endif
 255:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 256:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 257:tmk_core/common/keyboard.c **** #endif
 258:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 172               		.loc 1 258 0
 173 000c 0C94 0000 		jmp keyboard_post_init_kb
 174               	.LVL8:
 175               		.cfi_endproc
 176               	.LFE14:
 178               		.section	.text.keyboard_task,"ax",@progbits
 179               	.global	keyboard_task
 181               	keyboard_task:
 182               	.LFB15:
 259:tmk_core/common/keyboard.c **** }
 260:tmk_core/common/keyboard.c **** 
 261:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 262:tmk_core/common/keyboard.c ****  *
 263:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 264:tmk_core/common/keyboard.c ****  *
 265:tmk_core/common/keyboard.c ****  * * scan matrix
 266:tmk_core/common/keyboard.c ****  * * handle mouse movements
 267:tmk_core/common/keyboard.c ****  * * run visualizer code
 268:tmk_core/common/keyboard.c ****  * * handle midi commands
 269:tmk_core/common/keyboard.c ****  * * light LEDs
 270:tmk_core/common/keyboard.c ****  *
 271:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 272:tmk_core/common/keyboard.c ****  */
 273:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 183               		.loc 1 273 0
 184               		.cfi_startproc
 185 0000 BF92      		push r11
 186               	.LCFI0:
 187               		.cfi_def_cfa_offset 3
 188               		.cfi_offset 11, -2
 189 0002 CF92      		push r12
 190               	.LCFI1:
 191               		.cfi_def_cfa_offset 4
 192               		.cfi_offset 12, -3
 193 0004 DF92      		push r13
 194               	.LCFI2:
 195               		.cfi_def_cfa_offset 5
 196               		.cfi_offset 13, -4
 197 0006 EF92      		push r14
 198               	.LCFI3:
 199               		.cfi_def_cfa_offset 6
 200               		.cfi_offset 14, -5
 201 0008 FF92      		push r15
 202               	.LCFI4:
 203               		.cfi_def_cfa_offset 7
 204               		.cfi_offset 15, -6
 205 000a 0F93      		push r16
 206               	.LCFI5:
 207               		.cfi_def_cfa_offset 8
 208               		.cfi_offset 16, -7
 209 000c 1F93      		push r17
 210               	.LCFI6:
 211               		.cfi_def_cfa_offset 9
 212               		.cfi_offset 17, -8
 213 000e CF93      		push r28
 214               	.LCFI7:
 215               		.cfi_def_cfa_offset 10
 216               		.cfi_offset 28, -9
 217 0010 DF93      		push r29
 218               	.LCFI8:
 219               		.cfi_def_cfa_offset 11
 220               		.cfi_offset 29, -10
 221 0012 CDB7      		in r28,__SP_L__
 222 0014 DEB7      		in r29,__SP_H__
 223               	.LCFI9:
 224               		.cfi_def_cfa_register 28
 225 0016 2A97      		sbiw r28,10
 226               	.LCFI10:
 227               		.cfi_def_cfa_offset 21
 228 0018 0FB6      		in __tmp_reg__,__SREG__
 229 001a F894      		cli
 230 001c DEBF      		out __SP_H__,r29
 231 001e 0FBE      		out __SREG__,__tmp_reg__
 232 0020 CDBF      		out __SP_L__,r28
 233               	/* prologue: function */
 234               	/* frame size = 10 */
 235               	/* stack size = 19 */
 236               	.L__stack_usage = 19
 237               	.LVL9:
 274:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 275:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 276:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 277:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 278:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 279:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 280:tmk_core/common/keyboard.c **** #endif
 281:tmk_core/common/keyboard.c **** 
 282:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 283:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 284:tmk_core/common/keyboard.c **** #else
 285:tmk_core/common/keyboard.c ****     matrix_scan();
 238               		.loc 1 285 0
 239 0022 0E94 0000 		call matrix_scan
 240               	.LVL10:
 286:tmk_core/common/keyboard.c **** #endif
 287:tmk_core/common/keyboard.c **** 
 288:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 241               		.loc 1 288 0
 242 0026 0E94 0000 		call is_keyboard_master
 243               	.LVL11:
 244 002a 8111      		cpse r24,__zero_reg__
 245 002c 00C0      		rjmp .L11
 246               	.LVL12:
 247               	.L15:
 289:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 290:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 291:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 292:tmk_core/common/keyboard.c ****             if (matrix_change) {
 293:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 294:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 295:tmk_core/common/keyboard.c ****                     continue;
 296:tmk_core/common/keyboard.c ****                 }
 297:tmk_core/common/keyboard.c **** #endif
 298:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 299:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 300:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 301:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 302:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 303:tmk_core/common/keyboard.c ****                         });
 304:tmk_core/common/keyboard.c ****                         // record a processed key
 305:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 306:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 307:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 308:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 309:tmk_core/common/keyboard.c **** #endif
 310:tmk_core/common/keyboard.c ****                             // process a key per task call
 311:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 312:tmk_core/common/keyboard.c ****                     }
 313:tmk_core/common/keyboard.c ****                 }
 314:tmk_core/common/keyboard.c ****             }
 315:tmk_core/common/keyboard.c ****         }
 316:tmk_core/common/keyboard.c ****     }
 317:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 318:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 319:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 320:tmk_core/common/keyboard.c ****     if (!keys_processed)
 321:tmk_core/common/keyboard.c **** #endif
 322:tmk_core/common/keyboard.c ****         action_exec(TICK);
 248               		.loc 1 322 0
 249 002e 8FEF      		ldi r24,lo8(-1)
 250 0030 8983      		std Y+1,r24
 251 0032 8A83      		std Y+2,r24
 252 0034 1B82      		std Y+3,__zero_reg__
 253 0036 0E94 0000 		call timer_read
 254               	.LVL13:
 255 003a 8160      		ori r24,1
 256 003c 782F      		mov r23,r24
 257 003e 9D83      		std Y+5,r25
 258 0040 8C83      		std Y+4,r24
 259 0042 4981      		ldd r20,Y+1
 260 0044 5A81      		ldd r21,Y+2
 261 0046 6B81      		ldd r22,Y+3
 262 0048 8D81      		ldd r24,Y+5
 263 004a 0E94 0000 		call action_exec
 264               	.LVL14:
 265 004e 00C0      		rjmp .L12
 266               	.LVL15:
 267               	.L11:
 268 0050 80E0      		ldi r24,lo8(matrix_prev.2938)
 269 0052 C82E      		mov r12,r24
 270 0054 80E0      		ldi r24,hi8(matrix_prev.2938)
 271 0056 D82E      		mov r13,r24
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 272               		.loc 1 288 0
 273 0058 00E0      		ldi r16,0
 274 005a 10E0      		ldi r17,0
 275               	.LVL16:
 276               	.L14:
 277 005c B02E      		mov r11,r16
 278               	.LVL17:
 279               	.LBB6:
 290:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 280               		.loc 1 290 0
 281 005e 802F      		mov r24,r16
 282 0060 0E94 0000 		call matrix_get_row
 283               	.LVL18:
 284 0064 E82E      		mov r14,r24
 285               	.LVL19:
 291:tmk_core/common/keyboard.c ****             if (matrix_change) {
 286               		.loc 1 291 0
 287 0066 F601      		movw r30,r12
 288 0068 2191      		ld r18,Z+
 289 006a 6F01      		movw r12,r30
 290 006c F82E      		mov r15,r24
 291 006e F226      		eor r15,r18
 292               	.LVL20:
 292:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 293               		.loc 1 292 0
 294 0070 01F4      		brne .L13
 295               	.L20:
 296               	.LVL21:
 297 0072 0F5F      		subi r16,-1
 298 0074 1F4F      		sbci r17,-1
 299               	.LVL22:
 289:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 300               		.loc 1 289 0
 301 0076 0830      		cpi r16,8
 302 0078 1105      		cpc r17,__zero_reg__
 303 007a 01F4      		brne .L14
 304 007c 00C0      		rjmp .L15
 305               	.L13:
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 306               		.loc 1 298 0
 307 007e 8091 0000 		lds r24,debug_config
 308 0082 81FD      		sbrc r24,1
 298:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 309               		.loc 1 298 0 is_stmt 0 discriminator 1
 310 0084 0E94 0000 		call matrix_print
 311               	.LVL23:
 312               	.L16:
 313               	.LBE6:
 288:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 314               		.loc 1 288 0 is_stmt 1
 315 0088 80E0      		ldi r24,0
 316 008a 90E0      		ldi r25,0
 317               	.LBB8:
 318               	.LBB7:
 300:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 319               		.loc 1 300 0
 320 008c 2F2D      		mov r18,r15
 321 008e 30E0      		ldi r19,0
 322               	.LVL24:
 323               	.L19:
 324 0090 482F      		mov r20,r24
 325               	.LVL25:
 326 0092 B901      		movw r22,r18
 327 0094 082E      		mov r0,r24
 328 0096 00C0      		rjmp 2f
 329               		1:
 330 0098 7595      		asr r23
 331 009a 6795      		ror r22
 332               		2:
 333 009c 0A94      		dec r0
 334 009e 02F4      		brpl 1b
 335 00a0 60FF      		sbrs r22,0
 336 00a2 00C0      		rjmp .L17
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 337               		.loc 1 301 0
 338 00a4 8E83      		std Y+6,r24
 339 00a6 BF82      		std Y+7,r11
 302:tmk_core/common/keyboard.c ****                         });
 340               		.loc 1 302 0
 341 00a8 81E0      		ldi r24,lo8(1)
 342 00aa 90E0      		ldi r25,0
 343               	.LVL26:
 344 00ac 6C01      		movw r12,r24
 345 00ae 00C0      		rjmp 2f
 346               		1:
 347 00b0 CC0C      		lsl r12
 348 00b2 DD1C      		rol r13
 349               		2:
 350 00b4 4A95      		dec r20
 351 00b6 02F4      		brpl 1b
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 352               		.loc 1 301 0
 353 00b8 2E2D      		mov r18,r14
 354 00ba 30E0      		ldi r19,0
 355 00bc 2C21      		and r18,r12
 356 00be 3D21      		and r19,r13
 357 00c0 232B      		or r18,r19
 358 00c2 01F4      		brne .L18
 359 00c4 80E0      		ldi r24,0
 360               	.L18:
 361 00c6 8887      		std Y+8,r24
 302:tmk_core/common/keyboard.c ****                         });
 362               		.loc 1 302 0
 363 00c8 0E94 0000 		call timer_read
 364               	.LVL27:
 301:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 365               		.loc 1 301 0
 366 00cc 8160      		ori r24,1
 367 00ce 782F      		mov r23,r24
 368 00d0 9A87      		std Y+10,r25
 369 00d2 8987      		std Y+9,r24
 370 00d4 4E81      		ldd r20,Y+6
 371 00d6 5F81      		ldd r21,Y+7
 372 00d8 6885      		ldd r22,Y+8
 373 00da 8A85      		ldd r24,Y+10
 374 00dc 0E94 0000 		call action_exec
 375               	.LVL28:
 305:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 376               		.loc 1 305 0
 377 00e0 F801      		movw r30,r16
 378 00e2 E050      		subi r30,lo8(-(matrix_prev.2938))
 379 00e4 F040      		sbci r31,hi8(-(matrix_prev.2938))
 380 00e6 8081      		ld r24,Z
 381 00e8 8C25      		eor r24,r12
 382 00ea 8083      		st Z,r24
 311:tmk_core/common/keyboard.c ****                     }
 383               		.loc 1 311 0
 384 00ec 00C0      		rjmp .L12
 385               	.LVL29:
 386               	.L17:
 387 00ee 0196      		adiw r24,1
 388               	.LVL30:
 299:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 389               		.loc 1 299 0 discriminator 2
 390 00f0 8730      		cpi r24,7
 391 00f2 9105      		cpc r25,__zero_reg__
 392 00f4 01F4      		brne .L19
 393 00f6 00C0      		rjmp .L20
 394               	.LVL31:
 395               	.L12:
 396               	.LBE7:
 397               	.LBE8:
 323:tmk_core/common/keyboard.c **** 
 324:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 325:tmk_core/common/keyboard.c **** 
 326:tmk_core/common/keyboard.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 327:tmk_core/common/keyboard.c ****     matrix_scan_perf_task();
 328:tmk_core/common/keyboard.c **** #endif
 329:tmk_core/common/keyboard.c **** 
 330:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 331:tmk_core/common/keyboard.c ****     qwiic_task();
 332:tmk_core/common/keyboard.c **** #endif
 333:tmk_core/common/keyboard.c **** 
 334:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 335:tmk_core/common/keyboard.c ****     oled_task();
 336:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 337:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 338:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 339:tmk_core/common/keyboard.c **** #    endif
 340:tmk_core/common/keyboard.c **** #endif
 341:tmk_core/common/keyboard.c **** 
 342:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 343:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 344:tmk_core/common/keyboard.c ****     mousekey_task();
 345:tmk_core/common/keyboard.c **** #endif
 346:tmk_core/common/keyboard.c **** 
 347:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 348:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 349:tmk_core/common/keyboard.c **** #endif
 350:tmk_core/common/keyboard.c **** 
 351:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 352:tmk_core/common/keyboard.c ****     serial_mouse_task();
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 356:tmk_core/common/keyboard.c ****     adb_mouse_task();
 357:tmk_core/common/keyboard.c **** #endif
 358:tmk_core/common/keyboard.c **** 
 359:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 360:tmk_core/common/keyboard.c ****     serial_link_update();
 361:tmk_core/common/keyboard.c **** #endif
 362:tmk_core/common/keyboard.c **** 
 363:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 364:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 365:tmk_core/common/keyboard.c **** #endif
 366:tmk_core/common/keyboard.c **** 
 367:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 368:tmk_core/common/keyboard.c ****     pointing_device_task();
 369:tmk_core/common/keyboard.c **** #endif
 370:tmk_core/common/keyboard.c **** 
 371:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 372:tmk_core/common/keyboard.c ****     midi_task();
 373:tmk_core/common/keyboard.c **** #endif
 374:tmk_core/common/keyboard.c **** 
 375:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 376:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 377:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 378:tmk_core/common/keyboard.c ****     }
 379:tmk_core/common/keyboard.c **** #endif
 380:tmk_core/common/keyboard.c **** 
 381:tmk_core/common/keyboard.c ****     // update LED
 382:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 398               		.loc 1 382 0
 399 00f8 0E94 0000 		call host_keyboard_leds
 400               	.LVL32:
 401 00fc 9091 0000 		lds r25,led_status.2939
 402 0100 8917      		cp r24,r25
 403 0102 01F0      		breq .L10
 383:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 404               		.loc 1 383 0
 405 0104 0E94 0000 		call host_keyboard_leds
 406               	.LVL33:
 407 0108 8093 0000 		sts led_status.2939,r24
 408               	.LVL34:
 409               	/* epilogue start */
 384:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 385:tmk_core/common/keyboard.c ****     }
 386:tmk_core/common/keyboard.c **** }
 410               		.loc 1 386 0
 411 010c 2A96      		adiw r28,10
 412 010e 0FB6      		in __tmp_reg__,__SREG__
 413 0110 F894      		cli
 414 0112 DEBF      		out __SP_H__,r29
 415 0114 0FBE      		out __SREG__,__tmp_reg__
 416 0116 CDBF      		out __SP_L__,r28
 417 0118 DF91      		pop r29
 418 011a CF91      		pop r28
 419 011c 1F91      		pop r17
 420 011e 0F91      		pop r16
 421 0120 FF90      		pop r15
 422 0122 EF90      		pop r14
 423 0124 DF90      		pop r13
 424 0126 CF90      		pop r12
 425 0128 BF90      		pop r11
 426               	.LBB9:
 427               	.LBB10:
 387:tmk_core/common/keyboard.c **** 
 388:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 389:tmk_core/common/keyboard.c ****  *
 390:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 391:tmk_core/common/keyboard.c ****  */
 392:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 393:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 394:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 395:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 396:tmk_core/common/keyboard.c ****         debug("\n");
 397:tmk_core/common/keyboard.c ****     }
 398:tmk_core/common/keyboard.c ****     led_set(leds);
 428               		.loc 1 398 0
 429 012a 0C94 0000 		jmp led_set
 430               	.LVL35:
 431               	.L10:
 432               	/* epilogue start */
 433               	.LBE10:
 434               	.LBE9:
 386:tmk_core/common/keyboard.c **** 
 435               		.loc 1 386 0
 436 012e 2A96      		adiw r28,10
 437 0130 0FB6      		in __tmp_reg__,__SREG__
 438 0132 F894      		cli
 439 0134 DEBF      		out __SP_H__,r29
 440 0136 0FBE      		out __SREG__,__tmp_reg__
 441 0138 CDBF      		out __SP_L__,r28
 442 013a DF91      		pop r29
 443 013c CF91      		pop r28
 444 013e 1F91      		pop r17
 445 0140 0F91      		pop r16
 446 0142 FF90      		pop r15
 447 0144 EF90      		pop r14
 448 0146 DF90      		pop r13
 449 0148 CF90      		pop r12
 450 014a BF90      		pop r11
 451 014c 0895      		ret
 452               		.cfi_endproc
 453               	.LFE15:
 455               		.section	.text.keyboard_set_leds,"ax",@progbits
 456               	.global	keyboard_set_leds
 458               	keyboard_set_leds:
 459               	.LFB16:
 392:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 460               		.loc 1 392 0
 461               		.cfi_startproc
 462               	.LVL36:
 463               	/* prologue: function */
 464               	/* frame size = 0 */
 465               	/* stack size = 0 */
 466               	.L__stack_usage = 0
 467               		.loc 1 398 0
 468 0000 0C94 0000 		jmp led_set
 469               	.LVL37:
 470               		.cfi_endproc
 471               	.LFE16:
 473               		.section	.bss.led_status.2939,"aw",@nobits
 476               	led_status.2939:
 477 0000 00        		.zero	1
 478               		.section	.bss.matrix_prev.2938,"aw",@nobits
 481               	matrix_prev.2938:
 482 0000 0000 0000 		.zero	8
 482      0000 0000 
 483               		.text
 484               	.Letext0:
 485               		.file 2 "/usr/lib/avr/include/stdint.h"
 486               		.file 3 "tmk_core/common/keyboard.h"
 487               		.file 4 "tmk_core/common/matrix.h"
 488               		.file 5 "tmk_core/common/debug.h"
 489               		.file 6 "tmk_core/common/timer.h"
 490               		.file 7 "tmk_core/common/magic.h"
 491               		.file 8 "tmk_core/common/action.h"
 492               		.file 9 "tmk_core/common/led.h"
 493               		.file 10 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccLNqcUi.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLNqcUi.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLNqcUi.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLNqcUi.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLNqcUi.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLNqcUi.s:13     .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/ccLNqcUi.s:37     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/ccLNqcUi.s:37     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user.localalias.0
     /tmp/ccLNqcUi.s:53     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/ccLNqcUi.s:67     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/ccLNqcUi.s:84     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccLNqcUi.s:98     .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/ccLNqcUi.s:115    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccLNqcUi.s:138    .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccLNqcUi.s:155    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccLNqcUi.s:181    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccLNqcUi.s:481    .bss.matrix_prev.2938:0000000000000000 matrix_prev.2938
     /tmp/ccLNqcUi.s:476    .bss.led_status.2939:0000000000000000 led_status.2939
     /tmp/ccLNqcUi.s:458    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
host_keyboard_leds
led_set
__do_clear_bss
