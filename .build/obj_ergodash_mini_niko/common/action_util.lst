   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB0:
  15               		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 32 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB1:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  38               		.loc 1 34 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               		.loc 1 34 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE1:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB2:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  60               		.loc 1 36 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  66               		.loc 1 36 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB9:
  79               		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 52 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 52 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88 0004 0895      		ret
  89               		.cfi_endproc
  90               	.LFE9:
  92               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
  93               	.global	has_oneshot_mods_timed_out
  95               	has_oneshot_mods_timed_out:
  96               	.LFB12:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
  97               		.loc 2 69 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 2 69 0
 104 0000 80E0      		ldi r24,0
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE12:
 109               		.section	.text.get_oneshot_layer,"ax",@progbits
 110               	.global	get_oneshot_layer
 112               	get_oneshot_layer:
 113               	.LFB13:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 114               		.loc 2 83 0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 120               		.loc 2 83 0
 121 0000 8091 0000 		lds r24,oneshot_layer_data
 122 0004 8595      		asr r24
 123 0006 8595      		asr r24
 124 0008 8595      		asr r24
 125 000a 0895      		ret
 126               		.cfi_endproc
 127               	.LFE13:
 129               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 130               	.global	get_oneshot_layer_state
 132               	get_oneshot_layer_state:
 133               	.LFB14:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 134               		.loc 2 84 0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 140               		.loc 2 84 0
 141 0000 8091 0000 		lds r24,oneshot_layer_data
 142 0004 8770      		andi r24,lo8(7)
 143 0006 0895      		ret
 144               		.cfi_endproc
 145               	.LFE14:
 147               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 148               	.global	is_oneshot_layer_active
 150               	is_oneshot_layer_active:
 151               	.LFB18:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  87:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  88:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  89:tmk_core/common/action_util.c **** #    endif
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
  92:tmk_core/common/action_util.c ****  *
  93:tmk_core/common/action_util.c ****  * FIXME: needs doc
  94:tmk_core/common/action_util.c ****  */
  95:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
  96:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
  97:tmk_core/common/action_util.c ****     layer_on(layer);
  98:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  99:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 100:tmk_core/common/action_util.c **** #    endif
 101:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 102:tmk_core/common/action_util.c **** }
 103:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 104:tmk_core/common/action_util.c ****  *
 105:tmk_core/common/action_util.c ****  * FIXME: needs doc
 106:tmk_core/common/action_util.c ****  */
 107:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 108:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 109:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:tmk_core/common/action_util.c **** #    endif
 112:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 113:tmk_core/common/action_util.c **** }
 114:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 115:tmk_core/common/action_util.c ****  *
 116:tmk_core/common/action_util.c ****  * FIXME: needs doc
 117:tmk_core/common/action_util.c ****  */
 118:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 119:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 120:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 121:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 122:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 123:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 124:tmk_core/common/action_util.c ****     }
 125:tmk_core/common/action_util.c **** }
 126:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:tmk_core/common/action_util.c ****  *
 128:tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:tmk_core/common/action_util.c ****  */
 130:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 152               		.loc 2 130 0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               		.loc 2 130 0
 159 0000 9091 0000 		lds r25,oneshot_layer_data
 160 0004 9770      		andi r25,lo8(7)
 161 0006 81E0      		ldi r24,lo8(1)
 162 0008 01F4      		brne .L9
 163 000a 80E0      		ldi r24,0
 164               	.L9:
 165 000c 0895      		ret
 166               		.cfi_endproc
 167               	.LFE18:
 169               		.section	.text.get_mods,"ax",@progbits
 170               	.global	get_mods
 172               	get_mods:
 173               	.LFB20:
 131:tmk_core/common/action_util.c **** #endif
 132:tmk_core/common/action_util.c **** 
 133:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 134:tmk_core/common/action_util.c ****  *
 135:tmk_core/common/action_util.c ****  * FIXME: needs doc
 136:tmk_core/common/action_util.c ****  */
 137:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 138:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 140:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 141:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 142:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 143:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 144:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 145:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 146:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 147:tmk_core/common/action_util.c ****         }
 148:tmk_core/common/action_util.c **** #    endif
 149:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 150:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 151:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 152:tmk_core/common/action_util.c ****         }
 153:tmk_core/common/action_util.c ****     }
 154:tmk_core/common/action_util.c **** 
 155:tmk_core/common/action_util.c **** #endif
 156:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 157:tmk_core/common/action_util.c **** }
 158:tmk_core/common/action_util.c **** 
 159:tmk_core/common/action_util.c **** /** \brief Get mods
 160:tmk_core/common/action_util.c ****  *
 161:tmk_core/common/action_util.c ****  * FIXME: needs doc
 162:tmk_core/common/action_util.c ****  */
 163:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 174               		.loc 2 163 0
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 180               		.loc 2 163 0
 181 0000 8091 0000 		lds r24,real_mods
 182 0004 0895      		ret
 183               		.cfi_endproc
 184               	.LFE20:
 186               		.section	.text.add_mods,"ax",@progbits
 187               	.global	add_mods
 189               	add_mods:
 190               	.LFB21:
 164:tmk_core/common/action_util.c **** /** \brief add mods
 165:tmk_core/common/action_util.c ****  *
 166:tmk_core/common/action_util.c ****  * FIXME: needs doc
 167:tmk_core/common/action_util.c ****  */
 168:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 191               		.loc 2 168 0
 192               		.cfi_startproc
 193               	.LVL7:
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 198               		.loc 2 168 0
 199 0000 9091 0000 		lds r25,real_mods
 200 0004 892B      		or r24,r25
 201               	.LVL8:
 202 0006 8093 0000 		sts real_mods,r24
 203 000a 0895      		ret
 204               		.cfi_endproc
 205               	.LFE21:
 207               		.section	.text.del_mods,"ax",@progbits
 208               	.global	del_mods
 210               	del_mods:
 211               	.LFB22:
 169:tmk_core/common/action_util.c **** /** \brief del mods
 170:tmk_core/common/action_util.c ****  *
 171:tmk_core/common/action_util.c ****  * FIXME: needs doc
 172:tmk_core/common/action_util.c ****  */
 173:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 212               		.loc 2 173 0
 213               		.cfi_startproc
 214               	.LVL9:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 219               		.loc 2 173 0
 220 0000 8095      		com r24
 221               	.LVL10:
 222 0002 9091 0000 		lds r25,real_mods
 223 0006 8923      		and r24,r25
 224               	.LVL11:
 225 0008 8093 0000 		sts real_mods,r24
 226 000c 0895      		ret
 227               		.cfi_endproc
 228               	.LFE22:
 230               		.section	.text.set_mods,"ax",@progbits
 231               	.global	set_mods
 233               	set_mods:
 234               	.LFB23:
 174:tmk_core/common/action_util.c **** /** \brief set mods
 175:tmk_core/common/action_util.c ****  *
 176:tmk_core/common/action_util.c ****  * FIXME: needs doc
 177:tmk_core/common/action_util.c ****  */
 178:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 235               		.loc 2 178 0
 236               		.cfi_startproc
 237               	.LVL12:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 242               		.loc 2 178 0
 243 0000 8093 0000 		sts real_mods,r24
 244 0004 0895      		ret
 245               		.cfi_endproc
 246               	.LFE23:
 248               		.section	.text.clear_mods,"ax",@progbits
 249               	.global	clear_mods
 251               	clear_mods:
 252               	.LFB24:
 179:tmk_core/common/action_util.c **** /** \brief clear mods
 180:tmk_core/common/action_util.c ****  *
 181:tmk_core/common/action_util.c ****  * FIXME: needs doc
 182:tmk_core/common/action_util.c ****  */
 183:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 253               		.loc 2 183 0
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
 259               		.loc 2 183 0
 260 0000 1092 0000 		sts real_mods,__zero_reg__
 261 0004 0895      		ret
 262               		.cfi_endproc
 263               	.LFE24:
 265               		.section	.text.get_weak_mods,"ax",@progbits
 266               	.global	get_weak_mods
 268               	get_weak_mods:
 269               	.LFB25:
 184:tmk_core/common/action_util.c **** 
 185:tmk_core/common/action_util.c **** /** \brief get weak mods
 186:tmk_core/common/action_util.c ****  *
 187:tmk_core/common/action_util.c ****  * FIXME: needs doc
 188:tmk_core/common/action_util.c ****  */
 189:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 270               		.loc 2 189 0
 271               		.cfi_startproc
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 0 */
 275               	.L__stack_usage = 0
 276               		.loc 2 189 0
 277 0000 8091 0000 		lds r24,weak_mods
 278 0004 0895      		ret
 279               		.cfi_endproc
 280               	.LFE25:
 282               		.section	.text.add_weak_mods,"ax",@progbits
 283               	.global	add_weak_mods
 285               	add_weak_mods:
 286               	.LFB26:
 190:tmk_core/common/action_util.c **** /** \brief add weak mods
 191:tmk_core/common/action_util.c ****  *
 192:tmk_core/common/action_util.c ****  * FIXME: needs doc
 193:tmk_core/common/action_util.c ****  */
 194:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 287               		.loc 2 194 0
 288               		.cfi_startproc
 289               	.LVL13:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 294               		.loc 2 194 0
 295 0000 9091 0000 		lds r25,weak_mods
 296 0004 892B      		or r24,r25
 297               	.LVL14:
 298 0006 8093 0000 		sts weak_mods,r24
 299 000a 0895      		ret
 300               		.cfi_endproc
 301               	.LFE26:
 303               		.section	.text.del_weak_mods,"ax",@progbits
 304               	.global	del_weak_mods
 306               	del_weak_mods:
 307               	.LFB27:
 195:tmk_core/common/action_util.c **** /** \brief del weak mods
 196:tmk_core/common/action_util.c ****  *
 197:tmk_core/common/action_util.c ****  * FIXME: needs doc
 198:tmk_core/common/action_util.c ****  */
 199:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 308               		.loc 2 199 0
 309               		.cfi_startproc
 310               	.LVL15:
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 315               		.loc 2 199 0
 316 0000 8095      		com r24
 317               	.LVL16:
 318 0002 9091 0000 		lds r25,weak_mods
 319 0006 8923      		and r24,r25
 320               	.LVL17:
 321 0008 8093 0000 		sts weak_mods,r24
 322 000c 0895      		ret
 323               		.cfi_endproc
 324               	.LFE27:
 326               		.section	.text.set_weak_mods,"ax",@progbits
 327               	.global	set_weak_mods
 329               	set_weak_mods:
 330               	.LFB28:
 200:tmk_core/common/action_util.c **** /** \brief set weak mods
 201:tmk_core/common/action_util.c ****  *
 202:tmk_core/common/action_util.c ****  * FIXME: needs doc
 203:tmk_core/common/action_util.c ****  */
 204:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 331               		.loc 2 204 0
 332               		.cfi_startproc
 333               	.LVL18:
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 0 */
 337               	.L__stack_usage = 0
 338               		.loc 2 204 0
 339 0000 8093 0000 		sts weak_mods,r24
 340 0004 0895      		ret
 341               		.cfi_endproc
 342               	.LFE28:
 344               		.section	.text.clear_weak_mods,"ax",@progbits
 345               	.global	clear_weak_mods
 347               	clear_weak_mods:
 348               	.LFB29:
 205:tmk_core/common/action_util.c **** /** \brief clear weak mods
 206:tmk_core/common/action_util.c ****  *
 207:tmk_core/common/action_util.c ****  * FIXME: needs doc
 208:tmk_core/common/action_util.c ****  */
 209:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 349               		.loc 2 209 0
 350               		.cfi_startproc
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 355               		.loc 2 209 0
 356 0000 1092 0000 		sts weak_mods,__zero_reg__
 357 0004 0895      		ret
 358               		.cfi_endproc
 359               	.LFE29:
 361               		.section	.text.get_macro_mods,"ax",@progbits
 362               	.global	get_macro_mods
 364               	get_macro_mods:
 365               	.LFB30:
 210:tmk_core/common/action_util.c **** 
 211:tmk_core/common/action_util.c **** /* macro modifier */
 212:tmk_core/common/action_util.c **** /** \brief get macro mods
 213:tmk_core/common/action_util.c ****  *
 214:tmk_core/common/action_util.c ****  * FIXME: needs doc
 215:tmk_core/common/action_util.c ****  */
 216:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 366               		.loc 2 216 0
 367               		.cfi_startproc
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 0 */
 371               	.L__stack_usage = 0
 372               		.loc 2 216 0
 373 0000 8091 0000 		lds r24,macro_mods
 374 0004 0895      		ret
 375               		.cfi_endproc
 376               	.LFE30:
 378               		.section	.text.add_macro_mods,"ax",@progbits
 379               	.global	add_macro_mods
 381               	add_macro_mods:
 382               	.LFB31:
 217:tmk_core/common/action_util.c **** /** \brief add macro mods
 218:tmk_core/common/action_util.c ****  *
 219:tmk_core/common/action_util.c ****  * FIXME: needs doc
 220:tmk_core/common/action_util.c ****  */
 221:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 383               		.loc 2 221 0
 384               		.cfi_startproc
 385               	.LVL19:
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 0 */
 389               	.L__stack_usage = 0
 390               		.loc 2 221 0
 391 0000 9091 0000 		lds r25,macro_mods
 392 0004 892B      		or r24,r25
 393               	.LVL20:
 394 0006 8093 0000 		sts macro_mods,r24
 395 000a 0895      		ret
 396               		.cfi_endproc
 397               	.LFE31:
 399               		.section	.text.del_macro_mods,"ax",@progbits
 400               	.global	del_macro_mods
 402               	del_macro_mods:
 403               	.LFB32:
 222:tmk_core/common/action_util.c **** /** \brief del macro mods
 223:tmk_core/common/action_util.c ****  *
 224:tmk_core/common/action_util.c ****  * FIXME: needs doc
 225:tmk_core/common/action_util.c ****  */
 226:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 404               		.loc 2 226 0
 405               		.cfi_startproc
 406               	.LVL21:
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 0 */
 410               	.L__stack_usage = 0
 411               		.loc 2 226 0
 412 0000 8095      		com r24
 413               	.LVL22:
 414 0002 9091 0000 		lds r25,macro_mods
 415 0006 8923      		and r24,r25
 416               	.LVL23:
 417 0008 8093 0000 		sts macro_mods,r24
 418 000c 0895      		ret
 419               		.cfi_endproc
 420               	.LFE32:
 422               		.section	.text.set_macro_mods,"ax",@progbits
 423               	.global	set_macro_mods
 425               	set_macro_mods:
 426               	.LFB33:
 227:tmk_core/common/action_util.c **** /** \brief set macro mods
 228:tmk_core/common/action_util.c ****  *
 229:tmk_core/common/action_util.c ****  * FIXME: needs doc
 230:tmk_core/common/action_util.c ****  */
 231:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 427               		.loc 2 231 0
 428               		.cfi_startproc
 429               	.LVL24:
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 0 */
 433               	.L__stack_usage = 0
 434               		.loc 2 231 0
 435 0000 8093 0000 		sts macro_mods,r24
 436 0004 0895      		ret
 437               		.cfi_endproc
 438               	.LFE33:
 440               		.section	.text.clear_macro_mods,"ax",@progbits
 441               	.global	clear_macro_mods
 443               	clear_macro_mods:
 444               	.LFB34:
 232:tmk_core/common/action_util.c **** /** \brief clear macro mods
 233:tmk_core/common/action_util.c ****  *
 234:tmk_core/common/action_util.c ****  * FIXME: needs doc
 235:tmk_core/common/action_util.c ****  */
 236:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 445               		.loc 2 236 0
 446               		.cfi_startproc
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 451               		.loc 2 236 0
 452 0000 1092 0000 		sts macro_mods,__zero_reg__
 453 0004 0895      		ret
 454               		.cfi_endproc
 455               	.LFE34:
 457               		.section	.text.get_oneshot_mods,"ax",@progbits
 458               	.global	get_oneshot_mods
 460               	get_oneshot_mods:
 461               	.LFB37:
 237:tmk_core/common/action_util.c **** 
 238:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 244:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 245:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 246:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 247:tmk_core/common/action_util.c **** #    endif
 248:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 249:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 250:tmk_core/common/action_util.c ****     }
 251:tmk_core/common/action_util.c **** }
 252:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 257:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 258:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 259:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 260:tmk_core/common/action_util.c ****         oneshot_time = 0;
 261:tmk_core/common/action_util.c **** #    endif
 262:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 263:tmk_core/common/action_util.c ****     }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 462               		.loc 2 269 0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               		.loc 2 269 0
 469 0000 8091 0000 		lds r24,oneshot_mods
 470 0004 0895      		ret
 471               		.cfi_endproc
 472               	.LFE37:
 474               		.section	.text.oneshot_layer_changed_user,"ax",@progbits
 475               		.weak	oneshot_layer_changed_user
 477               	oneshot_layer_changed_user:
 478               	.LFB42:
 270:tmk_core/common/action_util.c **** #endif
 271:tmk_core/common/action_util.c **** 
 272:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 273:tmk_core/common/action_util.c ****  *
 274:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 275:tmk_core/common/action_util.c ****  */
 276:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 277:tmk_core/common/action_util.c **** 
 278:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 283:tmk_core/common/action_util.c **** 
 284:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 285:tmk_core/common/action_util.c ****  *
 286:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 287:tmk_core/common/action_util.c ****  */
 288:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 289:tmk_core/common/action_util.c **** 
 290:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 291:tmk_core/common/action_util.c ****  *
 292:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 293:tmk_core/common/action_util.c ****  */
 294:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 295:tmk_core/common/action_util.c **** 
 296:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 297:tmk_core/common/action_util.c ****  *
 298:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 299:tmk_core/common/action_util.c ****  */
 300:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 479               		.loc 2 300 0
 480               		.cfi_startproc
 481               	.LVL25:
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 486 0000 0895      		ret
 487               		.cfi_endproc
 488               	.LFE42:
 490               		.set	oneshot_layer_changed_user.localalias.0,oneshot_layer_changed_user
 491               		.section	.text.oneshot_mods_changed_user,"ax",@progbits
 492               		.weak	oneshot_mods_changed_user
 494               	oneshot_mods_changed_user:
 495               	.LFB46:
 496               		.cfi_startproc
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 0 */
 500               	.L__stack_usage = 0
 501 0000 0C94 0000 		jmp oneshot_layer_changed_user.localalias.0
 502               		.cfi_endproc
 503               	.LFE46:
 505               		.section	.text.oneshot_mods_changed_kb,"ax",@progbits
 506               		.weak	oneshot_mods_changed_kb
 508               	oneshot_mods_changed_kb:
 509               	.LFB41:
 294:tmk_core/common/action_util.c **** 
 510               		.loc 2 294 0
 511               		.cfi_startproc
 512               	.LVL26:
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 0 */
 516               	.L__stack_usage = 0
 294:tmk_core/common/action_util.c **** 
 517               		.loc 2 294 0
 518 0000 0C94 0000 		jmp oneshot_mods_changed_user
 519               	.LVL27:
 520               		.cfi_endproc
 521               	.LFE41:
 523               		.section	.text.set_oneshot_mods,"ax",@progbits
 524               	.global	set_oneshot_mods
 526               	set_oneshot_mods:
 527               	.LFB35:
 243:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 528               		.loc 2 243 0
 529               		.cfi_startproc
 530               	.LVL28:
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 0 */
 534               	.L__stack_usage = 0
 244:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 535               		.loc 2 244 0
 536 0000 9091 0000 		lds r25,oneshot_mods
 537 0004 9817      		cp r25,r24
 538 0006 01F0      		breq .L30
 248:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 539               		.loc 2 248 0
 540 0008 8093 0000 		sts oneshot_mods,r24
 249:tmk_core/common/action_util.c ****     }
 541               		.loc 2 249 0
 542 000c 0C94 0000 		jmp oneshot_mods_changed_kb
 543               	.LVL29:
 544               	.L30:
 545 0010 0895      		ret
 546               		.cfi_endproc
 547               	.LFE35:
 549               		.section	.text.clear_oneshot_mods,"ax",@progbits
 550               	.global	clear_oneshot_mods
 552               	clear_oneshot_mods:
 553               	.LFB36:
 256:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 554               		.loc 2 256 0
 555               		.cfi_startproc
 556               	/* prologue: function */
 557               	/* frame size = 0 */
 558               	/* stack size = 0 */
 559               	.L__stack_usage = 0
 257:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 560               		.loc 2 257 0
 561 0000 8091 0000 		lds r24,oneshot_mods
 562 0004 8823      		tst r24
 563 0006 01F0      		breq .L32
 258:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 564               		.loc 2 258 0
 565 0008 1092 0000 		sts oneshot_mods,__zero_reg__
 262:tmk_core/common/action_util.c ****     }
 566               		.loc 2 262 0
 567 000c 80E0      		ldi r24,0
 568 000e 0C94 0000 		jmp oneshot_mods_changed_kb
 569               	.LVL30:
 570               	.L32:
 571 0012 0895      		ret
 572               		.cfi_endproc
 573               	.LFE36:
 575               		.section	.text.send_keyboard_report,"ax",@progbits
 576               	.global	send_keyboard_report
 578               	send_keyboard_report:
 579               	.LFB19:
 137:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 580               		.loc 2 137 0
 581               		.cfi_startproc
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 586               		.loc 2 138 0
 587 0000 E091 0000 		lds r30,keyboard_report
 588 0004 F091 0000 		lds r31,keyboard_report+1
 589 0008 8091 0000 		lds r24,real_mods
 590 000c 8083      		st Z,r24
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 591               		.loc 2 139 0
 592 000e E091 0000 		lds r30,keyboard_report
 593 0012 F091 0000 		lds r31,keyboard_report+1
 594 0016 9081      		ld r25,Z
 595 0018 8091 0000 		lds r24,weak_mods
 596 001c 892B      		or r24,r25
 597 001e 8083      		st Z,r24
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 598               		.loc 2 140 0
 599 0020 E091 0000 		lds r30,keyboard_report
 600 0024 F091 0000 		lds r31,keyboard_report+1
 601 0028 9081      		ld r25,Z
 602 002a 8091 0000 		lds r24,macro_mods
 603 002e 892B      		or r24,r25
 604 0030 8083      		st Z,r24
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 605               		.loc 2 142 0
 606 0032 8091 0000 		lds r24,oneshot_mods
 607 0036 8823      		tst r24
 608 0038 01F0      		breq .L36
 149:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 609               		.loc 2 149 0
 610 003a E091 0000 		lds r30,keyboard_report
 611 003e F091 0000 		lds r31,keyboard_report+1
 612 0042 9081      		ld r25,Z
 613 0044 892B      		or r24,r25
 614 0046 8083      		st Z,r24
 150:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 615               		.loc 2 150 0
 616 0048 8091 0000 		lds r24,keyboard_report
 617 004c 9091 0000 		lds r25,keyboard_report+1
 618 0050 0E94 0000 		call has_anykey
 619               	.LVL31:
 620 0054 8111      		cpse r24,__zero_reg__
 151:tmk_core/common/action_util.c ****         }
 621               		.loc 2 151 0
 622 0056 0E94 0000 		call clear_oneshot_mods
 623               	.LVL32:
 624               	.L36:
 156:tmk_core/common/action_util.c **** }
 625               		.loc 2 156 0
 626 005a 8091 0000 		lds r24,keyboard_report
 627 005e 9091 0000 		lds r25,keyboard_report+1
 628 0062 0C94 0000 		jmp host_keyboard_send
 629               	.LVL33:
 630               		.cfi_endproc
 631               	.LFE19:
 633               		.section	.text.oneshot_locked_mods_changed_user,"ax",@progbits
 634               		.weak	oneshot_locked_mods_changed_user
 636               	oneshot_locked_mods_changed_user:
 637               	.LFB48:
 638               		.cfi_startproc
 639               	/* prologue: function */
 640               	/* frame size = 0 */
 641               	/* stack size = 0 */
 642               	.L__stack_usage = 0
 643 0000 0C94 0000 		jmp oneshot_layer_changed_user.localalias.0
 644               		.cfi_endproc
 645               	.LFE48:
 647               		.section	.text.oneshot_locked_mods_changed_kb,"ax",@progbits
 648               		.weak	oneshot_locked_mods_changed_kb
 650               	oneshot_locked_mods_changed_kb:
 651               	.LFB39:
 282:tmk_core/common/action_util.c **** 
 652               		.loc 2 282 0
 653               		.cfi_startproc
 654               	.LVL34:
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 282:tmk_core/common/action_util.c **** 
 659               		.loc 2 282 0
 660 0000 0C94 0000 		jmp oneshot_locked_mods_changed_user
 661               	.LVL35:
 662               		.cfi_endproc
 663               	.LFE39:
 665               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
 666               	.global	set_oneshot_locked_mods
 668               	set_oneshot_locked_mods:
 669               	.LFB10:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 670               		.loc 2 53 0
 671               		.cfi_startproc
 672               	.LVL36:
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 0 */
 676               	.L__stack_usage = 0
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 677               		.loc 2 54 0
 678 0000 9091 0000 		lds r25,oneshot_locked_mods
 679 0004 9817      		cp r25,r24
 680 0006 01F0      		breq .L43
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 681               		.loc 2 55 0
 682 0008 8093 0000 		sts oneshot_locked_mods,r24
  56:tmk_core/common/action_util.c ****     }
 683               		.loc 2 56 0
 684 000c 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 685               	.LVL37:
 686               	.L43:
 687 0010 0895      		ret
 688               		.cfi_endproc
 689               	.LFE10:
 691               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 692               	.global	clear_oneshot_locked_mods
 694               	clear_oneshot_locked_mods:
 695               	.LFB11:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 696               		.loc 2 59 0
 697               		.cfi_startproc
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 0 */
 701               	.L__stack_usage = 0
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 702               		.loc 2 60 0
 703 0000 8091 0000 		lds r24,oneshot_locked_mods
 704 0004 8823      		tst r24
 705 0006 01F0      		breq .L45
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 706               		.loc 2 61 0
 707 0008 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  62:tmk_core/common/action_util.c ****     }
 708               		.loc 2 62 0
 709 000c 80E0      		ldi r24,0
 710 000e 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 711               	.LVL38:
 712               	.L45:
 713 0012 0895      		ret
 714               		.cfi_endproc
 715               	.LFE11:
 717               		.section	.text.oneshot_layer_changed_kb,"ax",@progbits
 718               		.weak	oneshot_layer_changed_kb
 720               	oneshot_layer_changed_kb:
 721               	.LFB43:
 301:tmk_core/common/action_util.c **** 
 302:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 303:tmk_core/common/action_util.c ****  *
 304:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 305:tmk_core/common/action_util.c ****  */
 306:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 722               		.loc 2 306 0
 723               		.cfi_startproc
 724               	.LVL39:
 725               	/* prologue: function */
 726               	/* frame size = 0 */
 727               	/* stack size = 0 */
 728               	.L__stack_usage = 0
 729               		.loc 2 306 0
 730 0000 0C94 0000 		jmp oneshot_layer_changed_user
 731               	.LVL40:
 732               		.cfi_endproc
 733               	.LFE43:
 735               		.section	.text.set_oneshot_layer,"ax",@progbits
 736               	.global	set_oneshot_layer
 738               	set_oneshot_layer:
 739               	.LFB15:
  95:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 740               		.loc 2 95 0
 741               		.cfi_startproc
 742               	.LVL41:
 743               	/* prologue: function */
 744               	/* frame size = 0 */
 745               	/* stack size = 0 */
 746               	.L__stack_usage = 0
  96:tmk_core/common/action_util.c ****     layer_on(layer);
 747               		.loc 2 96 0
 748 0000 98E0      		ldi r25,lo8(8)
 749 0002 899F      		mul r24,r25
 750 0004 9001      		movw r18,r0
 751 0006 1124      		clr __zero_reg__
 752 0008 262B      		or r18,r22
 753 000a 2093 0000 		sts oneshot_layer_data,r18
  97:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 754               		.loc 2 97 0
 755 000e 0E94 0000 		call layer_on
 756               	.LVL42:
 101:tmk_core/common/action_util.c **** }
 757               		.loc 2 101 0
 758 0012 8091 0000 		lds r24,oneshot_layer_data
 759 0016 8595      		asr r24
 760 0018 8595      		asr r24
 761 001a 8595      		asr r24
 762 001c 0C94 0000 		jmp oneshot_layer_changed_kb
 763               	.LVL43:
 764               		.cfi_endproc
 765               	.LFE15:
 767               		.section	.text.reset_oneshot_layer,"ax",@progbits
 768               	.global	reset_oneshot_layer
 770               	reset_oneshot_layer:
 771               	.LFB16:
 107:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 772               		.loc 2 107 0
 773               		.cfi_startproc
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 0 */
 777               	.L__stack_usage = 0
 108:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 778               		.loc 2 108 0
 779 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 112:tmk_core/common/action_util.c **** }
 780               		.loc 2 112 0
 781 0004 80E0      		ldi r24,0
 782 0006 0C94 0000 		jmp oneshot_layer_changed_kb
 783               	.LVL44:
 784               		.cfi_endproc
 785               	.LFE16:
 787               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 788               	.global	clear_oneshot_layer_state
 790               	clear_oneshot_layer_state:
 791               	.LFB17:
 118:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 792               		.loc 2 118 0
 793               		.cfi_startproc
 794               	.LVL45:
 795               	/* prologue: function */
 796               	/* frame size = 0 */
 797               	/* stack size = 0 */
 798               	.L__stack_usage = 0
 119:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 799               		.loc 2 119 0
 800 0000 2091 0000 		lds r18,oneshot_layer_data
 801               	.LVL46:
 120:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 802               		.loc 2 120 0
 803 0004 8095      		com r24
 804               	.LVL47:
 805 0006 8223      		and r24,r18
 806               	.LVL48:
 807 0008 8093 0000 		sts oneshot_layer_data,r24
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 808               		.loc 2 121 0
 809 000c 982F      		mov r25,r24
 810 000e 9770      		andi r25,lo8(7)
 811 0010 01F4      		brne .L50
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 812               		.loc 2 121 0 is_stmt 0 discriminator 1
 813 0012 30E0      		ldi r19,0
 814 0014 482F      		mov r20,r24
 815 0016 082E      		mov __tmp_reg__,r24
 816 0018 000C      		lsl r0
 817 001a 550B      		sbc r21,r21
 818 001c 2417      		cp r18,r20
 819 001e 3507      		cpc r19,r21
 820 0020 01F0      		breq .L50
 122:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 821               		.loc 2 122 0 is_stmt 1
 822 0022 8595      		asr r24
 823 0024 8595      		asr r24
 824 0026 8595      		asr r24
 825 0028 0E94 0000 		call layer_off
 826               	.LVL49:
 123:tmk_core/common/action_util.c ****     }
 827               		.loc 2 123 0
 828 002c 0C94 0000 		jmp reset_oneshot_layer
 829               	.LVL50:
 830               	.L50:
 831 0030 0895      		ret
 832               		.cfi_endproc
 833               	.LFE17:
 835               		.section	.text.has_anymod,"ax",@progbits
 836               	.global	has_anymod
 838               	has_anymod:
 839               	.LFB44:
 307:tmk_core/common/action_util.c **** 
 308:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 309:tmk_core/common/action_util.c ****  *
 310:tmk_core/common/action_util.c ****  * FIXME: needs doc
 311:tmk_core/common/action_util.c ****  */
 312:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 840               		.loc 2 312 0
 841               		.cfi_startproc
 842               	/* prologue: function */
 843               	/* frame size = 0 */
 844               	/* stack size = 0 */
 845               	.L__stack_usage = 0
 846               		.loc 2 312 0
 847 0000 8091 0000 		lds r24,real_mods
 848 0004 0C94 0000 		jmp bitpop
 849               	.LVL51:
 850               		.cfi_endproc
 851               	.LFE44:
 853               		.section	.bss.oneshot_layer_data,"aw",@nobits
 856               	oneshot_layer_data:
 857 0000 00        		.zero	1
 858               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 861               	oneshot_locked_mods:
 862 0000 00        		.zero	1
 863               		.section	.bss.oneshot_mods,"aw",@nobits
 866               	oneshot_mods:
 867 0000 00        		.zero	1
 868               	.global	keyboard_report
 869               		.section	.data.keyboard_report,"aw",@progbits
 872               	keyboard_report:
 873 0000 0000      		.word	__compound_literal.0
 874               		.section	.bss.__compound_literal.0,"aw",@nobits
 877               	__compound_literal.0:
 878 0000 0000 0000 		.zero	8
 878      0000 0000 
 879               		.section	.bss.macro_mods,"aw",@nobits
 882               	macro_mods:
 883 0000 00        		.zero	1
 884               		.section	.bss.weak_mods,"aw",@nobits
 887               	weak_mods:
 888 0000 00        		.zero	1
 889               		.section	.bss.real_mods,"aw",@nobits
 892               	real_mods:
 893 0000 00        		.zero	1
 894               		.text
 895               	.Letext0:
 896               		.file 3 "/usr/lib/avr/include/stdint.h"
 897               		.file 4 "tmk_core/common/report.h"
 898               		.file 5 "tmk_core/common/host.h"
 899               		.file 6 "tmk_core/common/action_layer.h"
 900               		.file 7 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/cc6xlZdb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6xlZdb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6xlZdb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6xlZdb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6xlZdb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6xlZdb.s:13     .text.add_key:0000000000000000 add_key
     /tmp/cc6xlZdb.s:872    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/cc6xlZdb.s:36     .text.del_key:0000000000000000 del_key
     /tmp/cc6xlZdb.s:58     .text.clear_keys:0000000000000000 clear_keys
     /tmp/cc6xlZdb.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/cc6xlZdb.s:861    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/cc6xlZdb.s:95     .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
     /tmp/cc6xlZdb.s:112    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/cc6xlZdb.s:856    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/cc6xlZdb.s:132    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/cc6xlZdb.s:150    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/cc6xlZdb.s:172    .text.get_mods:0000000000000000 get_mods
     /tmp/cc6xlZdb.s:892    .bss.real_mods:0000000000000000 real_mods
     /tmp/cc6xlZdb.s:189    .text.add_mods:0000000000000000 add_mods
     /tmp/cc6xlZdb.s:210    .text.del_mods:0000000000000000 del_mods
     /tmp/cc6xlZdb.s:233    .text.set_mods:0000000000000000 set_mods
     /tmp/cc6xlZdb.s:251    .text.clear_mods:0000000000000000 clear_mods
     /tmp/cc6xlZdb.s:268    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/cc6xlZdb.s:887    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/cc6xlZdb.s:285    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/cc6xlZdb.s:306    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/cc6xlZdb.s:329    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/cc6xlZdb.s:347    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/cc6xlZdb.s:364    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/cc6xlZdb.s:882    .bss.macro_mods:0000000000000000 macro_mods
     /tmp/cc6xlZdb.s:381    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/cc6xlZdb.s:402    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/cc6xlZdb.s:425    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/cc6xlZdb.s:443    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/cc6xlZdb.s:460    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/cc6xlZdb.s:866    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/cc6xlZdb.s:477    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
     /tmp/cc6xlZdb.s:477    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user.localalias.0
     /tmp/cc6xlZdb.s:494    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
     /tmp/cc6xlZdb.s:508    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
     /tmp/cc6xlZdb.s:526    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/cc6xlZdb.s:552    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/cc6xlZdb.s:578    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/cc6xlZdb.s:636    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
     /tmp/cc6xlZdb.s:650    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
     /tmp/cc6xlZdb.s:668    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/cc6xlZdb.s:694    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/cc6xlZdb.s:720    .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
     /tmp/cc6xlZdb.s:738    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/cc6xlZdb.s:770    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/cc6xlZdb.s:790    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/cc6xlZdb.s:838    .text.has_anymod:0000000000000000 has_anymod
     /tmp/cc6xlZdb.s:877    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
__do_copy_data
__do_clear_bss
