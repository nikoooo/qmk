   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LFB110:
  15               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   8:tmk_core/common/avr/suspend.c **** #include "suspend.h"
   9:tmk_core/common/avr/suspend.c **** #include "timer.h"
  10:tmk_core/common/avr/suspend.c **** #include "led.h"
  11:tmk_core/common/avr/suspend.c **** #include "host.h"
  12:tmk_core/common/avr/suspend.c **** #include "rgblight_reconfig.h"
  13:tmk_core/common/avr/suspend.c **** 
  14:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  15:tmk_core/common/avr/suspend.c **** #    include "lufa.h"
  16:tmk_core/common/avr/suspend.c **** #endif
  17:tmk_core/common/avr/suspend.c **** 
  18:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  19:tmk_core/common/avr/suspend.c **** #    include "backlight.h"
  20:tmk_core/common/avr/suspend.c **** #endif
  21:tmk_core/common/avr/suspend.c **** 
  22:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  23:tmk_core/common/avr/suspend.c **** #    include "audio.h"
  24:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  25:tmk_core/common/avr/suspend.c **** 
  26:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  27:tmk_core/common/avr/suspend.c **** #    include "rgblight.h"
  28:tmk_core/common/avr/suspend.c **** extern rgblight_config_t rgblight_config;
  29:tmk_core/common/avr/suspend.c **** static bool              rgblight_enabled;
  30:tmk_core/common/avr/suspend.c **** static bool              is_suspended;
  31:tmk_core/common/avr/suspend.c **** #endif
  32:tmk_core/common/avr/suspend.c **** 
  33:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)                                                                     
  34:tmk_core/common/avr/suspend.c ****     __asm__ __volatile__("in __tmp_reg__,__SREG__"                                                 
  35:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  36:tmk_core/common/avr/suspend.c ****                          "cli"                                                                     
  37:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  38:tmk_core/common/avr/suspend.c ****                          "wdr"                                                                     
  39:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  40:tmk_core/common/avr/suspend.c ****                          "sts %0,%1"                                                               
  41:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  42:tmk_core/common/avr/suspend.c ****                          "out __SREG__,__tmp_reg__"                                                
  43:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  44:tmk_core/common/avr/suspend.c ****                          "sts %0,%2"                                                               
  45:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  46:tmk_core/common/avr/suspend.c ****                          : /* no outputs */                                                        
  47:tmk_core/common/avr/suspend.c ****                          : "M"(_SFR_MEM_ADDR(_WD_CONTROL_REG)), "r"(_BV(_WD_CHANGE_BIT) | _BV(WDE))
  48:tmk_core/common/avr/suspend.c ****                          : "r0")
  49:tmk_core/common/avr/suspend.c **** 
  50:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  51:tmk_core/common/avr/suspend.c ****  *
  52:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  53:tmk_core/common/avr/suspend.c ****  */
  54:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  16               		.loc 1 54 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  55:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 55 0
  24               	/* #APP */
  25               	 ;  55 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  56:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 56 0
  29               	/* #NOAPP */
  30 0002 83B7      		in r24,0x33
  31               	.LVL1:
  32 0004 817F      		andi r24,lo8(-15)
  33 0006 83BF      		out 0x33,r24
  57:tmk_core/common/avr/suspend.c ****     sleep_enable();
  34               		.loc 1 57 0
  35 0008 83B7      		in r24,0x33
  36 000a 8160      		ori r24,lo8(1)
  37 000c 83BF      		out 0x33,r24
  58:tmk_core/common/avr/suspend.c ****     sei();
  38               		.loc 1 58 0
  39               	/* #APP */
  40               	 ;  58 "tmk_core/common/avr/suspend.c" 1
  41 000e 7894      		sei
  42               	 ;  0 "" 2
  59:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  43               		.loc 1 59 0
  44               	 ;  59 "tmk_core/common/avr/suspend.c" 1
  45 0010 8895      		sleep
  46               		
  47               	 ;  0 "" 2
  60:tmk_core/common/avr/suspend.c ****     sleep_disable();
  48               		.loc 1 60 0
  49               	/* #NOAPP */
  50 0012 83B7      		in r24,0x33
  51 0014 8E7F      		andi r24,lo8(-2)
  52 0016 83BF      		out 0x33,r24
  53 0018 0895      		ret
  54               		.cfi_endproc
  55               	.LFE110:
  57               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
  58               		.weak	suspend_wakeup_init_user
  60               	suspend_wakeup_init_user:
  61               	.LFB118:
  61:tmk_core/common/avr/suspend.c **** }
  62:tmk_core/common/avr/suspend.c **** 
  63:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  64:tmk_core/common/avr/suspend.c **** 
  65:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  66:tmk_core/common/avr/suspend.c ****  *
  67:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  68:tmk_core/common/avr/suspend.c ****  */
  69:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_user(void) {}
  70:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  71:tmk_core/common/avr/suspend.c ****  *
  72:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  73:tmk_core/common/avr/suspend.c ****  */
  74:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_kb(void) { suspend_power_down_user(); }
  75:tmk_core/common/avr/suspend.c **** 
  76:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  77:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  78:tmk_core/common/avr/suspend.c ****  *
  79:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  80:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  81:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  82:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  83:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  84:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  85:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  90:tmk_core/common/avr/suspend.c ****  */
  91:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  92:tmk_core/common/avr/suspend.c **** 
  93:tmk_core/common/avr/suspend.c **** /** \brief Power down
  94:tmk_core/common/avr/suspend.c ****  *
  95:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  96:tmk_core/common/avr/suspend.c ****  */
  97:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
  98:tmk_core/common/avr/suspend.c **** #    ifdef PROTOCOL_LUFA
  99:tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
 100:tmk_core/common/avr/suspend.c **** #    endif
 101:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 102:tmk_core/common/avr/suspend.c **** 
 103:tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
 104:tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c **** #    ifdef BACKLIGHT_ENABLE
 107:tmk_core/common/avr/suspend.c ****     backlight_set(0);
 108:tmk_core/common/avr/suspend.c **** #    endif
 109:tmk_core/common/avr/suspend.c **** 
 110:tmk_core/common/avr/suspend.c ****     // Turn off LED indicators
 111:tmk_core/common/avr/suspend.c ****     uint8_t leds_off = 0;
 112:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 113:tmk_core/common/avr/suspend.c ****     if (is_backlight_enabled()) {
 114:tmk_core/common/avr/suspend.c ****         // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already of
 115:tmk_core/common/avr/suspend.c ****         leds_off |= (1 << USB_LED_CAPS_LOCK);
 116:tmk_core/common/avr/suspend.c ****     }
 117:tmk_core/common/avr/suspend.c **** #    endif
 118:tmk_core/common/avr/suspend.c ****     led_set(leds_off);
 119:tmk_core/common/avr/suspend.c **** 
 120:tmk_core/common/avr/suspend.c **** #    ifdef AUDIO_ENABLE
 121:tmk_core/common/avr/suspend.c ****     // This sometimes disables the start-up noise, so it's been disabled
 122:tmk_core/common/avr/suspend.c ****     // stop_all_notes();
 123:tmk_core/common/avr/suspend.c **** #    endif /* AUDIO_ENABLE */
 124:tmk_core/common/avr/suspend.c **** #    if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 125:tmk_core/common/avr/suspend.c **** #        ifdef RGBLIGHT_ANIMATIONS
 126:tmk_core/common/avr/suspend.c ****     rgblight_timer_disable();
 127:tmk_core/common/avr/suspend.c **** #        endif
 128:tmk_core/common/avr/suspend.c ****     if (!is_suspended) {
 129:tmk_core/common/avr/suspend.c ****         is_suspended     = true;
 130:tmk_core/common/avr/suspend.c ****         rgblight_enabled = rgblight_config.enable;
 131:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 132:tmk_core/common/avr/suspend.c ****     }
 133:tmk_core/common/avr/suspend.c **** #    endif
 134:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 135:tmk_core/common/avr/suspend.c **** 
 136:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 137:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 138:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 139:tmk_core/common/avr/suspend.c ****     // - prescale clock
 140:tmk_core/common/avr/suspend.c ****     // - BOD disable
 141:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 142:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 143:tmk_core/common/avr/suspend.c ****     sleep_enable();
 144:tmk_core/common/avr/suspend.c ****     sei();
 145:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 146:tmk_core/common/avr/suspend.c ****     sleep_disable();
 147:tmk_core/common/avr/suspend.c **** 
 148:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 149:tmk_core/common/avr/suspend.c ****     wdt_disable();
 150:tmk_core/common/avr/suspend.c **** }
 151:tmk_core/common/avr/suspend.c **** #endif
 152:tmk_core/common/avr/suspend.c **** 
 153:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 154:tmk_core/common/avr/suspend.c ****  *
 155:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 156:tmk_core/common/avr/suspend.c ****  */
 157:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 158:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 159:tmk_core/common/avr/suspend.c **** 
 160:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 161:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 162:tmk_core/common/avr/suspend.c **** #endif
 163:tmk_core/common/avr/suspend.c **** }
 164:tmk_core/common/avr/suspend.c **** 
 165:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_up(void) {}
 166:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_down(void) {}
 167:tmk_core/common/avr/suspend.c **** bool                       suspend_wakeup_condition(void) {
 168:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 169:tmk_core/common/avr/suspend.c ****     matrix_scan();
 170:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 171:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 172:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 173:tmk_core/common/avr/suspend.c ****     }
 174:tmk_core/common/avr/suspend.c ****     return false;
 175:tmk_core/common/avr/suspend.c **** }
 176:tmk_core/common/avr/suspend.c **** 
 177:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 178:tmk_core/common/avr/suspend.c ****  *
 179:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 180:tmk_core/common/avr/suspend.c ****  */
 181:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_user(void) {}
  62               		.loc 1 181 0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  68 0000 0895      		ret
  69               		.cfi_endproc
  70               	.LFE118:
  72               		.set	suspend_wakeup_init_user.localalias.0,suspend_wakeup_init_user
  73               		.section	.text.matrix_power_down,"ax",@progbits
  74               		.weak	matrix_power_down
  76               	matrix_power_down:
  77               	.LFB123:
  78               		.cfi_startproc
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  83 0000 0C94 0000 		jmp suspend_wakeup_init_user.localalias.0
  84               		.cfi_endproc
  85               	.LFE123:
  87               		.section	.text.matrix_power_up,"ax",@progbits
  88               		.weak	matrix_power_up
  90               	matrix_power_up:
  91               	.LFB125:
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  97 0000 0C94 0000 		jmp suspend_wakeup_init_user.localalias.0
  98               		.cfi_endproc
  99               	.LFE125:
 101               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 102               	.global	suspend_wakeup_condition
 104               	suspend_wakeup_condition:
 105               	.LFB117:
 167:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 106               		.loc 1 167 0
 107               		.cfi_startproc
 167:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 108               		.loc 1 167 0
 109 0000 CF93      		push r28
 110               	.LCFI0:
 111               		.cfi_def_cfa_offset 3
 112               		.cfi_offset 28, -2
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 1 */
 116               	.L__stack_usage = 1
 168:tmk_core/common/avr/suspend.c ****     matrix_scan();
 117               		.loc 1 168 0
 118 0002 0E94 0000 		call matrix_power_up
 119               	.LVL2:
 169:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 120               		.loc 1 169 0
 121 0006 0E94 0000 		call matrix_scan
 122               	.LVL3:
 170:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 123               		.loc 1 170 0
 124 000a 0E94 0000 		call matrix_power_down
 125               	.LVL4:
 126               	.LBB7:
 171:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 127               		.loc 1 171 0
 128 000e C0E0      		ldi r28,0
 129               	.LVL5:
 130               	.L7:
 172:tmk_core/common/avr/suspend.c ****     }
 131               		.loc 1 172 0
 132 0010 8C2F      		mov r24,r28
 133 0012 0E94 0000 		call matrix_get_row
 134               	.LVL6:
 135 0016 8111      		cpse r24,__zero_reg__
 136 0018 00C0      		rjmp .L8
 171:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 137               		.loc 1 171 0 discriminator 2
 138 001a CF5F      		subi r28,lo8(-(1))
 139               	.LVL7:
 140 001c C830      		cpi r28,lo8(8)
 141 001e 01F4      		brne .L7
 142 0020 00C0      		rjmp .L6
 143               	.L8:
 172:tmk_core/common/avr/suspend.c ****     }
 144               		.loc 1 172 0
 145 0022 81E0      		ldi r24,lo8(1)
 146               	.L6:
 147               	/* epilogue start */
 148               	.LBE7:
 175:tmk_core/common/avr/suspend.c **** 
 149               		.loc 1 175 0
 150 0024 CF91      		pop r28
 151               	.LVL8:
 152 0026 0895      		ret
 153               		.cfi_endproc
 154               	.LFE117:
 156               		.section	.text.suspend_power_down_user,"ax",@progbits
 157               		.weak	suspend_power_down_user
 159               	suspend_power_down_user:
 160               	.LFB127:
 161               		.cfi_startproc
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 166 0000 0C94 0000 		jmp suspend_wakeup_init_user.localalias.0
 167               		.cfi_endproc
 168               	.LFE127:
 170               		.section	.text.suspend_power_down_kb,"ax",@progbits
 171               		.weak	suspend_power_down_kb
 173               	suspend_power_down_kb:
 174               	.LFB112:
  74:tmk_core/common/avr/suspend.c **** 
 175               		.loc 1 74 0
 176               		.cfi_startproc
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 0 */
 180               	.L__stack_usage = 0
  74:tmk_core/common/avr/suspend.c **** 
 181               		.loc 1 74 0
 182 0000 0C94 0000 		jmp suspend_power_down_user
 183               	.LVL9:
 184               		.cfi_endproc
 185               	.LFE112:
 187               		.section	.text.suspend_power_down,"ax",@progbits
 188               	.global	suspend_power_down
 190               	suspend_power_down:
 191               	.LFB114:
 157:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 192               		.loc 1 157 0
 193               		.cfi_startproc
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 158:tmk_core/common/avr/suspend.c **** 
 198               		.loc 1 158 0
 199 0000 0E94 0000 		call suspend_power_down_kb
 200               	.LVL10:
 201               	.LBB12:
 202               	.LBB13:
  99:tmk_core/common/avr/suspend.c **** #    endif
 203               		.loc 1 99 0
 204 0004 8091 0000 		lds r24,USB_DeviceState
 205 0008 8430      		cpi r24,lo8(4)
 206 000a 01F0      		breq .L13
 101:tmk_core/common/avr/suspend.c **** 
 207               		.loc 1 101 0
 208 000c 1092 0000 		sts wdt_timeout,__zero_reg__
 104:tmk_core/common/avr/suspend.c **** 
 209               		.loc 1 104 0
 210 0010 20E4      		ldi r18,lo8(64)
 211 0012 88E1      		ldi r24,lo8(24)
 212 0014 90E0      		ldi r25,0
 213               	/* #APP */
 214               	 ;  104 "tmk_core/common/avr/suspend.c" 1
 215 0016 0FB6      		in __tmp_reg__,__SREG__
 216 0018 F894      		cli
 217 001a A895      		wdr
 218 001c 8093 6000 		sts 96,r24
 219 0020 0FBE      		out __SREG__,__tmp_reg__
 220 0022 2093 6000 		sts 96,r18
 221               		
 222               	 ;  0 "" 2
 223               	.LVL11:
 118:tmk_core/common/avr/suspend.c **** 
 224               		.loc 1 118 0
 225               	/* #NOAPP */
 226 0026 80E0      		ldi r24,0
 227 0028 0E94 0000 		call led_set
 228               	.LVL12:
 134:tmk_core/common/avr/suspend.c **** 
 229               		.loc 1 134 0
 230 002c 0E94 0000 		call suspend_power_down_kb
 231               	.LVL13:
 142:tmk_core/common/avr/suspend.c ****     sleep_enable();
 232               		.loc 1 142 0
 233 0030 83B7      		in r24,0x33
 234 0032 817F      		andi r24,lo8(-15)
 235 0034 8460      		ori r24,lo8(4)
 236 0036 83BF      		out 0x33,r24
 143:tmk_core/common/avr/suspend.c ****     sei();
 237               		.loc 1 143 0
 238 0038 83B7      		in r24,0x33
 239 003a 8160      		ori r24,lo8(1)
 240 003c 83BF      		out 0x33,r24
 144:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 241               		.loc 1 144 0
 242               	/* #APP */
 243               	 ;  144 "tmk_core/common/avr/suspend.c" 1
 244 003e 7894      		sei
 245               	 ;  0 "" 2
 145:tmk_core/common/avr/suspend.c ****     sleep_disable();
 246               		.loc 1 145 0
 247               	 ;  145 "tmk_core/common/avr/suspend.c" 1
 248 0040 8895      		sleep
 249               		
 250               	 ;  0 "" 2
 146:tmk_core/common/avr/suspend.c **** 
 251               		.loc 1 146 0
 252               	/* #NOAPP */
 253 0042 83B7      		in r24,0x33
 254 0044 8E7F      		andi r24,lo8(-2)
 255 0046 83BF      		out 0x33,r24
 256               	.LBB14:
 257               	.LBB15:
 258               		.file 2 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/lib/avr/include/avr/wdt.h **** 
 103:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/lib/avr/include/avr/wdt.h **** #else
 106:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/lib/avr/include/avr/wdt.h **** #endif
 108:/usr/lib/avr/include/avr/wdt.h **** 
 109:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/lib/avr/include/avr/wdt.h **** #else
 114:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/lib/avr/include/avr/wdt.h **** #endif
 116:/usr/lib/avr/include/avr/wdt.h **** 
 117:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/lib/avr/include/avr/wdt.h **** #else
 120:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/lib/avr/include/avr/wdt.h **** #endif
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/lib/avr/include/avr/wdt.h **** 
 125:/usr/lib/avr/include/avr/wdt.h **** 
 126:/usr/lib/avr/include/avr/wdt.h **** /**
 127:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/lib/avr/include/avr/wdt.h **** */
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** 
 138:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/lib/avr/include/avr/wdt.h **** 
 140:/usr/lib/avr/include/avr/wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:/usr/lib/avr/include/avr/wdt.h **** 
 142:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 143:/usr/lib/avr/include/avr/wdt.h **** do { \
 144:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 145:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 146:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"									"\n\t" \
 147:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:/usr/lib/avr/include/avr/wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:/usr/lib/avr/include/avr/wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:/usr/lib/avr/include/avr/wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:/usr/lib/avr/include/avr/wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h **** 	: [tmp]					"=r" (temp) \
 155:/usr/lib/avr/include/avr/wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:/usr/lib/avr/include/avr/wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:/usr/lib/avr/include/avr/wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:/usr/lib/avr/include/avr/wdt.h **** ); \
 162:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 163:/usr/lib/avr/include/avr/wdt.h **** 
 164:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 165:/usr/lib/avr/include/avr/wdt.h **** do { \
 166:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 167:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 168:/usr/lib/avr/include/avr/wdt.h **** 	"wdr"								"\n\t" \
 169:/usr/lib/avr/include/avr/wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:/usr/lib/avr/include/avr/wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:/usr/lib/avr/include/avr/wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:/usr/lib/avr/include/avr/wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]            "=r" (temp) \
 174:/usr/lib/avr/include/avr/wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:/usr/lib/avr/include/avr/wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:/usr/lib/avr/include/avr/wdt.h **** ); \
 179:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 180:/usr/lib/avr/include/avr/wdt.h **** 
 181:/usr/lib/avr/include/avr/wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:/usr/lib/avr/include/avr/wdt.h **** 
 183:/usr/lib/avr/include/avr/wdt.h **** /*
 184:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 185:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 187:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 188:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 191:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 194:/usr/lib/avr/include/avr/wdt.h **** */
 195:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 196:/usr/lib/avr/include/avr/wdt.h **** do { \
 197:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 198:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 199:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 208:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 216:/usr/lib/avr/include/avr/wdt.h **** ); \
 217:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 218:/usr/lib/avr/include/avr/wdt.h **** 
 219:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 220:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 221:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:/usr/lib/avr/include/avr/wdt.h ****     : \
 227:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 233:/usr/lib/avr/include/avr/wdt.h **** );
 234:/usr/lib/avr/include/avr/wdt.h **** 
 235:/usr/lib/avr/include/avr/wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:/usr/lib/avr/include/avr/wdt.h **** 
 237:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 238:/usr/lib/avr/include/avr/wdt.h **** 
 239:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 240:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 241:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 243:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 244:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 248:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 254:/usr/lib/avr/include/avr/wdt.h **** )
 255:/usr/lib/avr/include/avr/wdt.h **** 
 256:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 257:/usr/lib/avr/include/avr/wdt.h **** do { \
 258:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 259:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 260:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 262:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 263:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 269:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 275:/usr/lib/avr/include/avr/wdt.h **** ); \
 276:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 277:/usr/lib/avr/include/avr/wdt.h **** 
 278:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 279:/usr/lib/avr/include/avr/wdt.h **** 
 280:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 281:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 282:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 283:/usr/lib/avr/include/avr/wdt.h **** {
 284:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:/usr/lib/avr/include/avr/wdt.h **** 	{
 286:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 287:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 289:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 290:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 294:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 300:/usr/lib/avr/include/avr/wdt.h **** 			);
 301:/usr/lib/avr/include/avr/wdt.h **** 	}
 302:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:/usr/lib/avr/include/avr/wdt.h **** 	{
 304:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 305:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 307:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 308:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 312:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 318:/usr/lib/avr/include/avr/wdt.h **** 			);
 319:/usr/lib/avr/include/avr/wdt.h **** 	}
 320:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:/usr/lib/avr/include/avr/wdt.h **** 	{
 322:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 323:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 330:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 336:/usr/lib/avr/include/avr/wdt.h **** 			);
 337:/usr/lib/avr/include/avr/wdt.h **** 	}
 338:/usr/lib/avr/include/avr/wdt.h **** 	else
 339:/usr/lib/avr/include/avr/wdt.h ****  	{
 340:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 341:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 348:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 			);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** }
 357:/usr/lib/avr/include/avr/wdt.h **** 
 358:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 359:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 360:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 361:/usr/lib/avr/include/avr/wdt.h **** {
 362:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:/usr/lib/avr/include/avr/wdt.h **** 	{
 364:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 365:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 366:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 369:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 375:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 381:/usr/lib/avr/include/avr/wdt.h **** 				);
 382:/usr/lib/avr/include/avr/wdt.h **** 	}
 383:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:/usr/lib/avr/include/avr/wdt.h **** 	{
 385:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 386:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 387:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 390:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 396:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 402:/usr/lib/avr/include/avr/wdt.h **** 				);
 403:/usr/lib/avr/include/avr/wdt.h **** 	}
 404:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:/usr/lib/avr/include/avr/wdt.h **** 	{
 406:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 407:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 408:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 417:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 423:/usr/lib/avr/include/avr/wdt.h **** 				);
 424:/usr/lib/avr/include/avr/wdt.h **** 	}
 425:/usr/lib/avr/include/avr/wdt.h **** 	else
 426:/usr/lib/avr/include/avr/wdt.h **** 	{
 427:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 428:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 429:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 438:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 444:/usr/lib/avr/include/avr/wdt.h **** 				);
 445:/usr/lib/avr/include/avr/wdt.h **** 	}
 446:/usr/lib/avr/include/avr/wdt.h **** }
 447:/usr/lib/avr/include/avr/wdt.h **** 
 448:/usr/lib/avr/include/avr/wdt.h **** #else
 449:/usr/lib/avr/include/avr/wdt.h **** 
 450:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 451:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 452:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 453:/usr/lib/avr/include/avr/wdt.h **** {
 454:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:/usr/lib/avr/include/avr/wdt.h **** 	{
 456:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 457:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 459:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 460:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 461:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 463:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 464:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 469:/usr/lib/avr/include/avr/wdt.h **** 		);
 470:/usr/lib/avr/include/avr/wdt.h **** 	}
 471:/usr/lib/avr/include/avr/wdt.h **** 	else
 472:/usr/lib/avr/include/avr/wdt.h **** 	{
 473:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 474:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 476:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 477:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 478:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 480:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 481:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 486:/usr/lib/avr/include/avr/wdt.h **** 		);
 487:/usr/lib/avr/include/avr/wdt.h **** 	}
 488:/usr/lib/avr/include/avr/wdt.h **** }
 489:/usr/lib/avr/include/avr/wdt.h **** 
 490:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 491:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 492:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 493:/usr/lib/avr/include/avr/wdt.h **** {
 494:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:/usr/lib/avr/include/avr/wdt.h **** 	{
 496:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 497:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 498:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 500:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 501:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 510:/usr/lib/avr/include/avr/wdt.h **** 		);
 511:/usr/lib/avr/include/avr/wdt.h **** 	}
 512:/usr/lib/avr/include/avr/wdt.h **** 	else
 513:/usr/lib/avr/include/avr/wdt.h **** 	{
 514:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 515:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 259               		.loc 2 515 0
 260               	/* #APP */
 261               	 ;  515 "/usr/lib/avr/include/avr/wdt.h" 1
 262 0048 0FB6      		in __tmp_reg__,__SREG__
 263 004a F894      		cli
 264 004c A895      		wdr
 265 004e 8091 6000 		lds r24,96
 266 0052 8861      		ori r24,24
 267 0054 8093 6000 		sts 96,r24
 268 0058 1092 6000 		sts 96,__zero_reg__
 269 005c 0FBE      		out __SREG__,__tmp_reg__
 270               		
 271               	 ;  0 "" 2
 272               	.LVL14:
 273               	/* #NOAPP */
 274               	.L13:
 275 005e 0895      		ret
 276               	.LBE15:
 277               	.LBE14:
 278               	.LBE13:
 279               	.LBE12:
 280               		.cfi_endproc
 281               	.LFE114:
 283               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 284               		.weak	suspend_wakeup_init_kb
 286               	suspend_wakeup_init_kb:
 287               	.LFB119:
 182:tmk_core/common/avr/suspend.c **** 
 183:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 184:tmk_core/common/avr/suspend.c ****  *
 185:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 186:tmk_core/common/avr/suspend.c ****  */
 187:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_kb(void) { suspend_wakeup_init_user(); }
 288               		.loc 1 187 0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 294               		.loc 1 187 0
 295 0000 0C94 0000 		jmp suspend_wakeup_init_user
 296               	.LVL15:
 297               		.cfi_endproc
 298               	.LFE119:
 300               		.section	.text.suspend_wakeup_init,"ax",@progbits
 301               	.global	suspend_wakeup_init
 303               	suspend_wakeup_init:
 304               	.LFB120:
 188:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 189:tmk_core/common/avr/suspend.c ****  *
 190:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 191:tmk_core/common/avr/suspend.c ****  */
 192:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 305               		.loc 1 192 0
 306               		.cfi_startproc
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
 193:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 194:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 311               		.loc 1 194 0
 312 0000 0E94 0000 		call clear_keyboard
 313               	.LVL16:
 195:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 196:tmk_core/common/avr/suspend.c ****     backlight_init();
 197:tmk_core/common/avr/suspend.c **** #endif
 198:tmk_core/common/avr/suspend.c ****     led_set(host_keyboard_leds());
 314               		.loc 1 198 0
 315 0004 0E94 0000 		call host_keyboard_leds
 316               	.LVL17:
 317 0008 0E94 0000 		call led_set
 318               	.LVL18:
 199:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 200:tmk_core/common/avr/suspend.c ****     is_suspended = false;
 201:tmk_core/common/avr/suspend.c ****     if (rgblight_enabled) {
 202:tmk_core/common/avr/suspend.c **** #    ifdef BOOTLOADER_TEENSY
 203:tmk_core/common/avr/suspend.c ****         wait_ms(10);
 204:tmk_core/common/avr/suspend.c **** #    endif
 205:tmk_core/common/avr/suspend.c ****         rgblight_enable_noeeprom();
 206:tmk_core/common/avr/suspend.c ****     }
 207:tmk_core/common/avr/suspend.c **** #    ifdef RGBLIGHT_ANIMATIONS
 208:tmk_core/common/avr/suspend.c ****     rgblight_timer_enable();
 209:tmk_core/common/avr/suspend.c **** #    endif
 210:tmk_core/common/avr/suspend.c **** #endif
 211:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 319               		.loc 1 211 0
 320 000c 0C94 0000 		jmp suspend_wakeup_init_kb
 321               	.LVL19:
 322               		.cfi_endproc
 323               	.LFE120:
 325               		.section	.text.__vector_12,"ax",@progbits
 326               	.global	__vector_12
 328               	__vector_12:
 329               	.LFB121:
 212:tmk_core/common/avr/suspend.c **** }
 213:tmk_core/common/avr/suspend.c **** 
 214:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 215:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 216:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 330               		.loc 1 216 0
 331               		.cfi_startproc
 332 0000 1F92      		push r1
 333               	.LCFI1:
 334               		.cfi_def_cfa_offset 3
 335               		.cfi_offset 1, -2
 336 0002 0F92      		push r0
 337               	.LCFI2:
 338               		.cfi_def_cfa_offset 4
 339               		.cfi_offset 0, -3
 340 0004 0FB6      		in r0,__SREG__
 341 0006 0F92      		push r0
 342 0008 1124      		clr __zero_reg__
 343 000a 8F93      		push r24
 344               	.LCFI3:
 345               		.cfi_def_cfa_offset 5
 346               		.cfi_offset 24, -4
 347 000c 9F93      		push r25
 348               	.LCFI4:
 349               		.cfi_def_cfa_offset 6
 350               		.cfi_offset 25, -5
 351 000e AF93      		push r26
 352               	.LCFI5:
 353               		.cfi_def_cfa_offset 7
 354               		.cfi_offset 26, -6
 355 0010 BF93      		push r27
 356               	.LCFI6:
 357               		.cfi_def_cfa_offset 8
 358               		.cfi_offset 27, -7
 359               	/* prologue: Signal */
 360               	/* frame size = 0 */
 361               	/* stack size = 7 */
 362               	.L__stack_usage = 7
 217:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 218:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 363               		.loc 1 218 0
 364 0012 8091 0000 		lds r24,wdt_timeout
 365 0016 8111      		cpse r24,__zero_reg__
 366 0018 00C0      		rjmp .L20
 219:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 220:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 367               		.loc 1 220 0
 368 001a 8091 0000 		lds r24,timer_count
 369 001e 9091 0000 		lds r25,timer_count+1
 370 0022 A091 0000 		lds r26,timer_count+2
 371 0026 B091 0000 		lds r27,timer_count+3
 372 002a 4196      		adiw r24,17
 373 002c A11D      		adc r26,__zero_reg__
 374 002e B11D      		adc r27,__zero_reg__
 375 0030 8093 0000 		sts timer_count,r24
 376 0034 9093 0000 		sts timer_count+1,r25
 377 0038 A093 0000 		sts timer_count+2,r26
 378 003c B093 0000 		sts timer_count+3,r27
 379               	.L20:
 380               	/* epilogue start */
 221:tmk_core/common/avr/suspend.c ****             break;
 222:tmk_core/common/avr/suspend.c ****         default:;
 223:tmk_core/common/avr/suspend.c ****     }
 224:tmk_core/common/avr/suspend.c **** }
 381               		.loc 1 224 0
 382 0040 BF91      		pop r27
 383 0042 AF91      		pop r26
 384 0044 9F91      		pop r25
 385 0046 8F91      		pop r24
 386 0048 0F90      		pop r0
 387 004a 0FBE      		out __SREG__,r0
 388 004c 0F90      		pop r0
 389 004e 1F90      		pop r1
 390 0050 1895      		reti
 391               		.cfi_endproc
 392               	.LFE121:
 394               		.section	.bss.wdt_timeout,"aw",@nobits
 397               	wdt_timeout:
 398 0000 00        		.zero	1
 399               		.text
 400               	.Letext0:
 401               		.file 3 "/usr/lib/avr/include/stdint.h"
 402               		.file 4 "tmk_core/common/timer.h"
 403               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 404               		.file 6 "tmk_core/common/matrix.h"
 405               		.file 7 "tmk_core/common/led.h"
 406               		.file 8 "tmk_core/common/action.h"
 407               		.file 9 "tmk_core/common/host.h"
 408               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccP1H0GP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccP1H0GP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccP1H0GP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccP1H0GP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccP1H0GP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccP1H0GP.s:13     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccP1H0GP.s:60     .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
     /tmp/ccP1H0GP.s:60     .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user.localalias.0
     /tmp/ccP1H0GP.s:76     .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccP1H0GP.s:90     .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccP1H0GP.s:104    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccP1H0GP.s:159    .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
     /tmp/ccP1H0GP.s:173    .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
     /tmp/ccP1H0GP.s:190    .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccP1H0GP.s:397    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccP1H0GP.s:286    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
     /tmp/ccP1H0GP.s:303    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccP1H0GP.s:328    .text.__vector_12:0000000000000000 __vector_12

UNDEFINED SYMBOLS
matrix_scan
matrix_get_row
USB_DeviceState
led_set
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
